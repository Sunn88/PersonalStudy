1. 웹 애플리케이션
1) 웹 애플리케이션의 정의
- 기존의 정적인 웹 애플리케이션의 기능을 그대로 사용
- 서블릿(자바로 만든 CGI 프로그램), JSP, 자바 클래스들을 추가해 사용자에게 동적인 서비스를 제공하는 프로그램
- 정적 웹 프로그래밍 방식의 단점을 보완해 서비스를 제공하는 서버 프로그램
    - 정적 웹 애플리케이션의 기능인 HTML, 자바스크립트, CSS 등도 그대로 사용할 수 있음

2. 웹 애플리케이션의 기본 구조
- 웹 애플리케이션의 기본 디렉터리 구조
    - 웹 애플리케이션 이름
        - WEB-INF
            - classes
            - lib
            - web.xml
- 구조를 갖추지 않고 컨테이너에서 웹 애플리케이션을 실행하면 오류가 발생함
- 기본 구조 외에 다른 기능이 추가되면 디렉터리(폴더)를 추가해 사용
- 초기 웹 애플리케이션 개발 당시 구조를 개발자가 직접 만들어 사용함
- 현재는 이클립스 같은 통합 개발 환경에서 개발
- 파일 탐색기를 이용한 웹 애플리케이션 기본 구조
    (1) 탐색기에서 C 드라이브에 webShop 폴더 생성
    (2) webShop 폴더 안에 WEB-INF 폴더 생성 
    (3) WEB-INF 폴더에 classes와 lib 폴더 생성
    (4) WEB-INF 폴더에 텍스트 파일 생성 후 이름을 web.xml로 변경
    (5) VS Code로 web.xml 파일 열고 코드 작성
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
        </web-app>
        - 톰캣 8까지는 추가 필요 없지만 9버전부터는 xml 추가해야함
    - 웹 애플리케이션 구성 요소의 기능
        - webShop : 웹 애플리케이션의 루트 디렉터리, 다른 웹 애플리케이션 이름과 중복을 허용하지 않음 -> SP HTML 파일이 저장됨
        - WEB-INF : 웹 애플리케이션에 관한 정보가 저장되는 곳 -> 이 디렉터리는 외부에서 접근할 수 없음
        - classes : 웹 애플리케이션이 수행하는 서블릿과 다른 일반 클래스들이 위치하는 곳
        - lib : 웹 애플리케이션에서 사용되는 여러 가지 라이브러리 압축 파일(jar 파일)이 저장되는 곳
            - DB 연동 드라이버나 프레임워크 기능 관련 jar 파일이 여기 저장됨
            - lib 디렉터리의 jar는 클래스패스가 자동으로 설정됨
        - web.xml : 배치 지시자(deployment descriptor)로서 일종의 환경 설정 파일
            - 웹 애플리케이션에 대한 여러 가지 설정을 할 때 사용됨
    - WEB-INF 디렉터리 하위에 여러 가지 기능의 디렉터리를 추가하면서 실제 서비스를 제공함
    - 필요할 경우 디렉터리 안에 디렉터리를 생성해 사용할 수 있음
    - 웹 애플리케이션에 추가된 구성 요소의 기능
        - jsp/HTML : JSP 파일과 HTML 파일이 저장된 곳
        - css : 스타일시트 파일이 저장된 곳
        - image : 웹 애플리케이션에서 사용되는 이미지가 저장된 곳
        - js : 자바스크립트 파일이 저장된 곳
        - bin : 애플리케이션에서 사용되는 각종 실행 파일이 저장된 곳
        - conf : 프레임워크에서 사용하는 각종 설정 파일이 저장된 곳
        - src : 자바 소스 파일이 저장된 곳

3. 컨테이너에서 웹 애플리케이션 실행하기
1) 컨테이너에 웹 애플리케이션 등록
- 일반 PC에서 실행되는 자바 애플리케이션과 달리 단독으로 실행할 수 없음
- 톰캣과 같은 웹 컨테이너에서 실행되는 구조
- 톰캣 등록 방법
    - %CATALINA_HOME%webApps 디렉터리에 애플리케이션 저장
    - server.xml에 직접 웹 애플리케이션 등록
        - CATALINA_HOME : 묵시적으로 사용되는 톰캣의 루트 디렉터리(JDK의 JAVA_HOME 같은 것)
        - 설치한 톰캣 루트 디렉터리의 하위 디렉터리인 webapps 폴더에 작성한 웹 애플리케이션을 위치시킨 다음, 톰캣을 껐다가 다시 실행하면 자동으로 웹 애플리케이션을 인식한 후 실행시키는 방법
        (1) C드라이브의 webShop 폴더 전체 복사 후 톰캣 루트 디렉터리 하위의 webapps 폴더에 붙여넣기
        (2) VS Code 실행 후 File -> New File 선택
        (3) HTMl 코드 작성
            <?DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8" />
                <title>Hello JSP!</title>
            </head>
            <body>
                Hello JSP!!<br>
                안녕하세요!!
            </body>
            </html>
        (4) File -> Save 선택 후 파일 이름을 main.html로 수정한 후 wepShop 폴더에 저장함
2) 톰캣 실행
- 웹 애플리케이션을 서비스하기 위해 톰캣 실행
    (1) 톰캣 설치한 루트 디렉터리의 bin 폴더로 이동
    (2) bin 디렉터리의 Tomcat9.exe 실행
    (3) 콘솔창이 나타나면서 톰캣 컨테이너가 실행됨
3) 브라우저에서 웹 애플리케이션 요청
- 톰캣 컨테이너가 시작되면서 webShop 애플리케이션이 자동으로 등록되어 실행됨
- 톰캣이 실행시킨 webShop 애플리케이션을 웹 브라우저에서 요청
    http://IP주소:포트번호/컨텍스트이름/요청파일이름
    - 톰캣 컨테이너가 위치해 있는 IP주소 입력
    - 콜론으로 구분 후 톰캣 설치시 입력한 포트번호 입력
    - 컨텍스트 이름(werpShop) 입력
    - JSP나 HTML 파일 이름 입력
4) 컨텍스트란?
- 실제 개발 과정에서는 수시로 애플리케이션을 실행하고 테스트해 봐야 함
- 실제로 개발할 때는 개발자가 정한 위치에 웹 애플리케이션을 생성한 후 그 위치를 server.xml에 등록해 놓고 톰캣을 실행하는 식으로 개발함
- 그러면 톰캣이 server.xml에 입력된 정보에 따라 해당 위치로 이동해 애플리케이션을 확인한 후 실행함
- 이 때 server.xml에 등록하는 웹 애플리케이션을 컨텍스트(Context)라 부름
    - 톰캣 입장에서 인식하는 한 개의 웹 애플리케이션    