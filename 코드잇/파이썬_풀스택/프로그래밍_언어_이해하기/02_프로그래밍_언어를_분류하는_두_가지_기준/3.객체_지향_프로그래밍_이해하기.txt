Top-down 방식 : 전체를 각 부분으로 나눈 뒤 각자 완성
- 합쳐야만 기능 확인 가능
- 하나라도 미완성이면 전체 기능 확인 불가
- 수정 또한 어려움

Bottom-up 방식 : 작은 것들부터 만들어 크게 합침
- 기능이 아닌 객체를 기준으로 프로그래밍

장점
데이터나 기능에 변화가 생기더라도, 관련된 객체만 신경을 쓰면 되니, 프로그래밍하기 훨씬 편함
조금 더 의미 있는 단위로 나누기 때문에, 코드를 이해하거나, 다른 프로그램에서 재사용하기에도 더 수월함
꼭 전체가 완성되지 않아도 일부 기능만 사용해볼 수도 있기 때문에 테스트에도 더 유리합니다.

단점
코드를 잘 나누고 설계하는 것이 어려움
코드를 작성하기도 전에, 설계부터 많은 노력이 듦
굳이 객체 지향적으로 만들 필요가 없는 경우들, 예를 들어 규모가 작아서 일을 나누지 않고 혼자 바로 만들어버릴 수 있다든지, 혹은 데이터를 크게 신경 쓰지 않아도 된다든지, 혹은 이후에 바뀔 염려가 거의 없는 경우에는 
이런 설계 과정 없이 그냥 바로 만들어버리는 게 더 빠르고 효율적일 수 있음
사람이 이해하고 작성하기 편한 방식으로 코드를 나눠두다 보니, 컴퓨터가 이해하는데 시간이 걸려 실행하는 속도가 느려지거나, 저장 공간을 많이 차지하기도 함

객체 지향 언어를 사용하면 좋은 곳
많은 데이터를 다루는 프로그램이나, 규모가 큰 프로젝트같은 경우
특히 요즘은 어떤 프로그램이든 사용하는 데이터가 엄청 많아졌기 때문에, 객체 지향 프로그래밍이 더욱 더 빛을 발하는 시기

객체 지향 언어가 적합하지 않은 곳
극도로 빠른 실행 속도가 필요한 분야 혹은 저장 장치나 성능이 제한적인 기기(스마트 워치, 스마트 TV, 스마트 냉장고)에서 돌아가는 프로그램을 만들 때는 객체 지향을 안 쓰는 게 더 유리함
