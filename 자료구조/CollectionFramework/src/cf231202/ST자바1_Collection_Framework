자료구조 Data Structure : 일련의 일정 타입들의 데이터 모임 또는 관계를 나타낸 구성체
 - 자료구조와 알고리즘은 상호의존적
 - 문제 해석 후 자료구조 선택 -> 해당 자료구조에 맞는 알고리즘 선택 => 효율적인 알고리즘 선택 가능
    ex) 순서가 있는 데이터들이 있을 때 삽입(insert/add), 삭제(remove/delete)가 빈번하게 발생한다면 LinkedList를, 아닐경우에는 ArrayList를
 - 자료구조는 프로그래밍의 가장 기본이기 때문에 많은 언어들에서도 표준 라이브러리로 다양한 자료구조를 지원하고 있음
 - 자바의 대표적 자료구조 : Collection
 
 형태에 따른 자료구조 분류법
  - 선형 자료구조 Linear Data Structure : 데이터가 일렬로 연결된 형태 -> 리스트 List, 큐 Queue, 덱 Deque
  - 비선형 자료구조 Nonlinear Data Structure : 각 요소가 여러 개의 요소와 연결된 형태 like 거미줄 -> 그래프 Graph, 트리 Tree
  - 기타 자료구조 : 집합 Set
  - 파일 자료구조 : 순차파일, 색인파일, 직접파일
  
 
 Java Collection Framework : 일정 타입의 데이터들이 모여 쉽게 가공 할 수 있도록 지원하는 자료구조들의 뼈대(기본 구조)
 <= : implements 구현관계(class)
 <- : extends 확장관계(interface)
 Iterable <- Collection <- List <= ArrayList
                                               <= LinkedList
                                               <= Vector <- Stack
                                    <- Queue <= PriorityQueue
                                                   <- Deque <= ArrayDeque
                                                                 <= LinkedList 
                                    <- Set <= HashSet
                                               <= LinkedHashSet
                                               <- SortedSet <= TreeSet
 
List interface : 대표적인 선형자료구조 -> 순서가 있는 데이터를 목록으로 이용할 수 있게 만들어짐
                         배열과 비슷한 기능 + 동적 크기 할당
 - 대표 메소드 : add(E e) -> boolean : 요소를 추가
                        remove(Object o) -> boolean : 지정한 객체와 같은 첫 번째 객체를 삭제
                        contains(Object o) -> boolean : 지정한 객체가 컬렉션에 있는지 확인 -> 있으면 true, 없으면 false를 반환
                        size() -> int : 현재 컬렉션에 있는 요소 개수를 반환
                        get(int index) -> E : 지정된 위치에 저장된 원소를 반환
                        set(int index, E elements) -> E : 지정된 위치에 있는 요소를 지정된 요소로 바꿈
                        isEmpty() -> boolean : 현재 컬렉션에 요소가 없다면 true를, 요소가 있다면 false를 반환
                        equals(Object o) -> boolean : 지정된 객체와 같은지 비교
                        indesOf(Object o) -> int : 지정된 객체가 있는 첫 번쨰 요소의 위치를 반환, 만일 없을 경우 -1을 반환
                        clear() -> void : 모든 요소들을 제거
 - 구현 클래스별 특징 : ArrayList : 최상위 타입인 Object[] 타입으로 배열 사용하면서 내부 구현을 통해 동적으로 관리함
                                                      요소 접근(access elements)에서는 탁월한 성능을 보임
                                                      중간의 요소가 삽입, 삭제가 일어나는 경우 그 뒤의 요소들은 한 칸씩 밀어야 하거나 당겨야 하기 때문에 삽입, 삭제에서는 비효율적인 모습을 보임
                                    LinkedList : 데이터(item)와 주소로 이루어진 클래스를 만들어 서로 연결하는 방식
                                                       데이터와 주소로 이루어진 클래스 노드(Node), 즉 객체끼리 연결한 방식
                                                       요소를 검색해야 할 경우 처음 노드부터 찾으려는 노드가 나올 때 까지 연결된 노드들을 모두 방문해야한다는 점에서 성능이 떨어짐
                                                       해당 노드를 삭제, 삽입해야 할 경우 해당 노드의 링크를 끊거나 연결만 해주면 되기 때문에 삽입, 삭제에서는 매우 좋은 효율을 보임
                                    Vector : 기본적으로 ArrayList와 거의 같음 -> Object[] 배열을 사용하며 요소 접근에서 빠른 성능을 보임
                                                  Vector의 경우 항상 '동기화'를 지원함 -> 여러 쓰레드가 동시에 데이터에 접근하려하면 순차적으로 처리하도록 함
                                                  멀티 쓰레드에서는 안전하지만, 단일 쓰레드에서도 동기화를 하기 때문에 ArrayList에 비해 성능이 약간 느림
                                    Stack : 후입선출 LIFO

Queue interface :  선형 자료구조로 주로 순서가 있는 데이터를 기반으로 '선입선출 FIFO'을 위해 만들어진 인터페이스
                               가장 앞쪽에 있는 위치를 head(헤드)라고 부르고, 가장 후위(뒤)에 있는 위치를 tail(꼬리)라고 부름
                               Deque : Queue는 한쪽 방향으로만(단방향) 삽입 삭제가 가능한 반면, Deque는 Double ended Queue라는 의미로 양쪽에서 삽입삭제가 가능
                                            head에서도 접근 가능하며, tail에서도 접근 가능한 양방향 큐라고 보면 됨(Queue에서 확장된 형태)
 - 대표 메소드 - Queue, Deque : add(E e) -> boolean : 요소를 꼬리에 추가, 만약 큐가 모두 찼을 경우 IllegalStateException 예외 던짐
                                                  offer(E e) - >boolean : 요소를 꼬리에 추가, 큐가 모두 차더라도 예외 던지지 않음
                                                   peek() -> E : 헤드를 삭제하지 않고 검색하여 요소를 반환
                                                   poll() -> E : 헤드를 검색 및 삭제하면서 요소를 반환
                         Deque : addLast(E e) -> void : = add(E e)
                                      addFirst(E e) -> void : 요소를 헤드에 추가, 만약 큐가 모두 찼을 경우 IllegalStateException 예외 던짐
                                      offerLast(E e) -> boolean : = offer(E e)
                                      offerFirst(E e) -> boolean :요소를 헤드에 추가
                                      peekFirst() -> E : = peek()
                                      peekLast() -> E : 꼬리에 있는 요소를 삭제하지 않고 반환
                                      pollFirst() -> E : = poll()
                                      pollLast() -> E : 꼬리를 검색 및 삭제하면서 요소를 반환
                                      size() -> int : 요소의 개수를 반환
 - 구현 클래스별 특징 : LinkedList : LinkedList는 List(리스트)를 구현하기도 하지만, Deque(덱)도 구현함. 그리고 Deque Interface는 Queue Interface를 상속받음
                                                       => LinkedList는 사실상 3가지 용도로 쓸 수 있음 : List, Deque, Queue
                                    ArrayDeque : ArrayList처럼 Object[] 배열로 구현되어 있는 것
                                                           물론 LinkedList와 ArrayDeque 둘 다 Deque을 구현하고 있고, Deque은 Queue를 상속받기 때문에 Queue로도 쓰일 수 있음
                                    PriorityQueue : '데이터 우선순위'에 기반하여 우선순위가 높은 데이터가 먼저 나옴
                                                              따로 정렬방식을 지정하지 않는다면 낮은 숫자가 높은 우선순위를 가짐 -> 정렬메소드인 sort()와 같은 순서
                                                              주어진 데이터들 중 최댓값, 혹은 최솟값을 꺼내올 때 매우 유용하게 사용될 수 있음
                                                              사용자가 정의한 객체를 타입으로 쓸 경우 반드시 Comparator 또는 Comparable을 통해 정렬 방식을 구현해야 함 
 
Set Interface : 집합 => 데이터를 중복해서 저장할 수 없음, 입력 순서대로의 저장 순서를 보장하지 않음 
 - 대표 메소드 - Set, SortedSet : add(E e) -> boolean : 지정된 요소가 없을 경우 추가, 이미 지정된 요소가 있을 경우 false 반환
                                                     contains(Object o) -> boolean : 지정된 요소가 Set에 있는지를 확인
                                                     equals(Object o) -> boolean : 지정된 객체와 현재 집합이 같은지 비교
                                                     isEmpty() -> boolean : 현재 집합이 비어있을 경우 true, 아닐경우 false를 반환
                                                     remove(Object o) -> boolean : 지정된 객체가 집합에 존재하는 경우 해당 요소를 제거함
                                                     size() -> int : 집합에 있는 요소의 개수를 반환
                                                     clear() -> void : 집합에 있는 모든 요소들을 제거
                         SortedSet : first(E e) -> E : 첫 번쨰 요소(가장 낮은 요소)를 반환
                                              last() -> E : 마지막 요소(가장 높은 요소)를 반환
                                              headSet(E toElement) -> SortedSet<E> : 지정된 요소(toElement)보다 작은 요소들을 집합으로 반환
                                              tailSet(E fromElement) -> SortedSet<E> : 지정된 요소(fromElement)를 포함해 큰 요소들을 집합으로 반환
                                              subSet(E from, E to) -> SortedSet<E> : 지정된 from요소를 포함하여 from보다 크고, 지정된 to요소보다 작은 요소들을 집합으로 반환
 - 구현 클래스별 특징 : HashSet :  데이터가 정렬되어있을 필요도 없고, 빠르게 중복되는 값인지를 찾을 때 유용한 방법
                                                     hash에 의해 데이터의 위치를 특정시켜 해당 데이터를 빠르게 색인(search)할 수 있게 만든 것
                                                     삽입, 삭제, 색인이 매우 빠른 컬렉션 중 하나
                                    LinkedHashSet : 중복은 허용하지 않으면서 순서를 보장받고 싶은경우 사용
                                    TreeSet : 데이터의 '가중치에 따른 순서'대로 정렬되어 보장 => 중복되지 않으면서 특정 규칙에 의해 정렬된 형태의 집합을 쓰고 싶을 때 사용
                                                     특정 구간의 집합요소들을 탐색할 때 매우 유용
 
 
 
 
 
 
 
 
 
  