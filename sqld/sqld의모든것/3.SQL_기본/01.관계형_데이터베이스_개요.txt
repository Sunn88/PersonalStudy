1. 데이터베이스
- 데이터 : 컴퓨터로 어떤 일을 처리할 때 그 처리 대상이 되는 것
    - 현실세계로부터 측정되거나 수집된 사실이나 어떤 값
    - 일반적으로 숫자 형태의 수치 데이터뿐만 아니라 이미지나 소리, 문자열 등도 포함됨
    - 데이터 그 자체로는 아무런 가지를 가지지 않음
    - 데이터를 어떤 목적에 따라 가공(프로세상)해 유용한 정보로 변환할 필요 있음
- 데이터베이스 : 데이터를 일정한 체계에 따라 통합해 디스크나 메모리에 저장한 것
    - 응용 프로그램에 종속적이지 않도록 일종의 미들웨어 형태로 만든 것
    - 파일 형태로 데이터를 저장해 처리하는 것에 비해 자료의 독립성, 중복 저장의 최소화, 통합 처리, 자체적 관리 기능 등의 이점
- 데이터베이스 관리 시스템(DBMS) : 데이터베이스를 구축하고 관리할 수 있는 기능을 제공하는 시스템 소프트웨어

2. 관계형 데이터베이스
- 관계형 데이터 베이스(RDB) : 데이터의 일관성 문제를 근본적으로 해결한 데이터베이스 시스템
    - 2차원 구조의 행과 열로 구성된 테이블 형태로 데이터 모델을 다룸
    - 수학적 이론을 바탕으로 해 연산 자체를 수학적으로 최적화할 수 있음
    - SQL이라는 공통의 질의언어를 정의해 데이터로부터 원하는 정보를 보다 쉽게 조회, 가공, 추출하는 것이 가능함
    - ex) Oracle, PostgreSQL, MariaDB, MySQL, SQL Server 등 
- 최근에는 대부분의 DBMS가 관계형 데이터베이스에 객체지향 개념을 통합한 객체관계형 데이터베이스(Object-Relational Database)로 확장됨

3. TABLE
- 테이블 : 데이터 모델을 2차원 매트릭스 형태로 표현한 것
- 엔터티는 논리적 모델링에서 사용하는 용어 = 물리적 모델링에서는 테이블 = 관계형 데이터베이스에서는 릴레이션
- 행 : 해당 테이블의 스키마를 가지는 하나의 인스턴스 => 레코드 또는 튜플이라고 함
- 열 : 속성 => 필드라고 함

4. SQL
- SQL : 구조화된 질의언어
    - 데이터베이스의 구조를 정의하고, 데이터를 조작하며, 데이터를 제어할 수 있는 절차적+비절차적 언어
        - 절차적 언어 : 데이터를 처리하는 과정을 How의 관점에서 프로그래밍할 수 있는 언어
            - ex) C, Java
        - 비절차적 언어 : How의 관점보다는 What의 관점에서 절차를 명기하지 않고 원하는 결과만을 서술하는 언어
        - SQL은 비절차적 언어에 가깝지만, 프로시저, 함수, 트리거 등을 작성하는 문법은 절차적 언어로서의 특징을 포함하고 있음 => PL/SQL, T-SAL 등으로 부름
- DDL(Data Definition Language, 데이터 정의 언어)
    - 데이터의 구조(스키마)를 정의하는 명령어
    - ERD로 그려진 데이터 모델은 DDL과 상호 변환이 가능함
    - ex) CREATE, ALTER, DROP, RENAME, TRUNCATE
    - DDL 명령어의 경우 Oracle에서는 커밋이 자동으로 수행되며 트랜잭션이 완료되서 롤백이 불가능함
    - SQL Server에서는 자동커밋 모드를 끄거나 명시적 트랜잭션을 선언한 경우 롤백이 가능함
- DML(Data Manipulation Language, 데이터 조작 언어)
    - 테이블에 데이터를 조회, 입력, 수정, 삭제하는 명령어
    - 커밋 전에 롤백 가능
    - ex) SELECT, INSERT, UPDATE, DELETE, MERGE
*DROP, TRUNCATE, DELETE의 차이
    - DROP은 스키마까지 완전히 삭제하지만 TRUNCATE는 데이터만 삭제하고 스키마는 남겨 테이블을 초기화함
        - 둘 다 디스크 저장공간을 릴리즈(Release)해 재사용 가능하게 하며 로그를 남기지 않음
    - DELETE는 'DELETE FROM <테이블>'명령에 의해서 테이블의 데이터를 모두 삭제하지만 저장공간을 릴리즈하지는 않음
        - DELETE는 DDL이 아니므로 롤백이 가능하고 로그를 남김
    - 동일 데이터를 삭제할 때 TRUNCATE는 로그를 남기지 않는 등 작업취소(UNDO)를 위한 데이터를 생성하지 않으므로 DELETE보다 처리속도가 빠름
- DCL(Data Control Language, 데이터 제어 언어)
    - 사용자 접근 권한과 같이 보안과 제어를 다루는 명령어
    - ex) GRANT, REVOKE
- TCL(Transaction Control Language, 트랜잭션 제어 언어)
    - 트랜잭션에 대한 제어를 다루는 명령어 -> DCL의 일부로 보기도 함
    - COMMIT : 커밋 명령어를 만나면 앞의 변경 사항을 데이터베이스에 영구적으로 반영하고 트랜잭션을 완료함
    - ROLLBACK : 트랜잭션에 포함된 전체 변경 사항(이전의 커밋 명령 이후의 변경사항), 도는 지적된 저장점 이후의 변경 사항을 취소하고 원래대로 되돌림
    - SAVEPOINT : 롤백을 하기 위한 저장점 지정
*SAVEPOINT, ROLLBACK의 문법
    - Oracle 문법
        - SAVEPOINT <이름>;
        - ROLLBACK TO <이름>;
        - Oracle에서는 특별히 트랜잭션의 시작을 지정하지 않음 -> DML 코드가 시작되면 자동으로 트랜잭션이 시작됨
    - SQL Server 문법
        - SAVE TRANSACTION <이름>;
        - ROLLBACK TRANSACTION <이름>;
        - SQL Server는 BEGIN TRANSACTION으로 트랜잭션의 시작을 명시적으로 지정할 수 있음