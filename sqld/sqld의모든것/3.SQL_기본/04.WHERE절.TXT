- 특정 조건을 만족하는 행만을 대상으로 연산을 수행함
- SELECT, UPDATE, DELECT에도 사용할 수 있으나 INSERT에는 사용할 수 없음
- FROM절을 먼저 수행하므로 FROM절에서 정의한 테이블에 대한 별명은 사용할 수 있으나 SELECT절에서 정의한 칼럼에 대한 별명은 사용할 수 없음
    - SELECT절보다 WHERE절이 먼저 실행되기 때문에 SELECT절에서 정의한 칼럼에 대한 별명은 사용할 수 없음
- SELECT 칼럼1 [[, 칼럼2] ... ] FROM 테이블1 [[, 테이블2] ... ] WHERE 조건식;

1. 비교연산자
- 비교 대상이 단일해잉 아닌 다중행인 경우 복합적인 비교를 수행하는 별도의 연산자(IN, EXISTS, ALL, ANY)를 사용할 수 있음
- 단일행 비교연산자
    - NULL 값에 대해서는 비교연산자가 동작하지 않으므로 IS NULL을 사용해야 함
    - =, <, <=, >, >=
    - IS NULL : NULL이면 참을 반환
- 다중행 비교연산자
    - 서브쿼리를 사용할 떄 더 유용하게 사용됨
    - IN : 리스트 중 동일한 값이 하나라도 있으면 참을 반환
        - WHERE C1 IN (10, 20, 30) => WHERE C1=1 OR C1=20 OR C1=30
    - EXISTS : 서브쿼리의 결과가 한 건이라도 있으면 참을 반환
        - EXISTS는 서브쿼리를 대상으로만 사용 가능
        - WHERE EXISTS(SELECT * FROM TBL) => TBL 테이블에 데이터가 한 건이라도 존재하는가
    - ALL : 리스트 각각의 원소와 비교해 모두 참이면 참을 반환함
        - 단일행 비교연산자와 결합해 사용함
        - WHERE C1 < ALL(10, 20, 30) => WHERE C1<10 AND C1<20 AND C1<30
    - ANY : 리스트 각각의 원소와 비교한 결과가 하나라도 참이면 참을 반환함
        - 단일행 비교연산자와 결합해 사용함
        - WHERE C1 < ANY(10, 20, 30) => WHERE C1<10 OR C1<20 OR C1<30

2. 부정 비교연산자
- 단일행 부정 비교연산자 : 두 값이 서로 다른지를 비교할 때 사용함
    - 비교연산자와 마찬가지로 NULL값에 대해서는 IS NOT NULL을 사용해야 함
    - !=, ^=, <> : 두 값이 서로 다르면 참을 반환
    - IS NOT NULL : NULL이 아니면 참을 반환
- 다중행 부정 비교연산자
    - 다중행 비교연산자 IN과 EXISTS 앞에 NOT을 붙이면 반대의 의미가 됨
    - ALL과 ANY의 경우 바로 앞에는 NOT을 붙일 수 없고 전체 조건식 앞에 NOT을 붙여 부정을 나타냄
    - NOT IN : 리스트 중 동일한 값이 하나도 없으면 참을 반환
        - WHERE C1 NOT IN(10, 20, 30) => WHERE C1!=10 AND C1!=20 AND C1!=30
    - NOT EXISTS : 서브쿼리의 결과가 한 건도 없으면 참을 반환
        - WHERE NOT EXISTS(SELECT *FROM TBL) => TBL 테이블에 데이터가 한 건도 없는가
    - IN은 OR로 연결되고 NOT IN은 AND로 연결됨

3. SQL 연산자
- BETWEEN A AND B : A보다 크거나 같고 B보다 작거나 같으면 참을 반환
- LIKE : 패턴문자열로 문자 검색 시 사용
    - 패턴문자 %는 0개 이상의 문자, _는 임의의 문자 1개를 의미함
        - LIKE '%M%' => 중간에 'M'이 있는 문자열
        - LIKE '_M' => 'M'으로 끝나는 길이가 2개인 문자열

4. 부정 SQL 연산자
- NOT BETWEEN AN AND B : A보다 작거나 B보다 크면 참을 반환
- NOT LIKE : 패턴과 매칭되는 것이 하나도 없으면 참을 반환

5. 논리연산자
- AND : AND로 연결된 모든 조건이 참이면 참을 반환
- OR : OR로 연결된 조건 중 하나가 참이면 참을 반환
- NOT : 뒤에 오는 식의 참/거짓의 반대를 반환
