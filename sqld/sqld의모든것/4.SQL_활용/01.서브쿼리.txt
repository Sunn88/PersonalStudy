- 서브쿼리 : SQL 내부에 함수가 들어갈 수 있는 위치에는 그 위치에 맞는 결과를 반환하는 또 다른 독립적인 SQL문을 넣는 것이 가능함
- 메인쿼리 : 서브쿼리를 품고 있는 쿼리
- 위치
    - 스칼라 서브쿼리 : SELECT문의 칼럼 입력 위치
    - 인라인 뷰 : FROM절의 테이블 입력 위치
    - 중첩 서브쿼리 : WHERE절, HAVING절의 칼럼 또는 테이블 입력 위치
- 칼럼 사용 여부
    - 연관 서브쿼리 : 메인쿼리의 칼럼을 서브쿼리에서 사용
    - 비연관 서브쿼리 : 메인쿼리의 칼럼을 서브쿼리에서 사용하지 않음
- 서브쿼리는 반드시 괄호로 감싸서 표현해야 함

1. 스칼라 서브쿼리
- SELECT문의 칼럼이 입력되는 위치(SELECT, ORDER BY 등)에 들어가는 서브쿼리
- 칼럼이 입력되는 위치에 삽입되므로 스칼라 서브쿼리의 결과는 하나의 칼럼만을 가져야 함

2. 인라인 뷰
- FROM절의 테이블이 입력되는 위치에 들어가는 서브쿼리
- 뷰 : 기존의 테이블로부터 파생되어 동적으로 생성되는 테이블
    - 인라인 뷰 역시 쿼리 실행 시 생성되는 동적 테이블
    - 동적 : 실행 중에 생성되는 것
- 인라인 뷰 사용시 복잡한 쿼리를 단계적으로 작성할 수 있음
    - 전체가 아닌 테이블의 일부분만 불러와 사용함으로써 비교횟수를 즐이는 이점

3. 중첩 서브쿼리
- 중첩 서브쿼리 : 쿼리 안에 다른 쿼리가 중첩되어 들어간 경우
    - 특히 WHERE절과 HAVING절에 들어가는 것
- 스칼라 서브쿼리나 인라인 뷰와 달리 반환하는 값의 형태가 하나가 아님
    - 단일행 : 반환되는 값이 단일행, 즉 1건 이하의 데이터인 경우
        - 단일행 비교연산자의 연산 대상으로 사용 가능
    - 다중행 : 반환되는 값이 다중행인 경우
        - 다중행 비교연산자의 연산 대상으로 사용 가능
    - 다중칼럼 : 반환되는 값이 여러 칼럼, 즉 벡터인 경우
        - 반환값dl 단일 칼럼인 스칼라 서브쿼리와 달리 반환값이 여러 칼럼을 가진 테이블 형태가 됨
- 중첩 서브쿼리의 경우 메인쿼리에서 참조하고 있는 테이블의 칼럼을 서브쿼리 내에 다시 사용할 수 있음
    - 연관 서브쿼리 : 메인쿼리와 연관성을 가진 것
    - 비연관 서브쿼리 : 메인쿼리와 연관성이 없는 것

* 테이블과 뷰의 차이
    - 테이블
        - 개념 : 정의된 스키마에 따라 실제 데이터를 물리적으로 생성
        - 데이터 저장 : 실제 데이터를 디스크에 저장
        - 생성 방식 : 정적으로 생성
        - 인덱스 생성 : 자신만의 인덱스 생성 가능
        - 삽입/수정/삭제 : 제약 없음
    - 뷰
        - 개념 : 실제의 테이블을 참조해 생성하는 논리적인 가상의 테이블
        - 데이터 저장 : 실제 데이터를 저장하고 있지 않음
        - 생성 방식 : 동적으로 생성
        - 인덱스 생성 : 자신만의 인덱스 생성 불가능
        - 삽입/수정/삭제 : 제약 있음
* 뷰의 특징
    - 편리성 : 복잡하고 긴 쿼리를 뷰로 만들어 두고 사용하면 쿼리를 단순하게 작성할 수 있음
    - 보안성 : 원래의 테이블에서 외부에 노출하면 안 되는 칼럼을 제외하고 뷰를 생성해 제공할 수 있음
    - 독립성 : 테이블의 구조가 변경되더라도 뷰가 변경되지 않는다면 뷰를 통해 접근하는 애플리케이션은 변경할 필요가 없음
    - SELECT * FROM V_EMP;
        - V_EMP 뷰의 모든 칼럼 조회
    - DROP VIEW V_EMP;
        - V_EMP 뷰 삭제
        