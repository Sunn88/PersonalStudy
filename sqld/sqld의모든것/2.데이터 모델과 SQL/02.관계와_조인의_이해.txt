- 정규화를 통해 분해된 테이블들은 조회 과정에서 여러 번의 조인이 발생할 수 있음
- 조인은 데이터베이스의 성능 측면에서 다소 부하가 높은 연산이므로 정규화를 통해 많은 테이블로 분해된 데이터베이스는 전체적으로 조회성능이 떨어질 수 있음
- 성능 저하를 막기 위해서는 조회 조건에 따라 새로운 관계를 정의하며 조인이 발생하는 빈도를 줄이는 것이 필요함
- 이과정에서 데이터의 중복이 증가하면 데이터의 정합성이 깨질 가능성도 높아짐
    - 데이터의 정합성과 조회성능 간에는 트레이드 오프 관계가 성립함
- 모델링 과정에서 시스템의 요구사항에 맞게 적절한 수준에서 정합성 수준을 결정해야 함
- 성능 데이터 모델링 : 분석/설계 과정에서부터 데이터베이스의 성능을 충분히 고려해 데이터 모델링을 수행한다는 개념
    - 데이터 모델링 시 정규화를 정확하게 수행함
    - 데이터베이스 용량산정을 수행함
    - 데이터베이스에 발생되는 트랜잭션의 유형을 파악함
    - 용량과 트랜잭션의 유형에 따라 반정규화를 수행함
    - 이력모델의 조정, PK/FK 조정, 슈퍼타입/서브타입 조정 등을 수행함
    - 성능관점에서 데이터 모델을 검증함

1. 반정규화가 필요한 상황
- 반정규화 : 정규화와는 반대로 데이터의 중복을 허용하거나 데이터를 그룹핑해 조회성능을 높이는 것
- 조회성능의 향상, 개발과 운영의 단순화가 필요한 경우
- 반정규화는 데이터베이스의 정합성을 낮춰 또 다른 문제를 발생시킬 수 있음
    - 다른 대안 충분히 검토 후 수행
    - ex) 뷰 테이블 생성, 인덱스 조정, 클러스터링 적용, 응용 애플리케이션에서의 처리 등
- 반정규화 수행절차
    - 반정규화 대상 조사 : 범위처리 빈도수 조사, 통계성 프로세스 조사, 테이블 조인 개수 등 반정규화 대상 조사
    - 다른 방법 검토 : 뷰 테이블 생성, 인덱스 조정, 클러스터링 적용, 응용 애플리케이션에서의 처리 등 대안 먼저 검토
    - 반정규화 적용 : 테이블 반정규화, 칼럼 반정규화, 관계 반정규화 등 수행

2. 테이블 반정규화
- 테이블 병합
    - 조인의 발생 빈도가 높아 아예 여러 테이블을 하나로 합치는 것이 성능 향상에 효율적일 때
    - 1:M 관계 테이블 병합 : 속성의 개수가 너무 많은 경우 많은 수의 중복이 발생 -> 다른 대안 필요
    - 슈퍼타입/서브타입 관계 태이블 병합
        - One to One Type : 개별로 발생되는 트랜잭션에 대해서는 개별 테이블로 구성함
        - Plus Type : 슈퍼타입+서브타입에 대해 발생되는 트랜잭션은 JOIN 연산에 의한 성능저하를 가져오므로 슈퍼타입+서브타입 테이블로 구성함
        - Single Type : 전체를 한 번에 조회하는 트랜잭션은 UNION 연산에 의한 성능저하를 가져오므로 전체를 하나의 테이블로 통합함
- 테이블 분할
    - 테이블의 특정 속성들에 대해서만 집중적으로 접근하는 경우 별도의 테이블로 분할함
    - 분할된 테이블의 속성을 한 번에 조회할 떄는 결국 UNION이나 JOIN을 사용해야 하므로 성능 하락 발생 감안
        - UNION : 같은 스키마를 가진 두 테이블에 대한 합집합 연산
        - JOIN : 스키마가 다른 테이블을 기준키를 사용해서 병합하는 연산
    - 수직분할 : 테이블에서 수직으로 열(Column)을 쪼갬
        - 특정 속성들에 대해서만 접근이 빈번할 때 해당 속성들을 별도의 테이블로 분할해 1:1 관계로 만듦
        - 로우체이닝이 발생할 경우 테이블의 수직분할을 우선적으로 고려함
            - 로우체이닝 : 한 행의 크기가 너무 커서 디스크의 데이터 블록 하나에 저장되지 못하고 두 개 이상의 블록에 걸쳐서 저장되는 것
                - 해당 테이블의 조회성능이 매우 나빠짐
    - 수평분할(파티셔닝) : 테이블에서 수평으로 행(Row)을 쪼갬
        - 속성의 값에 따라서 구분해 조회하는 경우 인스턴스들을 그룹핑해 나눠질 수 있도록 분할하는 방법
        - 분할된 테이블의 스키마는 원래의 테이블과 통일함
- 테이블 추가
    - 조회에 필요한 속성을 포함하는 새로운 테이블 추가
    - 중복 테이블 추가 : 다른 업무나 서버에 있는 테이블과 동일한 구조의 테이블을 중복해서 추가해 원격 조인을 제거하는 방법
    - 통계 테이블 추가 : SUM, AVG 등 통계값에 해당하는 연산을 미리 계산해 저장하는 별도의 테이블을 추가하는 방법
    - 이력 테이블 추가 : 변경 이력 등 이력 데이터를 관리할 수 있는 테이블을 별도로 추가하는 방법
    - 부분 테이블 추가 : 디스크 I/O를 줄이기 위해 하나의 테이블 내에 특별히 자주 사용하는 속성들만 별도로 모아서 새로운 테이블로 추가하는 방법

3. 칼럼 반정규화
- 중복 칼럼 추가 : 조인을 감소시키기 위해 자주 사용하는 칼럼을 중복 추가하는 기법
- 파생 칼럼 추가 : 트랜잭션 처리 시 계산에 의한 부하 발생을 줄이기 위해 계산값을 별도의 칼럼으로 미리 추가하는 기법
- 이력 테이블 칼럼 추가 : 대량의 데이터를 처리할 때 조회성능 저하를 예방하기 위해 이력 테이블에 조회 조건에 해당하는 기능성 칼럼 추가 기법
- PK에 의한 칼럼 추가 : 복합 의미를 갖는 PK를 단일 속성으로 구성했을 때, PK를 파싱해서 추가적인 내용을 조회해야 하는 경우 성능 하락 -> 이를 일반 속성으로 추가하는 기법
    - 파싱(Parsing) : 구문분석 -> 일정한 형식으로 구성된 텍스트를 구성요소로 분해해 값을 추출, 해석하는 것
- 응용 시스템 오동작을 위한 칼럼 추가 : 오동작 처리를 위해 이전 데이터를 임시적으로 중복해 보관하는 기법

4. 관계 반정규화
- 여러 관계를 거쳐 다수의 조인을 통해 처리가 가능하지만 이때 발생할 수 있는 성능 저하를 막기 위해 추가적으로 중복된 관계를 맺는 방법
    - 조인이 많으면 CPU 연산 부하가 커짐에 따라 조회성능이 저하됨
    - 데이터의 무결성을 깨뜨릴 위험성 없이 조회성능을 향상시킬 수 있는 방법