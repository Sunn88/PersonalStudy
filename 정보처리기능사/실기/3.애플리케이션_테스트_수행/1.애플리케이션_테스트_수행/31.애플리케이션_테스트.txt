* 개발한 애플리케이션이 사용자의 요구를 만족시키는지, 기능이 정상적으로 작동하는지 등을 테스트
* 애플리케이션 테스트의 개념을 기반으로 애플리케이션 테스트의 필요성 및 기본 원리 숙지하기

1) 애플리케이션 테스트의 개념
- 애플리케이션에 잠재되어 있는 결함을 찾아내는 일련의 행위 또는 절차
- 개발된 소프트웨어가 고객의 요구사항을 만족시키는지 확인(Validation)
    - 사용자의 입장에서 고객의 요구사항에 맞게 구현되었는지 확인
- 소프트웨어가 기능을 정확히 수행하는지 검증(Verification)
    - 개발자의 입장에서 명세서에 맞게 만들어졌는지 점검
- 애플리케이션 테스트를 실행하기 전 개발한 소프트웨어의 유형을 분류하고 특성을 정리해
    중점적으로 테스트할 사항을 정리해야 함

2) 애플리케이션 테스트의 필요성
- 프로그램 실행 전에 오류를 발견해 예방할 수 있음
- 프로그램이 사용자의 요구사항이나 기대 수준 등을 만족시키는지 반복적으로 테스트하므로
    제품의 신뢰도를 향상시킴
- 개발 초기부터 애플리케이션 테스트를 계획하고 시작하면 단순한 오류 발견뿐만 아니라
    새로운 오류의 유입도 예방할 수 있음
- 효과적으로 수행하면 최소한의 시간과 노력으로 많은 결함을 찾을 수 있음

3) 애플리케이션 테스트의 기본 원리
- 완벽한 테스트 불가능
    - 애플리케이션 테스트는 소프트웨어의 잠재적인 결함을 줄일 수 있지만 소프트웨어에 결함이 없다고
        증명할 수는 없음
- 결함 집중(Defect Clustering)
    - 애플리케이션의 결함은 대부분 개발자의 특성이나 애플리케이션의 기능적 특징 떄문에
        특정 모듈에 집중되어 있음
    - 파레토 법칙 : 애플리케이션의 20%에 해당하는 코드에서 전체 결함의 80%가 발견됨
- 살충제 패러독스(Pesticide Paradox)
    - 애플리케이션 테스트에서는 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이
        발견되지 않는 '살충제 패러독스' 현상이 발생함
    - 방지하기 위해 테스트 케이스를 지속적으로 보완 및 개선해야 함
- 테스팅은 정황(Context) 의존
    - 애플리케이션 테스트는 소프트웨어 특징, 테스트 환경, 테스터 역량 등 정황에 따라 테스트 결과가
        달라질 수 있으므로, 정황에 따라 테스트를 다르게 수행해야 함
- 오류-부재의 궤변(Absence of Errors Fallacy)
    - 소프트웨어의 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못하면 해당 소프트웨어는
        품질이 높다고 말할 수 없음
- 테스트와 위험은 반비례 : 테스트를 많이 하면 할수록 미래에 발생할 위험을 줄일 수 있음
- 테스트의 점진적 확대 : 테스트는 작은 부분에서 시작해 점점 확대하며 진행해야 함
- 테스트의 별도 팀 수행 : 테스트는 개발자와 관계없는 별도의 팀에서 수행해야 함    