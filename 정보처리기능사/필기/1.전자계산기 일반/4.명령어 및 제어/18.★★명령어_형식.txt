* 3주소 명령어는 명령어 한 개의 길이가 길고, 연산 후 입력 자료가 그대로 보존됨 기억
* 2주소 명령어는 두 개의 주소로 구성되고, 연산 결과가 첫 번쨰 주소 부분에 저장되므로 첫 번째 주소 부분에 있던 실제 데이터는 삭제됨
* 1주소 명령어는 연산 결과를 누산기에 저장함
* ★0주소 명령어가 가장 많이 나옴
    - 주소 부분 없이 연산자만 존재함
    - 스택을 사용해 연산함
    - 스택에서의 자료 삽입은 push, 삭제는 pop


1) 명령어 형식의 개요
- 명령어의 구성
    - OP-Code부(명령부) : 명령어의 첫 번째 바이트에 기억됨
    - Operand부(자료부) : 개수에 따라 4가지 명령어 형식이 있음
        - 3주소 명령어(3 Address Instruction)
        - 2주소 명령어(2 Address Instruction)
        - 1주소 명령어(1 Address Instruction)
        - 0주소 명령어(0 Address Instruction)

2) 3주소 명령어
- Operand부가 3개로 구성되는 명령어 형식
- 여러 개의 범용 레지스터(GPR)을 가진 컴퓨터에서 사용함
- 연산 후 입력 자료가 변하지 않고 보존됨
- 명령어 한 개의 길이가 길어짐

3) 2주소 명령어
- Operand부가 2개로 구성되는 명령어 형식 -> 가장 일반적으로 사용됨
- 여러 개의 범용 레지스터를 가진 컴퓨터에서 사용함
- 연산이 결과는 주로 Operand 1에 저장되므로 Operand 1에 있던 원래의 자료가 파괴됨

4) 1주소 명령어
- Operand부가 한 개로 구성됨
- 1주소 명령어 형식의 컴퓨터는 누산기(AC)를 이용해 명령어를 처리함

5) 0주소 명령어
- Operand부 없이 OP-Code부만으로 구성됨
- 주소의 사용 없이 스택에 연산자와 피연산자를 넣었다 꺼내 연산 후 결과를 다시 스택에 넣으면서 연산함
    - 원래의 자료가 남지 않음
- 스택(Stack) : 자료의 삽입/삭제 작업이 한쪽 방향에서만 가능할 수 있도록 할당한 메모리의 일부
    - 가장 나중에 삽입된 자료를 가장 먼저 삭제하는 후입선출(LIFO) 방식으로 자료 처리
    - 자료를 삽입하는 명령은 Push, 자료를 삭제하는 명령은 Pop