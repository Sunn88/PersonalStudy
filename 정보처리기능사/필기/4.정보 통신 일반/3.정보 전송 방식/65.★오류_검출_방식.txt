* 패리티 비트의 첨부 목적과 부여 방식(우수, 기수)을 묻는 문제가 출제됨
    - 패리티 비트의 첨부 목적은 오류 검출
    - 1의 개수가 홀수(기수) 혹은 짝수(우수)가 되도록 패리티 비트를 부여함
* 해밍 코드의 개념을 묻는 문제

1) 패리티 검사
- 전송 비트들 중 값이 1인 비트의 개수가 짝수 혹은 홀수가 되도록 패리티 비트를 부여함
- 짝수(우수) 패리티 : 각 전송 비트 내에 1의 개수가 짝수가 되도록 하는 것 -> 주로 비동기식 전송에 사용
- 홀수(기수) 패리티 : 각 전송 비트 내에 1의 개수가 홀수가 되도록 하는 것 -> 주로 동기식 전송에 사용
- 가장 간단한 방식이지만, 두 개의 비트에 동시에 오류가 발생하면 검출 불가능
- 오류를 검출만 할 수 있고, 수정은 하지 못함

2) 해밍 코드 방식(Hamming Code)
- 수신 측에서 오류가 발생한 비트를 검출한 후 직접 수정
- 오류 검출은 물론 스스로 수정까지 하므로 자기 정정 부호라고도 함
- 1비트의 오류만 수정이 가능하며, 정보 비트 외에 잉여 비트가 많이 필요함
- 전송 비트 중, 1, 2, 4,... 2^n번째를 오류 검출을 위한 패리티 비트로 사용함 -> 위치는 변하지 않음
- 해밍 거리(Hamming Distance) : 송신한 데이터와 수신한 데이터의 각 대응하는 비트 중 서로 다른 비트의 수
- 정정 가능한 최대 오류의 수 : tc = (dmin - 1)/2 => dmin(최소 해밍 거리), tc(정정 가능 오류 수)

3) 순환 중복 검사(CRC; Cyclic Redundancy Check)
- 다항식 코드를 사용해 오류를 검출하는 방식
    - 다항식 코드 : 순환 중복 검사를 위해 미리 정해진 다항식을 적용해 얻어진 코드
- 동기식 전송에서 주로 사용됨
- HDLC 프레임의 FCS(프레임 검사 순서 필드)에 사용되는 방식
- 집단 오류를 검출할 수 있고, 검출률이 높으므로 가장 많이 사용함