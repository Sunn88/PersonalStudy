1) ★트랜잭션
- 트랜잭션의 정의(Transaction)
    - 하나의 논리적 기능을 수행하기 위한 작업 단위
    - 데이터베이스에서 일어나는 연산의 집합
- 트랜잭션의 특성
    - 원자성(Atomicity)
        - 완전하게 수행이 완료되지 않으면 전혀 수행되지 않아야 함
        - 연산은 Commit, Rollback을 이용해 적용 또는 취소로 한꺼번에 완료되어야 함
        - 중간에 하나의 오류가 발생되더라도 취소가 되어야 함
    - 일관성(Consistency) : 시스템의 고정 요소는 트랜잭션 수행 전후가 같아야 함
    - 격리성(Isolation, 고립성) : 트랜잭션 실행 시 다른 트랜잭션의 간섭을 받지 않아야 함
    - 영속성(Durability, 지속성) : 트랜잭션의 완료 결과가 데이터베이스에 영구히 기억됨
- CRUD Matrix
    - 데이터베이스에 영향을 주는 생성(Create), 읽기(Read), 갱신(Update), 삭제(Delete) 연산으로 프로세스와 테이블 간에 매트릭스를 만들어서 트랜잭션을 분석하는 도구
    - 업무 프로세스와 데이터 간의 상관관계 분석을 위한 것으로 업무 프로세스와 엔티티 타입을 행과 열로 구분하여 행과 열이 만나는 교차점에 이용에 대한 상태를 표시함
- 즉각 갱신법
    - 데이터를 갱신하면 트랜잭션이 완료되기 전에 실제 데이터베이스에 반영하는 방법
    - 회복 작업을 위해서 갱신 내용을 별고 Log로 기록해야 함
    - Redo, Undo 모두 사용 가능함
        - Redo(다시 실행)
            - 갱신이 완료된 데이터를 로그 파일을 이용해 복원함
            - 이미 진행 중이었던 작업을 다시 함
        - Undo(실행 취소)
            - 변경되었던 데이터를 취소해 원래의 내용으로 복원함
            - 처음에 있던 옛 데이터를 이용해 데이터를 복원함
            - 했던 작업을 다시 하지 않고 원상태로 되돌림
- 트랜잭션의 연산
    - Commit 연산 : 트랜잭션 실행이 성공적으로 종료되었음을 선언함
    - Rollback 연산 : 트랜잭션 실행이 실패하였음을 선언함
        - Rollback 연산 수행 후의 상태를 철회(Aborted)라고 함
    - Recovery 연산 : 트랜잭션을 수행하는 도중 장애로 인해 손상된 데이터베이스를 손상되기 이전의 정상적인 상태로 복귀시키는 작업
- 트랜잭션의 상태
    - 활동(Active) : 트랜잭션이 현재 실행 중인 상태를 의미
    - 부분 완료(Partially Committed) : 트랜잭션이 마지막 처리를 실행한 뒤 데이터베이스에 그 처리 내용을 적용하기 직전의 상태
    - 완료(Committed) : 부분 완료 상태에서 정상적인 트랜잭션 처리가 이루어져 데이터베이스에 트랜잭션 처리를 적용 완료한 상태
    - 실패(Failed) : 트랜잭션 실행 중 오류로 인해 정상적인 처리가 되지 않아 원자성과 일관성에 문제가 발생해 더 이상 처리가 불가능한 상태
    - 철외(Aborted) : 트랜잭션 처리 실패를 확인하고 처음 상태로 돌아가는 상태
2) 병행 제어
- 병행 제어(Concurrency Control)
    - 동시에 수행되는 트랜잭션들을 일관성 있게 처리하기 위해 제어하는 것
    - 목적
        - 데이터베이스의 공유를 최대화함
        - 데이터베이스의 일관성을 최대화함
        - 시스템 활용도를 최대화함
        - 사용자에 대한 응답 시간을 최소화함
    - 병행 수행의 문제점 : 갱신 분실, 비완료 의존성, 모순성, 연쇄 복귀가 있음
    - 종류 : 로킹, 최적 병행 수행, 타임스태프, 다중 버전 기법
- 타임스탬프
    - 트랜잭션이 DBMS로부터 유일한 타임스탬프(시간 허가 인증 도장)를 부여받음
    - 동시성 제어를 위한 직렬화 기법으로 트랜잭션 간의 순서를 미리 정하는 방법
- 로킹(Locking) 특징
    - 로킹은 하나의 트랜잭션이 데이터를 액세스하는 동안 다른 트랜잭션이 그 데이터 항목을 엑세스할 수 없도록 하는 병행 제어 기법
    - 로킹 단위
        - 로킹의 대상이 되는 객체(파일, 테이블, 필드, 레코드)의 크기
        - 운영체제에서 임계구역과 유사한 개념
        - 운영체제에서는 모든 공유 자원이 임계구역이지만 데이터베이스의 로킹 단위는 분할된 트랜잭션의 크기, 영역을 말하는 것
    - 로킹 단위가 커지면 로크의 수가 적어 관리가 쉬워지지만 병행성 수준은 낮아짐
    - 로킹 단위가 작으면 로크의 수가 많아 관리가 어려워지지만 병행성 수준은 높아짐
    - 2단계 로킹(2-Phase Locking)
        - 직렬성은 보장하지만 교착상태 예방은 불가능함
            - 직렬성 : 트랜잭션을 순서대로 처리하는 것
        - 확장 단계와 축소 단계의 두 단계가 있음
        - 각 트랜잭션의 로크 요청과 해제 요청을 2단계로 실시함
- 병행 수행의 문제점
    - 갱신 분실(Lost Update) : 같은 데이터에 대해 둘 이상의 트랜잭션이 동시에 갱신할 때, 갱신 결과의 일부가 없어지는 현상
    - 비완료 의존성(Uncommitted Dependencey) : 하나의 트랜잭션 수행이 실패한 후 회복하기 전에 다른 트랜잭션이 실패한 갱신 결과를 참조하는 현상
    - 모순성(Inconsistency) : 하나의 트랜잭션이 여러 데이터 갱신 연산을 수행할 때, 일관성 없는 상태의 데이터베이스에서 데이터를 가져옴으로써 데이터의 불일치가 발생하는 것
    - 연쇄 복귀(Cascading Rollback) : 수행되던 둘 이상의 트랜잭션 중 어느 한 트랜잭션에 오류가 발생해 Rollback 하는 경우 다른 트랜잭션들도 함께 Rollback 되는 현상
