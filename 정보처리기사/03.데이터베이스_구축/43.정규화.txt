1) ★정규화 과정
- 제1정규형(원자)
    - 어떤 릴레이션에 속한 모든 도메인이 원자값(Atomic Value)만으로 되어 있는 릴레이션
    - 하나의 속성만 있어야 하고 반복되는 속성은 별도 테이블로 분리함
- 제2정규형(부분)
    - 1정규형을 만족하고, 릴레이션에 내재된 부분 함수적 종속을 제거함
    - 기본키가 아닌 애트리뷰트 모두가 기본키에 완전 함수 종속이 되도록 부분 함수적 종속에 해당하는 속성을 별도의 테이블로 분리함
    - 등급, 할인율 필드는 혼합 속성의 기본키(고객아이디, 이벤트번호)에 부분 함수적 종속성을 가짐
- 제3정규형(이행) : 1, 2정규형을 만족하고, 속성 간 이행적 함수 종속을 제거함
- BCNF(보이스/코드)정규형(결정)
    - 1, 2, 3정규형을 만족하고, 결정자가 후보키가 아닌 함수 종속이 제거되면 보이스/코드 정규형에 속함
    - 후보키를 여러 개 가지고 있는 릴레이션에서 발생할 수 있는 이상 현상을 해결하기 위해 3정교형보다 좀 더 강력한 제약조건을 적용함
    - 보이스/코드 정규형에 속하는 모든 릴레이션은 3정규형에 속하지만, 3정규형에 속하는 모든 릴레이션이 보이스/코드 정규형에 속하지는 않음
    - BCNF의 다양한 정의
        - 결정자가 후보키가 아닌 함수 종속 제거
        - 비결정자에 의한 함수적 종속 제거
        - 비식별자 속성 간의 종속 제거
        - 결정자이면서 후보키가 아닌 것 제거
- 제4정규형(다치) : 1, 2, 3, BCNF 정규형을 만족하고, 다가(다치) 종속을 제거함
- 제5정규형(조인) : 1, 2, 3, BCNF, 4정규형을 만족하고, 후보키를 통하지 않은 조인 종속을 제거함
2) 반정규화
- 정규화를 통해 정합성과 데이터 무결성이 보장되지만, 테이블의 개수가 증가함에 따라 테이블 간의 조인이 증가하여 조회 성능이 떨어질 수 있는데 이렇게 정규화된 엔티티, 속성, 관계에 대해 시스템의 성능 향상과
    개발(Development) 및 운영(Maintenance)의 단순화를 위해 중복, 통합, 분리 등을 수행하는 데이터 모델링 기법
- 반정규화 기법 : 테이블 반정규화, 컬럼 반정규화, 관계 반정규화
- 테이블 반정규화 기법 : 테이블 병합, 테이블 분할, 테이블 추가
- 테이블 추가 반정규화 유형 : 중복 테이블 추가, 집계 테이블 추가, 진행 테이블 추가, 부분 테이블 추가
- 테이블 병합
    - 1:1 관계 테이블 병합 : 1:1 관계를 통합하여 성능을 향상시킴
    - 1:m 관계 테이블 병합 : 1:m 관계를 통합하여 성능을 향상시킴
    - 슈퍼서브 타입 테이블 병합 : 슈퍼/서브를 통합하여 성능을 향상시킴
- 테이블 분할(파티셔닝)
    - 테이블을 여러 부분으로 분할하는 것을 의미함
    - 대표적인 분산 데이터베이스 분할로 각 파티션은 여러 노드로 분산 배치되어 사용자가 각 노드에서 로컬 트랜잭션을 수행할 수 있음
    - 파티션 각각이 작은 데이터베이스가 되도록 분할하는 방법과 하나의 테이블만 같이 선택된 요소로 분리하는 방법이 있음
- 행/열 분할 기법
    - 수직 분할 : 트랜잭션의 처리 유형을 파악하고 컬럼(열) 단위의 테이블을 저장 장치의 I/O 분산 처리를 위해 테이블을 1:1로 분리해 성능을 향상시킴
    - 수평 분할 : 로우(행) 단위로 집중 발생되는 트랜잭션을 분석해 저장 장치의 I/O 및 데이터 접근의 효율성과 성능 향상을 위해 로우 단위로 테이블을 분할함
- 분할 키 기준 분할 기법
    - 범위 분할 : 분할 키 값이 범위 내에 있는지 여부로 구분함
    - 목록 분할 : 값 목록에 파티션의 할당 분할 키 값을 그 목록에 비추어 파티션을 선택함
    - 해시 분할 : 해시 함수의 값에 따라 파티션에 포함할지를 결정함
    - 합성 분할 : 범위, 목록, 해시 분할을 결합해 사용함
    - 라운드로빈 분할
        - 라운드로빈 분할로 회전하면서 새로운 행이 파티션에 할당됨
        - 파티션에 행의 고른 분포를 원할 때 사용함
        - 기본키가 필수가 아니며, 해시 분할과 다르게 분할 컬럼을 명시하지 않아도 됨
- 데이터베이스 클러스터링
    - 두 대 이상의 서버를 하나의 서버처럼 운영하는 기술로, 서버 이중화 및 공유 스토리지를 사용해 서버의 가용성을 높이는 기술
    - 병렬 처리 클러스터링 : 처리율을 높이기 위한 목적으로 단위 작업을 여러 서버에서 분산 처리함
    - 고가용성 클러스터링 : 하나의 서버에 장애가 발생하면 다른 서버가 작업을 이어받아 처리해 서비스 중단을 방지함
- 테이블 추가
    - 중복 테이블 추가 : 업무가 다르거나 서버가 분리된 경우 같은 테이블을 중복으로 추가해 원격 조인을 제거하는 방법을 통해 성능을 향상시킴
    - 집계 테이블 추가 : 합계, 평균 등 통계 계산을 미리 수행해 계산해 둬 조회 시 성능을 향상함
    - 이력 테이블 추가 : 이력 테이블에 레코드를 중복 저장해 성능을 향상시킴
    - 부분 테이블 추가 : 하나의 테이블을 전체 컬럼 중 자주 이용하는 집중화된 컬럼이 있을 경우, 디스크 I/O를 줄이기 위해 해당 컬럼들을 모아놓은 별도의 반정규화 테이블을 생성함
    - 진행 테이블 추가 : 검색 조건이 여러 테이블에 걸쳐 다양하게 사용되어 복잡하고 처리량이 많은 경우 사용함
- 컬럼 반정규화
    - 중복 컬럼 추가 : 조인 시 성능 저하를 예빵하기 위해, 중복된 컬럼을 추가하여 조인 횟수를 감소시킴
    - 파생 컬럼 추가 : 트랜잭션이 처리되는 시점에 계산 때문에 발생하는 성능 저하를 예방하기 위해 미리 계산된 값을 저장하는 파생 컬럼을 추가함
    - 이력 테이블 컬럼 추가 : 대량의 이력 데이터를 처리할 때 임의의 날짜 조회나 최근 값을 조회할 때 발생하는 성능 저하를 예방하기 위해 최근값 여부, 시작일, 종료일 등이 기능성 컬럼을 추가함
    - PK에 의한 컬럼 추가 : 복합 의미가 있는 PK를 단일 속성으로 구성했을 때 발생하며 PK 안에 데이터가 존재하지만, 성능 향상을 위해 일반 컬럼으로 추가함
    - 응용 시스템 오작동을 위한 컬럼 추가 : 업무적으로는 의미가 없으나, 데이터 처리할 때 오류로 인해 원래값으로 복구하길 원하는 경우 이전 데이터를 임시로 중복 보관하는 컬럼을 추가함
- 컬럼 반경규화
    - 중복 관계 추가 : 데이터 처리 시 여러 경로를 거쳐 조인할 수 있지만, 이때 발생할 수 있는 성능 저하를 방지하기 위해 추가적인 관계 설정을 통해 성능을 향상할 수 있음