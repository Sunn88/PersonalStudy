1) 소프트웨어 아키텍처(Software Architecture)
- 소프트웨어 아키텍처의 개요
    - 요구사항을 기반으로 개발 대상 소프트웨어의 기본 틀(뼈대)을 만드는 것
    - 다수의 이해관계자가 참여하는 복ㅈ바한 개발에서 상호이해, 타협, 의사소통을 체계적으로 접근하기 위한 것
    - 전체 시스템의 전반적인 구조를 체계적으로 설계하는 것
    - 권형도(2004) : 소프트웨어를 구성하는 컴포넌트들의 상호작용 및 관계, 각각의 특성을 기반으로 컴포넌트들이 상호 유기적으로 결합하는 소프트웨어의 여러 가지 원칙들의 집합
    - 역할 : 설계 및 구현을 위한 구조적/비구조적인 틀(Frame)을 제공함
    - Structure Frame : 시스템 개발을 위해 결정된 컴포넌트의 구조 모델
    - Non Structure Frame : 해당 구조 모델 이외 다른 아키텍처 설계의 결정들
- 소프트웨어 아키텍처 시스템 품질 속성
    - 가용성(Availability) : 인가된 사용자가 원하는 시간이나 장소에서 필요 정보에 접근할 수 있고, 사용할 수 있도록 보장하는 성질
    - 변경 용이성(Modifiability) : 개발자가 새로운 기능을 추가하거나 변경하더라도 부담없이 변경할 수 있도록 해줌
    - 성능(Performance) : 처리량, 응답 시간, 사용 가능도 등을 측정함
    - 보안성(Security) : 권한이 없는 사용자가 데이터나 프로그램을 사용할 수 없도록 하는 것
    - 사용 편의성(Usability, 사용성, 사용 운용성) : 소프트웨어를 쉽게 사용할 수 있는가의 정도
    - 시험 용이성(Testability) : 소프트웨어를 쉽게 검사할 수 있는가의 정도
- 소프트웨어 아키텍처의 특징
    - 간략성 : 이해하고 추론할 수 있을 정도로 간결해야 함
    - 추상화 : 시스템의 추상적인 표현을 사용함
    - 가시성 : 시스템이 포함해야 하는 것들을 가시화해야 함
    - 복잡도 관리 종류 : 과정 추상화, 데이터 추상화, 제어 추상화
- 소프트웨어 아키텍처 평가 기준
    - 시스템은 어떻게 모듈로 구성되는가?
    - 시스템은 실행 시에 어떻게 행동하고 연결되는가?
    - 시스템은 어떻게 비 소프트웨어 구조(CPU, 파일 시스템, 네트워크, 개발팀 등)와 관계하고 있는가?
- 아키텍처 프레임워크 구성 요소들
    - 프레임워크(FrameWork) : 복잡한 소프트웨어 문제를 해결하거나 서술하는데 필요한 기본 구조를 제공함으로써 재사용이 가능하게 해줌
        - Architecture Description(AD)
            - 아키텍처를 기록하기 위한 산출물
            - 하나의 AD는 하나 이상의 View로 구성함
        - 이해관계자(Stakeholder)
            - 소프트웨어 시스템 개발에 관련된 모든 사람과 조직을 의미함
            - 고객, 개발자, 프로젝트 관리자 등을 포함함
        - 관심사(Concerns)
            - 같은 시스템에 대해 서로 다른 이해관계자의 의견
            - ex) 사용자 입장 : 기본 기능 + 신뢰성/보안성 요구
        - 관점(Viewpoint) : 서로 다른 역할이나 책임으로 시스템이나 산출물에 대한 서로 다른 관점
        - 뷰(Vies) : 이해관계자들과 이들이 가지는 생각이나 견해로부터 전체 시스템을 표현(4+1 View)함
- 소프트웨어 아키텍처 4+1 View Model
    - Kruchten에 의해 Object 표기법을 사용하다 1995년 Booch의 UML이 정의되면서 Booch 표기법을 포함해 4+1이 됨
    - 다양하고 동시적인 View를 기반으로 소프트웨어 위주 시스템의 아키텍처를 묘사하는 View 모델
    - 복잡한 소프트웨어 아키텍처를 다양한 이해관계자들이 바라보는 관점
        - 다양한 측면을 고려하기 위해 다양한 관점을 바탕으로 정의한 모델
    - Logical View(분석 및 설계), Implementation View(프로그래머), Process View(시스템 통합자), Deployment View(시스템 엔지니어), Use Case View(사용자)의 5계층으로 분류한 모델
- 소프트웨어 아키텍처 설계 원리
    - 단순성 : 다양한 요소를 단순화하여 복잡성을 최소화함
    - 효율성 : 활용 자원의 적절성과 효율성을 높임
    - 분할, 계층화 : 다루기 쉬운 단위로 묶어서 계층화함
    - 추상화 : 부가적인 기능이 아닌 핵심 기능 위주로 컴포넌트를 정의함
    - 모듈화 : 내부 요소의 응집도를 높이고 각 모듈의 외부 결합도를 낮춤
- 소프트웨어 아키텍처 설계 과정 : 설계 목표 설정->시스템 타입 결정->스타일 적용 및 커스터마이즈->서브 시스템의 기능, 인터페이스 동작 작성->아키텍처 설계 검토
- SW 아키텍처 평가 방법론 유형
    - Scenario Based
        - 품질 요소를 위해 미리 정의된 Profile에 의존하여 평가하는 방식
        - 시나리오의 정밀함에 다라 평가 결과도 정밀해질 수 있음
        - ex) ATAM, SAAM
        - 평가 유형 : 예측평가
    - Simulation Based
        - BMT(BenchMarking Test) 시뮬레이션 기반으로 평가
        - 평가 유형 : 실무평가
    - Experience Based
        - 정량적인 분석이 어려운 경우 적용하는 경험 기반으로 평가
        - 평가 유형 : 사례 평가
    - Mathematical Model Based
        - 기준 모델을 수치화하고 이를 기초로 평가하는 수학적 기반 모델
        - 평가 유형 : 정량적 평가
- ★소프트웨어 아키텍처 평가 방법론의 종류
    - SAAM(Software Architecture Analysus Method)
        - 최초 정리된 평가 방법
        - 다양한 수정 가능성(Modification) 관점에서 아키텍처를 평가하고 분석하는 방법
        - 수정/변경에 필요한 자원을 가정하고 이를 기반을 평가함
        - ATAM에 비하여 상세하지는 않지만 보다 많은 영역에 적용할 수 있음
    - ATAM(Architecture Trade Off Analysis Method)
        - SAAM을 승계한 방법론
        - 아키텍처가 품질 속성을 만족하는지 판단하고, 어떻게 절충(TradeeOff)하면서 상호작용하는지 분석하는 평가 방법
        - 모든 품질 속성을 평가하고, 관심 있는 모든 관련 당사자들이 참여함
        - 정량적/정성적 분석/평가를 수행하며, 민감점(Sensitivity Point)과 절충점(Trade Off Point)을 찾는 데 중점을 둠
    - CBAM(Cost Benefit Analysis Method)
        - ATAM에서 경제적인 부분을 보완한 형태
        - 소프트웨어 아키텍처를 ROI 관점에서 평가하며 시스템이 제공하는 품질에서 경제적 이득 측면을 고려함
            - ROI(Return On Investment) : 투자 수익률
        - 비용, 이익을 기반으로 ROI를 계산하여 수익이 최대화되는 소프트웨어 아키텍처를 선정함
    - ARID(Active Review for Intermediate Design)
        - ATAM과 ADR를 혼합한 형태
        - 전체 아키텍처가 아닌 한 부분에 대한 품질 요소에 집중하여 평가를 진행함
    - ADR(Active Design Review) : 아키텍처 구성 요소 간 응집도를 평가함
