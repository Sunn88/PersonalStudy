1) SW 설계 기법
- 구조적 프로그래밍(Structured Programming)
    - 프로그램의 이해가 쉽고 디버깅 작업이 쉬움
    - 한 개의 입구(입력)와 한 개의 출구(출력) 구조를 갖도록 함
    - GOTO(분기) 문은 사용하지 않음
    - 구조적 프로그래밍의 기본 구조 : 순차(Sequence) 구조, 선택(Selection) 구조, 반복(Iteration) 구조
- 절차적 프로그래밍(Procedural Programming)
    - 순서대로 일련의 명령어를 나열하여 프로그래밍함
    - Function(함수) 기반의 프로그래밍이며, 프로시저로써 Function 외에서 Subroutine이 문법적으로 구현되어 있음
    - 절차형 언어의 경우 규모가 커지면 커질수록 함수가 기하급수적으로 늘어남
    - 함수가 타 프로그램과 문제를 일으킬 수 있는 문제점을 가지고 있음
    - 프로그램과 별개로 데이터 취급이 되므로 완전하지 않고 현실 세계 문제를 프로그램으로 표현하는 데 제약이 있음
- 객체지향(Object Oriented) 분석
    - 현실 세계의 대상 체인 개체(Entity)를 속성(Attribute)과 메소드(Method)로 결합하여 객체(Object)로 표현(모델링)함
    - 소프트웨어 개발 대상을 기능이 아닌 개체를 대상으로 하며 개체 간의 상호 관계를 모델링하는 방식
    - 구조적 소프트웨어 위기를 해결하기 위한 생산성, 재사용성, 확장성, 사용 편의성, 유지보수성 요구로 인해 등장함
    - 현실 세계를 객체라는 모형으로 형상화하므로 사용자와 개발자의 상호 이해도가 높음
- 객체지향 프로그래밍(Object Oriented Programming)
    - 컴퓨터 소프트웨어를 구조적인 코드 단위로 보는 것이 아니라 Object 단위로 구분하고  Object 간의 모음으로 설계하는 것
    - 소프트웨어 내의 Object는 서로 Message를 주고받음
    - 처리 요구를 받은 객체가 자기 자신 안에 있는 내용을 가지고 처리하는 방식
    - 프로그램이 단순화되고 생산성, 신뢰성이 높아져 대규모 개발에 많이 사용됨
- 구조적 분석 기법 vs 객체지향 분석 기법
    - 구조적 분석 기법
        - 큰 문제를 작게 쪼개어 기능(모듈)으로 분리함
        - 기능(모듈) 중심으로 시스템을 파악하며 순차적인 처리가 중요시되는 하향식(Top-down) 방식
    - 객체지향 분석 기법
        - 작은 문제들을 해결할 수 있는 객체들을 만듦
        - 객체들을 상호작용하도록 조합해서 큰 문제를 해결하는 상향식(Bottom-Up) 방식
- 객체지향 구성 요소
    - Class
        - 유사한 객체를 정의한 집합으로 속성+행위를 정의한 것으로 일반적인 Type을 의미함
        - 기본적인 사용자 정의 데이터형이며, 데이터를 추상화하는 단위
        - 구조적 기법에서의 단위 테스트(Unit Test)와 같은 개념
        - 상위 클래스(부모 클래스, Super Class), 하위 클래스(자식 클래스, Sub Class)로 나뉨
    - Object : 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 함
        - 데이터와 함수를 묶어 캡슐화하는 대상이 됨
        - Class에 속한 Instance를 Object라고 함
        - 하나의 소프트웨어 모듈로서 목적, 대상을 표현함
        - 같은 클래스에 속한 각각의 객체를 Instance라고 함
        - Attribute : Object가 가지고 있는 데이터 값
        - Method : Object의 행위인 함수
    - Message : Object 간에 서로 주고받는 통신을 의미함
    