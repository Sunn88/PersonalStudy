1) 소프트웨어 아키텍처 패턴
- 아키텍처 패턴
    - 소프트웨어 아키텍처를 설계하는 데 발생하는 문제점을 해결하기 위한 재사용 가능한 솔루션으로 디자인 패턴과 유사하나 더 큰 범위에 속함
    - 종류 : Layered, Client-Server, Mater-Slave, Pipe-Filter, Broker, Peer to Peer, Event-Bus, MVC(Model View Controller), Blackboard, Interpreter
    - 장점 : 개발 시간 단축, 고품질 소프트웨어, 안정적 개발 가능, 개발 단계 관계자 간 의사소통이 간편함, 시스템 구조 이해도가 높아 유지보수에 유리함
    - 아키텍처 패턴 = 아키텍처 스타일 = 표준 아키텍처
- 계층(Layered) 패턴
    - 소프트웨어를 계측 단위(Unit)로 분할하며, N-tier 아키텍처 패턴이라고도 함
    - 계층적으로 조직화할 수 있는 서비스로 구성된 애플리케이션에 적합함
    - 전통적인 방법으로 층 내부의 응집도를 높이는 것이 중요함
    - 모듈들의 응집된 집합 계층 간의 관계는 사용 가능의 관계로 표현함
    - 장점 : 정보은닉의 원칙 적용, 높은 이식성을 가짐
    - 단점 : 추가적인 실행 시 오버헤드(너무 많은 계층으로 성능 감소 발생)가 발생함
    - 활용 : 일반적인 데스크톱 소프트웨어나 E-Commerce 웹 애플리케이션
    - 4계층
        - Presentation Layer - UI 계층(UI Layer)
        - Application Layer = 서비스 계층(Service Layer)
        - Business Logic Layer = 도메인 계층(Domain Layer)
        - Data access Layer = 영속 계층(Persistence Layer)
- MVC(Model View Controller) 패턴 : 양방향으로 데이터 전달
    - Model -updates-> View -presentation-> User -input-> Controller -manipulates-> Model
    - 대화형 애플리케이션을 아래와 같이 3부분으로 분류함
        - Model : 핵심 기능 데이터
            - 데이터와 비즈니스 로직을 관리함
            - 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 함
        - View : 사용자에게 정보를 표시함(다수 뷰가 정의될 수 있음)
            - 레이아웃과 화면을 처리함
            - 모델이 가지고 있는 정보를 따로 저장해서는 안 됨
        - Controller : 사용자로부터 입력을 처리함
            - 명령을 모델과 뷰 부분으로 라우팅함
            - 모델이나 뷰에 대해 알고 있어야 함
    - 장점 : 같은 모델에서 다수의 뷰를 생성할 수 있으며, 실행 시간에 동적으로 연결 및 해제할 수 있음
    - 단점 : 사용자 행동에 대한 불필요 업데이트가 발생할 수 있으며 복잡성이 증가할 수 있음
    - 활용 : 일반적인 웹 애플리케이션 설계 아키텍처, Django나 Rails와 같은 웹 프레임워크
- 클라이언트 서버(Client Server) 패턴
    - 하나의 서버와 다수 클라이언트로 구성되며, 클라이언트가 서버에 서비스를 요청하면 커뮤니케이션이 이루어짐
    - 서버는 응답을 위해 항상 대기중이어야 함
    - 여러 컴포넌트에 걸쳐 데이터와 데이터를 처리하는 애플리케이션에 적합함
    - 장점 : 직접 데이터 분산, 위치 투명성을 제공함
    - 단점 : 서비스와 서버의 이름을 관리하는 레지스터가 없어 이용 가능한 서비스 시간에 불편함을 초래함
    - 활용 : 이메일, 문서 공유, 은행 등 온라인 애플리케이션
- 파이프 필터(Pipe-Filters) : 단방향으로 데이터 전달
    - 데이터 흐름(Data Stream)을 생성하고 처리하는 시스템을 위한 구조
        - 데이터 흐름 : 데이터 송/수신이나 처리의 연속적 흐름
    - 필터는 파이프를 통해 받은 데이터를 변경시키고 그 결과를 파이프로 전송함
    - 각 처리 과정은 필터 컴포넌트에서 이루어지며, 처리되는 데이터는 파이프를 통해 흐름
    - 이 파이프는 버퍼링 또는 동기화 목적으로 사용될 수 있음
    - 컴파일러, 연속한 필터들은 어휘 분석, 파싱, 의미 분석 그리고 코드 생성을 수행함
    - 장점 : 필터 교환과 재조합을 통해 높은 유연성을 제공함
    - 단점 : 상태 정보 공유를 위해 비용이 소요되며 데이터 변환에 과부하가 걸릴 수 있음
    - 활용 : 컴파일러, 어휘 분석, 구문 분석, 의미 분석, 코드 생성
- Peer To Peer
    - 클라이언트/서버 스타일에 대칭적 특징을 추가한 형태
    - Peer가 하나의 컴포넌트로 대응되며 컴포넌트는 클라이언트, 서버 역할을 모두 수행함
- 브로커(Broker)
    - 컴포넌트가 컴퓨터와 사용자를 연결해 주는 역할을 하며 분산 시스템에 주로 사용됨
    - 요청에 응답하는 컴포넌트들이 여러 개 존재할 때 적합함
    - Apache, ActiveMQ, Apache Kafka, RabbitMQ, JBoss Messaging과 같은 메시지 브로커 소프트웨어에 활용
- 블랙보드(Black Board)
    - 결정적 해결 전략이 존재하지 않는 문제 해결에 적합하며 음성 인식, 신호 해석 등에 활용됨
    - 블랙보드의 데이터를 컴포넌트에서 검색을 통해 찾을 수 있음
    - 장점 : 다양한 접근법, 유지보수성, 가변성, 재사용 가능한 지식 자원
    - 단점 : 테스팅 어려움, 완전한 해결책을 보장하지 못함
- 이벤트 버스(Event-Bus)
    - 소스 이벤트가 메시지를 발행하면 해당 채널 구독자가 메시지 수신 후 해당 이벤트를 처리하는 방식
    - 주로 이벤트를 처리하며 이벤트 소스, 이벤트 리스터(Event Listener), 채널, 이벤트 버스 등 4가지 주요 컴포넌트들을 가짐
    - 소스는 이벤트 버스를 통해 특정 채널로 메시지를 발행하고, 리스너는 특정 채널에서 메시지를 구독함
    - 리스너는 이전에 구독한 채널에 발행된 메시지에 대해 알림을 받음
- 인터프리터(Interpreter)
    - 인터프리터 : SQL과 같은 데이터베이스 쿼리 언어, 통신 프로토콜을 정의하기 위한 언어
    - 특정 언어로 작성된 프로그램을 해석하는 컴포넌트를 설계할 떄 사용됨
    = 주로 특정 언어로 작성된 문장 혹은 표현 식이라고 하는 프로그램의 각 라인을 수행하는 방법을 지정함
    - 기본 아이디어는 언어의 각 기호에 대해 클래스를 만드는 것
- 이벤트 소스(Event Source) : 처리 결과나 데이터
- 이벤트 리스터(Event Listener) : 특정 채널의 메시지를 구독
- 이벤트 채널(Channel) : 서버, 클라이언트, 컴포넌트
- 이벤트 버스(Event Bus) : 메시지 경로
