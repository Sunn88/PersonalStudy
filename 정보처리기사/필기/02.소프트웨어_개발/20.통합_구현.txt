1) 단위 모듈 구현
- 단위 모듈
    - 소프트웨어 구현에 필요한 다양한 동작 중 한 가지 동작을 수행하는 기능을 모듈로 구현한 것을 의미함
    - 사용자 또는 다른 모듈로부터 값을 전달받아 시작되는 작은 프로그램
    - 독립적인 컴파일이 가능하며, 다른 모듈에 호출되거나 삽입될 수 있음
    - 두 개의 단위 모듈이 합쳐지면 두 개의 기능들을 같은 모듈로 구현할 수 있음
    - 종류 : 화면, DB 접근, 인터페이스, 비즈니스 트랜잭션, 데이터 암호화 등
- 단위 기능 명세서 : 큰 규모의 시스템을 분해하여 단위 기능별로 계층적으로 구조화하고, 단순하게 추상화한 문서
- ★모듈화의 원리
    - 소프트웨어 개발에 있어 기능을 나누고 추상화하여 소프트웨어의 성능을 향상시키고 유지보수를 효과적으로 구현하기 위한 기법
    - 종류
        - 분할과 지배(Divide & Conquer) : 복잡한 문제를 분해, 모듈 단위로 문제를 해결함
        - 정보 은폐(Information Hiding) : 어렵거나 변경 가능성이 있는 모듈을 타 모듈로부터 은폐시킴
        - 자료 추상화(Data Abstraction) : 함수 내에 자료 구조의 표현 명세를 은폐, 자료와 자료에 적용 가능한 오퍼레이션을 함께 정의함
            - 추상화 종류 : 기능 추상화, 자료 추상화, 제어 추상화
        - 모듈의 독립성(Module Independence) : 낮은 결합도, 높은 응집도를 갖도록 함
- 단위 모듈 테스트(Unit Test)
    - 프로그램의 단위 기능을 구현하는 모듈이 정해진 기능을 정확히 수행하는지 검증하는 것
    - 화이트박스 테스트와 블랙박스 테스트 기법이 있음
- 구현 단계의 작업 절차 : 코딩 계획->코딩->컴파일->코드 테스트
2) 통합 개발 환경
- IDE(Integrated Development Environment)
    - C++, Java 등의 언어를 이용한 소프트웨어 개발 단계에서 패키지 인크루딩, 소스 코드 편집, 컴파일, 디버깅, 바이너리 배포 등 모든 작업을 통합 지원함
    - 편집기, 컴파일러, 디버거 등의 다양한 도구를 하나의 인터페이스로 통합하여 제공함
    - 오류 체크를 시각화하여 확인 및 수정을 쉽도록 지원함
    - 컴파일에 필요한 외부 추가 기능을 연계하여 개발의 편의성을 높임
    - 종류 : 이클립스, 비주얼 스튜디오, 엑스 코드, 안드로이드 스튜디오, IDEA
- IDE 구성 요소
    - 소스 코드 편집기 : 시각적 신호를 활용한 구문(Syntax) 강조와 같은 기능을 포함하여 소프트웨어 코드를 작성하도록 돕는 텍스트 편집기
        - 언어별 자동 완성 기능과 코드 작성 중 버그 검사를 제공함
    - 컴파일러(로컬 필드 자동화) : 텍스트 편집기 내에서 생성된 고급 소스 코드를 디지털 컴퓨터의 중앙 처리 장치(CPU)가 이해할 수 있는 일련의 기계어 명령으로 변환함
    - 디버거 : 소스 코드에서 오류를 찾고 애플리케이션 성능 및 기능을 테스트하는 데 도움이 되도록 설계됨
- IDE 도구의 기능
    - 개발 환경 지원 : 프로그래밍 언어를 가지고 컴퓨터 프로그램을 작성할 수 있는 환경을 제공
    - 컴파일 : 문법에 어긋나는지 확인하고 기계어로 변환하는 기능 제공
    - 디버깅 : 프로그래밍 과정에 발생하는 오류 및 비정상적인 연산 제거
    - 외부 연계 : 외부 형상, 배포 관리 기능과 연계되어 자동 배포 등이 가능
    - DB 연동 : JDBC, ODBC 등을 통한 데이터베이스 연동
        - JDBC(Java DataBase Connectivity)
            - Java 언어 안에서 데이터베이스를 연결해주는 프로그램
            - Java에서 SQL을 실행하기 위한 Java API(Application Programming Interface)임
        - ODBC(Open DataBase Connectivity)
            - Microsoft에서 데이터베이스를 연결해주는 표준 프로그램
            - ODBC에서 정해준 순서로 사용하면 어떠한 데이터베이스 관리 시스템을 사용하더라도 연결할 수 있음
    - Deployment : 소프트웨어를 최종 사용자에게 전달하기 위한 기능
- 빌드 자동화 도구
    - 소스 코드 컴파일 후 다수의 연관된 모듈을 묶어 실행 파일로 만듦
    - 소프트웨어 개발자가 반복 작업해야 하는 코딩을 잘 짜여진 프로세스를 통해 자동으로 실행함
    - 신뢰성 있는 결과물을 생산해 낼 수 있는 장업방식 및 방법
    - 소스 코드를 컴파일, 테스트, 정적 분석 등을 실시하여 실행 가능한 애플리케이션으로 자동 생성하는 프로그램
    - 지속해서 증가하는 라이브러리의 자동 추가 및 관리(전처리)를 지원함
        - 전처리(Preprocessing) : 컴파일 전 코드 내 주석을 제거하거나 외부 라이브러리를 탑재하는 등의 컴파일 준비 과정
    - 최근에는 오픈소스인 Gradle이 등장했으며, 구글이 안드로이드의 기본 빌드 시스템으로 Gradle을 선택하며 사용자가 급증함
    - 기능 : 코드 컴파일, 컴포넌트 패키징, 파일 조작, 개발 테스트 실행, 버전 관리 도구 통합, 문서 생성, 배포 기능, 코드 품질 분석
    - 프로세스 : 컴파일->패키징->단위 테스트->정적 분석->리포팅->배포->최종 필드
    - 종류 : Gradle, Jenkins, Makefile, Ant, Maven 등
        - Ant
            - 아파치 소프트웨어 재단에서 개발한 자바의 공식적인 빌드 도구
            - XML 기반 빌드 스크립트를 사용함
            - 정해진 규칙이 없고, 절차적임(명확한 빌드 절차 정의가 필요함)
            - 생명주기를 갖지 않아 각 Target에 대한 의존관계와 작업을 정의해 주어야 함
            - 유연성이 높으나 프로젝트가 복잡해지는 경우 Build 과정의 이해가 어려워짐
            - XML, Remote Repository를 가져올 수 없고 스크립트의 재사용이 어려움
        - Maven
            - 프로젝트에 필요한 모든 종속성(Dependency)을 리스트의 형태로 Maven에 알려서 종속성을 관리함
            - 사용성이 좋지만, 맞춤화된 로직 실행이 어려움
            - XML, Repository를 가져올 수 있지만 라이브러리가 서로 종속할 경우 XML이 복잡해짐
            - 'Jar', 'Class Path'를 선언만 하면 직접 다운로드할 필요가 없이 Repository에서 계층적인 데이터를 표현하기에는 좋지만, 플로우나 조건부 상황을 표현하기 어려움
        - Gradle
            - JVM 기반의 빌드 도구이며, Ant와 Maven의 단점을 보완한 오픈소스 기반의 Build 자동화 도구
            - 프로젝트 시작 시 설정에 드는 시간을 절약할 수 있음
            - 한스도커를 중심으로 6인의 개발자가 공동 개발함
            - Maven처럼 종속성을 활용하여 Groovy 기반 스크립트를 사용함
                - Groovy : 자바를 기반으로 파이썬, 루비, 스몰토크 등의 특징을 더한 동적 객체지향 프로그래밍 언어
            - Maven 처럼 Groovy를 기반으로 제작된 DSL을 스크립트 언어로 사용하는 오픈소스 형태의 자동화 도구
                - DSL(Domain Specific Language) : 웹 페이지에 사용되는 HTML과 같이 특정한 도메인에 특화된 언어
            - 안드로이드 앱 개발 환경에서 사용됨
            - if, else, for 등의 로직 구현이 가능하고, XML을 사용하지 않아 간결하고 빠른 성능을 제공함
            - 유연성과 확장성을 제공하며 하나의 Repository 내에 멀티 프로젝트를 구성할 수 있음
        - Jenkins
            - Java 기반의 오픈소스 ㅎ형태의 빌드 자동화 도구로 쉽게 설치 가능함
            - 서버 기반의 도구로서 클라이언트의 요청을 처리하기 위해 서버에서 실행되는 서블릿 실행과 생명주기를 관리하는 서블릿 컨테이너에서 실행됨
                - 서블릿 : 작은 프로그램
            - Web UI를 지원하고, SVN, Git 등의 대부분 형상 관리 도구와 연동 가능함
- 개발 환경 인프라 구성 방식
    - 온프레미스(On-Premise) 방식 : 외부 인터넷망이 차단된 상태에서 인트라넷 망만을 활용하여 개발 환경을 구축하는 방식
    - 클라우드(Cloud) 방식 : 클라우드 공급 서비스를 제공하는 회사들(아마존, 구글, MS 등)의 서비스를 임대하여 개발 환경을 구축하는 방식
    - 하이브리드(Hybrid) 방식 : 온프레미스와 클라우드 방식을 혼용한 방식