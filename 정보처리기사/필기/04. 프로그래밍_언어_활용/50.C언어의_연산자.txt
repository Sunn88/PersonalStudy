1) C언어 연산자의 종류
- ★★★연산자의 종류 및 우선순위(높음 -> 낮음)
    - 단항 연산자 : +, -, !, ~, ++, --, &, *, sizeof
    - 산술 연산자
        - *, /, %
        - +, -
    - 시프트 연산자 : <<, >>
    - 관계 연산자
        - <, <=, >, >=
        - ==, !=
    - 비트 연산자 : &, |, ^
    - 논리 연산자 : &&, ||
    - 조건 연산자 : ?:
    - 할당 연산자 : =, +=, -=, *=, /=, %=, <<=, >>=
    - 콤마 연산자 : ,
2) C언어 연산자의 특징
- 단항 연산자
    - ! : 부정
    - ~ : 1의 보수
    - ++ : 1씩 증가
    - -- : 1씩 감소
    - & : 변수의 주소를 의미
    - * : 변수의 내용을 의미
    - sizeof : 변수, 변수형, 배열의 저장 장소의 크기를 Byte 단위로 구함
- 산술 연산자
    - 이항 연산자 +, -는 *, /, %보다 우선순위가 낮음
    - % : 정수 나눗셈 연산 후 나머지를 구함
~
3) 라이브러리
- 라이브러리의 개념과 구성
    - 필요할 때 찾아서 쓸 수 있도록 모듈화되어 제공되는 프로그램
    - 프로그래밍 언어에 따라 일반적으로 도움말, 설치 파일, 샘플 코드 등을 제공함
    - 라이브러리는 모듈과 패키지를 총칭하며, 모듈이 개별 파일이라면 패키지는 파일들을 모아 놓은 폴더라고 볼 수 있음
    - 표준 라이브러리는 프로그래밍 언어가 기본적으로 가지고 있는 라이브러리를 의미
    - 외부 라이브러리는 별도의 파일 설치를 필요로 하는 라이브러리를 의미
- 라이브러리 사용 시 장점
    - 코드를 재사용하기 쉬움
    - 코드의 내용을 숨겨 기술 유출을 방지할 수 있음
    - 이미 구현되어 있는 기능들을 가져다 쓸 수 있어 개발 시간을 단축할 수 있음
    - 컴파일 시간을 단축할 수 있음
- 헤더 파일(.h)이 필요한 이유 : 라이브러리를 사용하기 위해서는 #include 지시문을 통해 라이브러리 헤더 파일을 삽입하는 과정이 필요함
- 라이브러리 종류
    - 라이브러리는 정적 링킹 방식과 동적 링킹 방식에 따라 정적 라이브러리(SSL, Static Link Library)와 동적 라이브러리(DLL, Dynamic Link Library, Shared Library, 공유 라이브러리)로 나뉠 수 있음
    - 정적 라이브러리 : 정적 링킹 과정에서 링커가 프로그램에 필요로 하는 부분을 라이브러리에서 찾아 실행 파일에 복사하는 방식
        - 확장자 : *.lib(윈도우), *.a(리눅스)
    - 동적 라이브러리 : 동적 링킹 과정에서 링커가 라이브러리 내용을 복사하지 ㅇ낳고 해당 내용의 주소만 가지고 있다가 런타임에 실행 파일과 라이브러리가 메모리에 위치할 떄 해당 주소로 가서 필요한 내용을 가져오는 방식
        - 확장자 : *.dll(윈도우), *.so(리눅스)