1) 프로세스 스케줄링의 개요
- 프로세스 스케줄링(Process Scheduling)의 개념
    - 프로세스의 생성 및 실행에 필요한 시스템의 자원을 해당 프로세스에 할당하는 작업
    - 다중 프로그래밍 운영체제에서 자원의 성능을 향상시키고 효율적인 프로세서의 관리를 위해 작업 순서를 결정하는 것
- 프로세스 스케줄링의 목적 : 모든 작업들에 대한 공평성 유지, 단위 시간당 처리량 최대화, 응답 시간 및 반환 시간 최소화, 운영체제의 오버헤드 최소화
- 바람직한 스케줄링 정책 : CPU 이용률 최대화, 응답 시간 및 반환 시간 최소화, 대기 시간 최소화
- Scheduling Criteria
    - 시스템 관점
        - CPU 이용률(CPU Utilization) : 전체 시간 중 CPU가 쉬지 않고 일한 시간
        - 처리량(Throughput) : 단위 시간당 수행 완료한 프로세서의 수
    - 프로그램 관점
        - 소요 시간(Turnaround Time) : 프로세스가 Ready Queue에서 대기한 시간부터 작업을 완료하는 데 걸리는 시간
        - 대기 시간(Waiting Time) : 프로세스가 Ready Queue에서 대기한 시간
        - 응답 시간(Response Time) : 프로세스가 처음으로 CPU를 할당받기까지 걸린 시간
2) 프로세스 스케줄링 기법
- 비선점(Non-Preemptive) 스케줄링
    - 한 프로세스가 일단 CPU를 할당받으면 다른 프로세스가 CPU를 강제로 빼앗을 수 없고, 사용이 끝날 떄까지 기다리는 방식
    - 모든 프로세스들에 대한 요구를 공정히 처리하여 응답 시간의 예측이 용이함
    - CPU의 사용 시간이 짧은 프로세스들이 사용 시간이 긴 프로세스들로 인해 오래 기다리는 경우가 발생할 수 있음
    - FIFO(First in First Out)
        - 준비 상태 큐에 도착한 순서대로 CPU를 할당하는 기법
        - FCFS(First Come Fisrt Service)라고도 함
    - SJF(Shortest Job First)
        - 준비 상태 큐에서 기다리고 있는 프로세스들 중 실행 시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 스케줄링 기법
        - 평균 대기 시간을 최소화함, 강제로 실행을 멈출 수 없음
    - HRN(Highest Response-ratio Next)
        - 어떤 작업이 서비스받을 시간과 그 작업이 서비스를 기다린 시간으로 결정되는 우선순위에 따라 CPU를 할당하는 기법
        - 우선순위 계산식=(대기 시간+서비스를 받을 시간)/서비스를 받을 시간
    - 우선순위(Priority)
        - 준비 상태 큐에서 대기하는 프로세스에게 부여된 우선순위가 가장 높은 프로세스에게 먼저 CPU를 할당하는 기법
        - 우선순위가 낮은 프로세스는 무한 정지(Indefinite Blocking)가 발생할 수 있으며, 에이징(Aging) 기법으로 이를 해결할 수 있음
- 선점(Preemptive) 스케줄링
    - 한 프로세스가 CPU를 할당받아 실행 중이라고 우선순위가 높은 다른 프로세스가 CPU를 강제적으로 빼앗을 수 있는 방식
    - 긴급하고 높은 우선순위의 프로세스들이 빠르게 처리될 수 있음
    - 선점을 위한 시간 배당에 대한 인터럽트용 타이머 클럭(Clock)이 필요함
    - 온라인 응용에 적합한 스케줄링
    - RR(Round Robin)
        - 주어진 시간 할당량(Time Slice) 안에 작업을 마치지 않으면 준비 상태 큐의 가장 뒤로 배치됨
        - 시분할 시스템(Time-sharing System)을 위해 고안된 방식
        - 시간 할당량이 커지면 FCFS 스케줄링과 같은 효과를 얻을 수 있음
        - 시간 할당이 작아지면 프로세스 문맥 교환이 자주 일어남
    - SRT(Shortest Remaining Time)
        - 작업이 끝나기까지의 남아 있는 실행 시간 추정치가 가장 작은 작업을 먼저 실행시키는 기법
        - FIFO 기법보다 평균 대기 시간이 감소함
        - 작업 시간이 큰 경우 오랫동안 대기해야 함, 강제로 실행을 멈출 수 있음
    - 다단계 큐(Multi-Level Queue) : 프로세스들을 우선순위에 따라 상위, 중위, 하위 단계의 단계별 준비 상태 큐를 배치하는 기법
    - 다단계 피드백 큐(Multi-Level Feedback Quere) : 각 준비 상태 큐마다 부여된 시간 할당량 안에 완료하지 못한 프로세스는 다음 단꼐의 준비 상태 큐로 이동하는 기법
- MLQ(Multi Level Queue, MQ, 혼합형)
    - 선점형, 비선점형 방식
    - 우선순위가 가장 높은 큐에서는 비선점형으로 사용됨
    - 우선순위가 낮은 큐에서는 선점형으로 사용됨
    - 상위 큐가 우선순위가 가장 높은 큐로 신속한 처리를 필요로 하는 시스템 프로세스가 입력됨
    - 중위는 대화형 프로세스, 하위는 일괄 처리 프로세스가 입력됨
    - 대기 리스트 간 프로세스의 이동은 되지 않음
3) Multiple-Processor Scheduling
- Multiple-Processor Scheduling : 다수의 프로세서들이 비동기적으로 프로그램을 실행하는 시스템
- 종류
    - 비대칭 방식 : 오직 한 브로세서가 시스템 데이터에 대한 접근과 공유를 책임지고, 나머지 프로세서는 해당 CPU를 따르는 방식
    - 대칭 방식 : 각 프로세서가 각자 알아서 스케줄링하는 방식
- 병렬 컴퓨터 분류(Flynn)
    - SISD(Single Instruction stream Single Data stream) : 하나의 명령이 하나의 데이터 처리
    - SIMD(Single Instruction stream Multiple Data stream) : 하나의 명령이 다수의 데이터 처리(벡터 컴퓨터, 배열처리기에 사용됨)
    - MISD(Multiple Instruction stream Single Data stream) : 다수의 명령이 하나의 데이터 처리(현실적으로 사용하지 않음)
    - MIMD(Multiple Instruction stream Multiple Data stream) : 다수의 명령이 다수의 데이터 처리(멀티프로세서에 사용)