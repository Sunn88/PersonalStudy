1) ★★★모듈과 결합도, 응집도
- 모듈
    - 전체 프로그램에서 어떠한 기능을 수행할 수 있는 실행 코드를 의미함
    - 재사용이 가능하며 자체적으로 컴파일할 수 있음
    - 시스템 개발 시 기간과 노동력을 절감할 수 있음
    - 모듈의 독립성은 결합도와 응집도에 의해 측정됨
    - 서브루틴 = 서브 시스템 = 작업 단위
    - 변수의 선언을 효율적으로 할 수 있어 기억 장치를 유용하게 사용할 수 있음
    - 모듈마다 사용할 변수를 정의하지 않고 상속하여 사용할 수 있음
    - 기능적 독립성 : 각 모듈의 기능이 서로 다른 모듈과의 과도한 상호작용을 회피함으로서 이루어지는 것
    - 모듈화의 목적
        - 모듈 간 결합도의 최소화(Loose Coupling)
        - 모듈 내 요소들 간의 응집도 최대화(Strong Cohesion)
- 결합도(Coupling)
    - 서로 다른 두 모듈 간의 상호 의존도로서 두 모듈 간의 기능적인 연관 정도를 나타냄
    - 모듈 간의 결합도를 약하게 하면 모듈 독립성이 향상되어 시스템을 구현하고 유지보수 작업이 쉬워짐
    - 자료 결합도가 설계 품질이 가장 좋음
    - 결합도 약함->강함 순
        - 자료 결합도(Data Coupling)
            - 모듈 간의 인터페이스가 자료 요소로만 구성된 경우로 다른 모듈에 영향을 주지 않는 가장 바람직한 결합도
            - 모듈 간의 내용을 전혀 알 필요가 없음
        - 스탬프 결합도(Stamp coupling)
            - 두 모듈이 같은 자료 구조를 조회하는 경우의 결합도
            - 자료 구조의 어떠한 변화 즉 포맷이나 구조의 변화는 그것을 조회하는 모든 모듈 및 변화되는 필드를 실제로 조회하지 않는 모듈까지도 영향을 미치게 됨
            - 배열, 레코드, 구조 등이 모듈 간 인터페이스로 전달되는 경우와 관계됨
        - 제어 결합도(Control Coupling)
            - 어떤 모듈이 다른 모듈의 내부 논리 조작을 제어하기 위한 목적으로 제어 신호를 이용하여 통신하는 경우
            - 하위 모듈에서 상위 모듈로 제어 신호가 이동하여 상위 모듈에 처리 명령을 부여하는 권리 전도 현상이 발생함
        - 외부 결합도(External Coupling) : 어떤 모듈에서 외부로 선언한 변수(데이터)를 다른 모듈에서 참조할 경우와 관계됨
        - 공통 결합도(Common Coupling)
            - 여러 모듈이 공통 자료 영역을 사용하는 경우
            - 공통 데이터 영역 내용을 수정하면 이 데이터를 사용하는 모든 모듈에 영향을 줌
        - 내용 결합도(Content Coupling)
            - 가장 강한 결합도를 가지고 있으며, 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 조회하도록 설계되었을 경우와 관계됨
            - 한 모듈에서 다른 모듈의 내부로 제어 또는 이동됨
            - 한 모듈이 다른 모듈 내부 자료의 조회 또는 변경이 가능함
            - 두 모듈이 같은 문자(Literals)의 공유가 가능함
- 응집도(Cohesion)
    - 명령어, 명령어의 모임, 호출문, 특정 작업 수행 코드 등 모듈 안의 요소들이 서로 관련된 정도를 말함
    - 구조적 설계에서 기능 수행 시 모듈 간 최소한의 상호작용을 하여 하나의 기능만을 수행하는 정도를 표현함
    - 모듈이 독립적인 기능으로 구성된 정도를 의미함
    - 응집도가 높다는 것은 필요한 요소들로 구성됨을 의미함
    - 응집도가 낮다는 것은 요소 간의 관련성이 적음을 의미함
    - 응집도 약함->강함 순
        - 우연적 응집도(Coincidental Cohesion) : 모듈 내부의 각 기능 요소들이 서로 관련이 없는 요소로만 구성된 경우와 관계됨
        - 논리적 응집도(Logical Cohesion) : 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우와 관계됨
        - 시간적 응집도(Temporal Cohesion) : 특정 시간에 처리되는 여러 기능을 모아 한 개의 모듈로 작성할 경우와 관계됨
        - 절차적 응집도(procedural Cohesion) : 모듈이 다수의 관련 기능을 가질 떄 모듈 내부의 기능 요소들이 그 기능을 순차적으로 수행할 경우와 관계됨
        - 교환적 응집도(Communicational Cohesion) : 같은 입력과 출력을 사용하는 소 작업이 모인 경우와 관계됨
        - 순차적 응집도(Sequential Cohesion) : 한 모듈 내부의 한 기능 요소에 의한 출력 자료가 다음 기능 요소의 입력 자로로 제공되는 경우와 관계됨
        - 기능적 응집도(Functional Cohesion) : 모듈 내부의 모든 기능 요소들이 한 문제와 연관되어 수행되는 경우와 관계됨
- 효과적인 모듈화 설계 방법
    - 출입구를 하나씩 갖게 하여 복잡도와 중복성을 줄이고 일관성을 유지할 수 있도록 설계함
    - 유지보수가 용이하도록 설계함
    - 모듈 크기는 시스템의 전반적인 기능과 구조를 이해하기 쉬운 크기로 설계함
    - 모듈 기능은 예측이 가능해야 하며 지나치게 제한적이어서는 안 됨
    - 모듈 간의 효과적인 제어를 위해 설계에서 계층적 자료 조직이 제시되어야 함
    - 적당한 모듈의 크기를 유지하고 모듈 간의 접속 관계를 분석하여 복잡도와 중복을 줄임
- 모듈 설계의 특징
    - 모듈 독립성이 높다는 것은 단위 모듈을 변경하더라도 타 모듈에 영향이 적다는 의미, 오류 발견과 해결이 쉬워짐
    - 모듈 인터페이스 설계 시 인덱스 번호, 기능 코드 등 전반적인 논리 구조에 영향을 끼치지 않도록 함
2) 모듈과 컴포넌트
- 모듈 vs 컴포넌트
    - 모듈
        - 자신만으로 동작할 수 있는 명령의 집합
        - 실제로 가장 맨 앞에 위치하는 구현된 단위이며, 자료 구조, 알고리즘 등 이를 제공하는 인터페이스
        - 정의하지 않는 이상 바로 재활용을 할 수 없음
        - 실질적으로 구현이 된 단위를 의미함
    - 컴포넌트
        - SW 시스템에서 독립적인 업무 또는 기능을 수행하는 모듈로 교체가 가능한 부품
        - 모듈화로 생산성을 향상했으나 모듈의 소스 코드 레벨의 재활용으로 인한 한계성을 극복하기 위해 등장함
        - 인터페이스를 통해 연결됨
        - 실제적으로 동작하고 있는 엔티티로 써 활동 중인 독립적인 단위
    - ex) 1개 서버에 100개의 클라이언트가 서비스를 받고 있을 때, 모듈은 서버1 + 서비스 구현된 모듈 1개로 총 모듈은 2개, 컴포넌트는 실제 동작하고 있는 서버1 + 클라이언트 100개로 총 101개
    - ex) 자동차 엔진은 실제적으로 동작하는 컴포넌트가 되고 내부 부품인 인젝터는 연료를 주입하는 단위 기능인 모듈이 됨
- 모듈, 컴포넌트 비교
    - 주요 목적 : 소프트웨어 복잡도 해소 vs 소프트웨어 재사용성 향상
    - 재사용 단위 : 소스 코드 vs 실행 코드
    - 독립성 : 구현 언어 종속적/플랫폼에 종속적 vs 구현 언어 종속적/동일 플랫폼 기반 개별적 연계
    - 응용 : 단일 애플리케이션 vs 분산 애플리케이션
    - 중심사상 : 모듈화/추상화 vs 객체지향/CBD
    - 호출 방법 : 함수 호출 vs 구현 기술 인터페이스
    - 서비스 특징 : 여러 모듈이 하나의 애플리케이션을 형성하는 계층 구조 vs 다른 컴포넌트와 커뮤니케이션 네트워크를 이루면서 서비스
- 모듈 분할의 특징
    - 설계의 질을 측정할 수 있고 유지보수가 쉽고 재사용이 쉬움
    - 모듈 분할 시 영향을 주는 설계 형태 : 추상화(Avstraction), 모듈화(Modularity), 정보 은폐(Information Hiding), 복잡도(Complexity), 시스템 구조(System Structure)
3) 재사용과 공통 모듈
- 재사용
    - 검증된 기능을 파악하여 재구성하는 것
    - 모듈을 최적화하여 타 시스템에 적용하면 개발 비용과 기간을 낮출 수 있음
    - 생산성 및 소프트웨어의 품질이 향상됨
    - 재사용 시 해당 모듈은 외부 모듈과의 응집도는 높고, 결합도는 낮아야 함
    - 기존 소프트웨어에 재사용 소프트웨어를 추가하기 어려운 문제점이 발생할 수 있음
    - 소프트웨어 재사용의 이점
        - 개발 시간과 비용을 단축시킴
        - 프로젝트 실패의 위험을 줄여줌
        - 개발 지식을 공유할 수 있음
        - 소프트웨어의 품질이 향상됨
        - 소프트웨어 개발의 생산성을 높임
- 재사용 규모에 따른 구분
    - 함수와 객체 : 클래스, 메소드 단위로 소스 코드 등을 재사용함
    - 애플리케이션 : 공통 업무를 처리할 수 있도록 구현된 애플리케이션을 공유하여 재사용함
    - 컴포넌트 : 컴포넌트 자체 수정 없이 인터페이스를 통해 컴포넌트 단위로 재사용함
- 공통 모듈
    - 각 서브 시스템에서 공통으로 사용하는 기능(날짜 처리 등)을 묶어 하나의 공통된 모듈로 개발함
    - 모듈 재사용성을 높이고 중복 개발로 인한 낭비를 없애기 위해 설계 단계에서 공통 모듈을 분리함
    - 같은 기능을 재사용함으로 기능에 대한 정합성 유지 및 중복 개발을 방지할 수 있음
    - 유지보수 단계에서도 모듈 변경을 통해 관련된 시스템을 일괄 변경할 수 있음
    - 재사용 범위에 따른 분류 : 함수와 객체 재사용, 컴포넌트 재사용, 애플리케이션 재사용
- 공통 모듈-명세 기법
    - 정확성(Correctness) : 실제 구현 시 꼭 필요한 기능인지 확인할 수 있도록 정확히 작성함
    - 명확성(명료성, Clarity) : 해당 기능에 대한 일관된 이해와 하나로 해석될 수 있도록 작성함
    - 완전성(Completeness) : 시스템 구현 시 필요한 것, 요구되는 것을 모두 작성함
    - 일관성(Consistency) : 공통 기능 간 서로 충돌이 발생하지 않도록 작성함
    - 추적성(Traceability) : 공통 기능에 대한 요구사항 출처, 관련 시스템이 유기적 관계 구분이 가능하도록 작성함
- 공통 모듈 테스트 종류
    - 화이트박스 테스트 : 소스 코드를 보면서 테스트 케이스를 다양하게 만들어 테스트
    - 메소드 기반 테스트 : 공통 모듈의 외부에 공개된 메소드 기반 테스트
    - 화면 기반 테스트 : 화면 단위로 단위 모듈을 개발 후에 화면에 직접 데이터를 입력해 테스트
- 모듈 명세화 도구 : 흐름도(Flowchart), N-S 도표(Nassi-Schneiderman Chart), 의사 코드(Pseudo Code), 의사 결정표(Decision Table),
                    의사 결정도(Decision Diagram), PDL(Program Design Language), 상태 전이도(State Transition Diagram), 행위도(Action Diagram)
- N-S 도표
    - 구조적 프로그램의 순차, 선택, 반복의 구조를 사각형으로 도식화하여 알고리즘을 논리적 기술에 중점을 둔 도형식 표현 방법
    - 주로 박스다이어그램을 사용하여 논리적인 제어 구조로 흐름을 표현함
    - 임의의 제어 이동이 어려움
        - 임의의 제어 이동 : Go To문과 같은 무조건 분기를 표현할 도표가 없음
    - 이해하기 쉽고 코드 변환이 용이함
    - 조건이 복합되어 있는 곳의 처리를 시각적으로 명확히 식별하는 데 적합함
    - 제어 구조 : 순차(Sequence, 연속), 선택 및 다중 선택(If~Them~Else, Case), 반복(Repeat~Until, While, For)