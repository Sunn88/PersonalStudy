1) SW 설계 기법
- 구조적 프로그래밍(Structured Programming)
    - 프로그램의 이해가 쉽고 디버깅 작업이 쉬움
    - 한 개의 입구(입력)와 한 개의 출구(출력) 구조를 갖도록 함
    - GOTO(분기) 문은 사용하지 않음
    - 구조적 프로그래밍의 기본 구조 : 순차(Sequence) 구조, 선택(Selection) 구조, 반복(Iteration) 구조
- 절차적 프로그래밍(Procedural Programming)
    - 순서대로 일련의 명령어를 나열하여 프로그래밍함
    - Function(함수) 기반의 프로그래밍이며, 프로시저로써 Function 외에서 Subroutine이 문법적으로 구현되어 있음
    - 절차형 언어의 경우 규모가 커지면 커질수록 함수가 기하급수적으로 늘어남
    - 함수가 타 프로그램과 문제를 일으킬 수 있는 문제점을 가지고 있음
    - 프로그램과 별개로 데이터 취급이 되므로 완전하지 않고 현실 세계 문제를 프로그램으로 표현하는 데 제약이 있음
- 객체지향(Object Oriented) 분석
    - 현실 세계의 대상 체인 개체(Entity)를 속성(Attribute)과 메소드(Method)로 결합하여 객체(Object)로 표현(모델링)함
    - 소프트웨어 개발 대상을 기능이 아닌 개체를 대상으로 하며 개체 간의 상호 관계를 모델링하는 방식
    - 구조적 소프트웨어 위기를 해결하기 위한 생산성, 재사용성, 확장성, 사용 편의성, 유지보수성 요구로 인해 등장함
    - 현실 세계를 객체라는 모형으로 형상화하므로 사용자와 개발자의 상호 이해도가 높음
- 객체지향 프로그래밍(Object Oriented Programming)
    - 컴퓨터 소프트웨어를 구조적인 코드 단위로 보는 것이 아니라 Object 단위로 구분하고  Object 간의 모음으로 설계하는 것
    - 소프트웨어 내의 Object는 서로 Message를 주고받음
    - 처리 요구를 받은 객체가 자기 자신 안에 있는 내용을 가지고 처리하는 방식
    - 프로그램이 단순화되고 생산성, 신뢰성이 높아져 대규모 개발에 많이 사용됨
- 구조적 분석 기법 vs 객체지향 분석 기법
    - 구조적 분석 기법
        - 큰 문제를 작게 쪼개어 기능(모듈)으로 분리함
        - 기능(모듈) 중심으로 시스템을 파악하며 순차적인 처리가 중요시되는 하향식(Top-down) 방식
    - 객체지향 분석 기법
        - 작은 문제들을 해결할 수 있는 객체들을 만듦
        - 객체들을 상호작용하도록 조합해서 큰 문제를 해결하는 상향식(Bottom-Up) 방식
- ★★★객체지향 구성 요소
    - Class
        - 유사한 객체를 정의한 집합으로 속성+행위를 정의한 것으로 일반적인 Type을 의미함
        - 기본적인 사용자 정의 데이터형이며, 데이터를 추상화하는 단위
        - 구조적 기법에서의 단위 테스트(Unit Test)와 같은 개념
        - 상위 클래스(부모 클래스, Super Class), 하위 클래스(자식 클래스, Sub Class)로 나뉨
    - Object : 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 함
        - 데이터와 함수를 묶어 캡슐화하는 대상이 됨
        - Class에 속한 Instance를 Object라고 함
        - 하나의 소프트웨어 모듈로서 목적, 대상을 표현함
        - 같은 클래스에 속한 각각의 객체를 Instance라고 함
        - Attribute : Object가 가지고 있는 데이터 값
        - Method : Object의 행위인 함수
    - Message : Object 간에 서로 주고받는 통신을 의미함
    - Class=틀=Type
    - Object=실체=변수=Instance
2) 객체지향의 특징
- 객체지향의 5가지 특성
    - 캡슐화(Encapsulation)
        - 서로 관련성이 높은 데이터(속성)와 그와 관련된 기능(메소드, 함수)을 묶는 기법
        - 결합도가 낮아져 소프트웨어 개발에 있어 재사용성이 높아짐
        - 정보은닉을 통해 타 객체와 메시지 교환 시 인터페이스가 단순해짐
        - 변경 발생 시 오류의 파급 효과가 적음
    - 정보은닉(Information Hiding)
        - 객체 내부의 속성과 메소드를 숨기고 공개된 인터페이스를 통해서만 메시지를 주고받을 수 있도록 하는 것을 의미함
        - 예기치 못한 Side Effect를 줄이기 위해서 사용함
        - JAVA에서 정보은닉을 표기할 때 private는 외부에서 클래스 내부 정보에 접근하지 못하도록 하는 '접근금지' 의미를 가짐
    - 추상화(Avstraction)
        - 시스템 내의 공통 성질을 추출한 뒤 추상 클래스를 설정하는 기법
        - 현실 세계를 컴퓨터 시스템에 자연스럽게 표현할 수 있음
        - 종류 : 기능 추상화, 제어 추상화, 자료 추상화
    - 상속성(Inheritance)
        - 상위 클래스의 모든 속성, 연산을 하위 클래스가 재정의 없이 물려받아 사용하는 것
        - 상위 클래스는 추상적 성질을, 자식 클래스는 구체적 성질을 가짐
        - 하위 클래스는 상속받은 속성과 연산에 새로운 속성과 연산을 추가하여 사용할 수 있음
        - 다중 상속 : 다수 상위 클래스에서 속성과 연산을 물려받는 것
    - 다형성(Polymorphism)
        - 객체가 다양한 모양을 가지는 성질
        - 오퍼레이션이나 속성의 이름이 하나 이상의 클래스에서 정의되고 각 클래스에서 다른 형태로 구현될 수 있는 개념
        - 속성이나 변수가 서로 다른 클래스에 속하는 객체를 지칭할 수 있는 성질
        - 오버로딩(같은 이름 순서 재사용)과 오버라이딩(재정의)이 있음
        - 현재 코드를 변경하지 ㅇ낳고 새로운 클래스를 쉽게 추가할 수 있음
- 객체지향 기법에서의 관계성
    - is member of : 연관성(Association) : 참조 및 이용 관계
    - is instance of : 분류화(Classification) : 동일한 형의 특성을 갖는 관계
    - is part of : 집단화(Aggregation) : 객체 간의 구조적인 집약 관계
    - is a : 일반화(Generalization), 특수화(Specialization) : 클래스 간의 개념적인 포함 관계
- 오버로딩(Overloading) : 과적, 과부화
    - 한 클래스 내에서 같은 이름의 메소드를 사용하는 것
    - 같은 이름의 메소드를 여러 개 정의하면서 매개 변수의 유형과 개수가 달라지도록 하는 기술
- 오버라이딩(Overriding) : 가장 우선되는, 최우선으로 되는, 다른 것보다 우선인
    - 상속 관계의 두 클래스의 상위 클래스에서 정의한 메소드를 하위 클래스에서 변경(재정의)하는 것
    - Java 언어에서는 static 메소드의 오버라이딩을 허용하지 않음
    - 오버라이딩의 경우 하위 객체의 매개 변수 개수와 타입은 상위 객체와 같아야 함
- 오버로딩 vs 오버라이딩
    - 메소드 이름 : 한 클래스 내에서 같음 vs 상속 관계의 두 클래스 간 같음
    - 매개 변수 개수/매개 변수 타입 : 매개 변수 타입 도는 개수가 달라야 함 vs 반드시 같아야 함
    - 접근 제한 : 무관함 vs 범위는 같거나 커야 함
    - 사용 : 같은 이름으로 메소드 중복 정의 vs 자식 클래스에서 부모 클래스의 메소드 재정의
- ★★객체지향 설계 원칙(SOLID) : 시스템 변경이나 확장에 유연한 시스템을 설계하기 위해 지켜야 할 원칙
    - 단일 책임의 원칙(SRP, Single Responsibility Principle) : 모든 클래스는 단일 목적으로 생성되고, 하나의 책임만 가져야 함
    - 개방-폐쇄의 원칙(OCP, Open Closed Principle) : 소프트웨어 구성 요소는 확장에 대해서는 개방되어야 하나 수정에 대해서는 폐쇄적이어야 함
    - 리스코프치환 원칙(LSP, Liskov Substitution Principle) : 부모 클래스가 들어갈 자리에 자식 클래스를 대체하여도 계획대로 작동해야 함
    - 인터페이스 분리 원칙(ISP, Interface Segregation Principle)
        - 클라이언트는 자신이 사용하지 않는 메소드와 의존 관계를 맺으면 안 됨
        - 클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안 됨
    - 의존 역전 원칙(DIP, Dependency Inversion Principle) : 의존 관계를 맺으면 변하기 쉽고 변화 빈도가 높은 것보다 변하기 어렵고 변화 빈도가 낮은 것에 의존함
3) 객체지향 개발 방법론
- Booch
    - 설명 : 설계 부분만 존재하며 문서화를 강조하여 다이어그램 기반으로 개발됨
    - 특징
        - 분석과 설계가 분리되지 않음
        - 정적 모델과 동적 모델로 표현됨
- OOSE(Object Oriented SW Engineering)(Jacobson)
    - 설명
        - Use Case의 한 접근 방법
        - Use Case를 모든 모델의 근간으로 활용됨
    - 특징
        - 분석, 설계 및 구현으로 구성됨
        - 기능적 요구사항 중심
        - 시스템 변화에 유연함
- OMT(Object Modeling Technology)(Rumbaugh)
    - 설명
        - 객체지향 분석, 시스템 설계, Object 설계/구현 4단계로 구성됨
        - 객체 모델링 : 객체도를 이용하여 시스템의 정적 구조를 표현함
        - 동적 모델링 : 상태도를 이용하여 객체의 제어 흐름/상호 반응을 표현함
        - 기능 모델링 : 자료 흐름도를 이용하여 데이터값의 변화 과정을 표현함
    - 특징
        - 복잡한 대형 개발 프로젝트에 유용함
        - 기업 업무의 모델링에 있어 편리하고 사용자와 의사소통이 원활함
        - CASE와 연동이 충실함
- Coar와 Yourdon 방법
    - 설명 : 객체지향 분석 방법론에서 E-R 다이어그램을 사용하여 객체의 행위를 모델링함
    - 특징 : 객체 식별, 구조 식별, 주제 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성됨
4) 클래스 설계
- 클래스 설계
    - 분석 단계 중 아직 확정되지 않은 클래스 내부 부분 중 구현에 필요한 중요한 사항을 결정하는 작업을 의미함
    - 클래스의 서비스 인터페이스에 대한 정확한 정의, 메소드 내부의 로직 등 객체의 상태 변화와 오퍼레이션의 관계를 상세히 설계해야 함
    - 클래스가 가지는 속성값에 따라 오퍼레이션 구현이 달라짐
    - 객체의 상태 변화 모델링은 필수
- 클래스 인터페이스
    - 관점에 따라 관심이 다르므로, 클래스 인터페이스가 중요함
    - 관점이 다른 개발자들이 클래스 명세의 어떤 부분에 관심이 있는가?
    - 클래스 구현 : 실제 설계로부터 클래스를 구현하려는 개발자
    - 클래스 사용 : 구현된 클래스를 이용하여 다른 클래스를 개발하려는 개발자
    - 클래스 확장 : 구현된 클래스를 확장하여 다른 클래스로 만들고자 하는 개발자
- 협약에 의한 설계(Design by Contract) 3가지 타입
    - 선행(Precondition) 조건 : 오퍼레이션이 호출되기 전에 참이 되어야 할 조건
    - 결과(Postcondition) 조건 : 오퍼레이션이 수행된 후 만족해야 하는 조건
    - 불변(Invariant) 조건 : 클래스 내부가 실행되는 동안 항상 만족하여야 하는 조건