1) 디자인 패턴
- 디자인 패턴(Design Pattern)
    - 자주 사용하는 설계 형태를 정형화하여 유형별로 설계 템플릿을 만들어 두고 소프트웨어 개발 중 나타나는 과제를 해결하기 위한 방법 중 한 가지
    - 다양한 응용 소프트웨어 시스템들을 개발할 때 서로 간에 공통되는 설계 문제가 존재하는 데, 각 해결책 사이에도 공통점이 있으며 이러한 유사점을 패턴이라고 함
    - 개발자 간 원활한 의사소통, 소프트웨어 구조 파악 용이, 설계 변경에 대한 유연한 대처, 개발의 효율성, 유지보수성, 운용성 등 소프트웨어 품질 향상에 도움을 줌
    - 객체지향 프로그래밍 설계 시 유사한 상황에서 구조적인 문제를 해결할 수 있도록 방안을 제공해주며, Gof(Gang of Gour) 분류가 가장 많이 사용됨
- 디자인 패턴을 사용할 때의 장단점
    - 장점
        - 개발자 간의 우너활한 의사소통을 지원함
        - 소프트웨어 구조 파악이 쉬움
        - 재사용을 통한 개발 시간을 단축할 수 있음
        - 설계 변경 요청에 유연한 대처를 할 수 있음
        - 객체지향 설계 및 구현의 생산성을 높이는 데 적합함
    - 단점
        - 객체지향 설계/구현 위주로 사용됨
        - 초기 투자 비용 부담이 됨
- 디자인 패턴의 구성 요소
    - 필수 요소
        - 패턴의 이름 : 패턴을 부를 때 사용하는 이름과 패턴의 유형
        - 문제 및 배경 : 패턴이 사용되는 분야 또는 배경, 해결하는 문제를 의미
        - 해법 : 패턴을 이루는 요소들, 관계, 협동(Collaboration) 과정
        - 결과 : 패턴을 사용하면 얻게 되는 이점이나 영향
    - 추가 요소
        - 알려진 사례 : 간단한 적용 사례
        - 샘플 코드 : 패턴이 적용된 원시 코드
        - 원리, 정당성, 근거
- ★★GoF(Gangs of Four) 디자인 패턴
    - 에릭 감마(Eric Gamma), 리처드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 브리시데스(John Vlissides)가 제안함
    - 객체지향 설계 단계 중 재사용에 관한 유용한 설계를 디자인 패턴화함
    - 디자인 패턴 : 소프트웨어 설계에서 자주 발생하는 문제에 대한 일반적이고 반복적인 해결 방법
    - 구조 패턴 : 객체를 조직화하는데 유용한 패턴
    - 생성 패턴, 구조 패턴, 행위 패턴으로 분류함
- 생성 패턴
    - 객체를 생성하는 것과 관련된 패턴
    - 객체의 생성과 변경이 전체 시스템에 미치는 영향을 최소화하도록 만들어주어 유연성을 높일 수 있고 코드를 유지하기 쉬운 편임
    - 객체의 생성과 참조 과정을 추상화함으로써 시스템을 개발할 때 부담을 덜어줌
    - 팩토리 메소드(Factory Method)
        - 상위 클래스에서 객체를 생성하는 인터페이스를 정의하고, 하위 클래스에서 인스턴스를 생성하도록 하는 방식
        - Virtual-Constructor 패턴이라고도 함
    - 싱글턴(Singleton)
        - 전역 변수를 사용하지 않고 객체를 하나만 생성하도록 함
        - 생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴
    - 프로토타입(Prototype)
        - prototype을 먼저 생성하고 인스턴스를 복제하여 사용하는 구조
        - 일반적인 방법으로 객체를 생성함
        - 비용이 많이 소요되는 경우 주로 사용함
    - 빌더(Builder) : 작게 분리된 인스턴스를 조립하듯 조합하여 객체를 생성함
    - 추상 팩토리(Abstraction Factory)
        - 구체적인 클래스에 의존하지 않고 서로 연관되거나 의존적인 객체들의 조합을 만드는 인터페이스를 제공하는 패턴
        - 관련된 서브 클래스를 그룹 지어 한 번에 교체할 수 있음
    - 구조 패턴
        - 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
        - 복잡한 형태의 구조를 갖는 시스템을 개발하기 쉽게 만들어주는 패턴
        - 새로운 기능을 가진 복합 객체를 효과적으로 작성할 수 있음
        - 구성 : Adapter, Bridge, Composite, Decorator, Facade(퍼사드), Flyweight, Proxy
            - Adapter : 기존에 구현되어 있는 클래스에 기능 발생 시 기존 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할을 함
            - Bridge : 기능 클래스 계층과 구현 클래스 계층을 연결하고, 구현 부에서 추상 계층을 분리하여 각자 독립적으로 변형할 수 있도록 해주는 패턴
    - 행위 패턴
        - 반복적으로 사용되는 객체들의 상호작용을 패턴화한 것
        - 클래스나 객체들이 상호작용하는 방법과 책임을 분산하는 방법을 정의함
        - 메시지 교환과 관련된 것으로, 객체 간의 행위나 알고리즘 등과 관련된 패턴을 말함
        - 구성 : Chain of Responsibility(책임 연쇄), Iterator(반복자), Command(명령), Interpreter(해석자), Memento(기록), ObserveR(감시자), State(상태), Strategy(전략), Visitor(방문자), Template Method, Mediator(중재자)
            - Mediator : 객체 간의 통제와 지시의 역할을 하는 중재자를 두어 객체지향의 목표를 달성하게 해줌
- 디자인 패턴 vs 아키텍처 패턴
    - 아키텍처 패턴이 상위 설계에 이용됨
    - 아키텍처 패턴 : 시스템 전체 구조를 설계하기 위한 참조 모델
    - 디자인 패턴 : 서브 시스템 내 컴포넌트와 그들 간의 관계를 구성하기 위한 참조 모델
