1)대상 식별
- 시스템 아키텍처 요구사항
    - 하드웨어, 소프트웨어를 모두 포함하는 전체 시스템에 대한 논리적 기능 체계 그리고 그것을 실현하기 위한 구성 방식, 시스템 전체의 최적화를 목표로 함
    - 요구사항과 시스템의 전체 생명주기를 고려함
    - 시스템의 구성, 동작 원리를 정확하게 표현해야 하며 각 컴포넌트에 대한 설계, 구현을 지원하는 수준으로 자세히 기술함(IEEE 1474, TOGAF)
    - 각 컴포넌트 사이의 상호작용, 외부 환경과의 관계를 기술함
- 시스템 인터페이스 식별
    - 개발 대상 시스템과 연계 시스템 사이의 인터페이스를 식별하는 것
    - 시스템의 업무 정의서, 시스템 아키텍처 정의서, 유스케이스 정의서 등을 통해 송신, 수신, 중계 시스템을 식별함
    - 인터페이스 요구명세서, 인터페이스 요구사항 목록을 기반으로 개발 대상 시스템과 연계된 내/외부 시스템 사이의 인터페이스 목록을 작성함
- ★인터페이스 시스템의 구성
    - 송신 시스템 : 연계할 데이터를 테이블, 파일 형태로 생성하고 전송하는 시스템
    - 수신 시스템 : 송신된 데이터를 수신 시스템에서 관리하는 형식의 데이터를 변환하여 DB에 저장하거나 애플리케이션에 활용할 수 있도록 지원하는 시스템
    - 중계 시스템 : 송/수신 시스템 사이에서 데이터 송/수신 상태를 모니터링하는 시스템
- 인터페이스 데이터 표준
    - 시스템 사이에 상호 교환되는 데이터는 표준 형식을 정의하여 사용함
    - 인터페이스 설계 단계에서 송/수신 시스템 사이의 전송 표준 항목, 업무 처리 데이터, 공통 코드 정보 등을 누락 없이 확인하여 명세서를 작성함
    - 인터페이스는 데이터 공통부/개별부/종료부로 구성됨
        - 공통부 : 인터페이스 표준 항목을 포함함
            - 시스템 공통부 : 시스템 간 연동 시 필요한 공통 정보, 인터페이스 ID와 전송 시스템 정보 그리고 서비스 코드 정보, 응답 결과 정보, 장애 정보 등으로 구성
            - 거래 공통부 : 연동 처리 시 필요한 직원 정보, 승인자 정보, 기기 정보, 매체 정보, 테스트 정보 등으로 구성
        - 개별부 : 송/수신 시스템에서 업무 처리에 필요한 데이터를 포함함
        - 종료부 : 전송 데이터의 끝을 표시하는 문자를 포함함
2) 인터페이스 상세 설계
- 내/외부 송/수신 방식
    - 직접 연계 방식 : 중계 서버 또는 솔루션 사용 없이 송/수신 시스템이 직접 인터페이스하는 방식
    - 간접 연계 방식 : 연계 솔루션을 통해 송/수신 엔진과 어댑터를 이용하여 인터페이스하는 방식
- 간접 연계 vs 직접 연계 방식의 장단점
    - 간접
        - 장점
            - 연계 서버를 활용하여 송/수신 처리 및 현황을 모니터링하고 통제하는 방식
            - 네트워크/프로토콜 등 서로 다른 환경을 갖는 시스템을 연계 통합할 수 있음
            - 인터페이스 변경 시 대처가 수월함
        - 단점
            - 연계 절차가 복잡하고 연계 서버 사용으로 인해 성능 저하가 발생할 수 있음
            - 개발 및 테스트 기간이 많이 소요됨
    - 직접
        - 장점
            - 연계 절차가 없어 처리 속도가 빠름
            - 구현이 단순하며 개발 비용과 개발 기간에서 경제적임
        - 단점
            - 송/수신 시스템 간 높은 결합도로 인해 시스템 변경에 유연성이 떨어짐
            - 전사 시스템의 통합 환경을 구축하기 어려움
            - 보안 처리와 업무 로직 구현을 인터페이스별로 작성해야 하는 불편함이 있음
3) 연계 기술
- 인터페이스 연계 기술
    - DB Link
        - DB에서 제공하는 DB Link 객체를 이용하는 것
        - 수신 시스템의 DB에서 송신 시스템에 접근 가능한 DB Link를 생성한 뒤 송신 시스템에서 DB Link로 직접 참조하여 연계하는 것
    - DB Connection : 수신 시스템 WAS에서 송신 시스템으로 연결되는 DB Connection Pool을 생성하고 프로그램 소스에서 이를 사용하는 것
    - API/Open API : 송신 시스템의 DB에서 데이터를 읽어 제공하는 Application Programming Interface를 이용하는 것
        - API(Application Programming Interface) : 프로그래밍을 통해 프로그램을 작성하기 위한 일련의 부프로그램, 프로토콜 등을 정의하여 상호작용을 하기 위한 인터페이스 사양
    - JDBC : 수신 시스템의 프로그램에서 JDBC 드라이버를 이용하여 송신 시스템 DB와 연결하여 사용하는 것
    - Hyper Link : 웹 애플리케이션에서 Hyper Link를 사용하는 방식
    - Socket : 서버에서 통신을 위한 소켓을 생성, 포트를 할당한 뒤 클라이언트의 통신 요청 시 클라이언트와 연결하는 방식
    - Web Service : 웹 서비스에서 WSDL, UDDI, SOAP 프로토콜을 이용하는 방식
        -WSDL(Web Service Description Language) : 관련된 서식, 프로토콜 등을 웹 서비스를 통해 표준적인 방법으로 기술하고 게시하기 위한 어언어
        - UDDI(Universal Description, Discovery, and Integration) : 인터넷에서 전 세계 비즈니스 목록에 자신을 등재하기 위한 확장성 생성 언어(XML) 기반의 규격화된 레지스트리
        - SOAP(Simple Object Access Protocol) : 웹 서비스를 실제로 이용하기 위한 객체 간의 통신 규약
    - 연계 솔루션 : 실제 송/수신 처리와 진행 상황을 모니터링 및 통제하는 EAI 서버, 송/수신 시스템에 설치되는 어댑터(Client)를 이용하는 방식
- 인터페이스 송/수신 통신 유형
    - 통신 유형
        - 단방향 : 데이터를 요청한 뒤 그에 대한 피드백이 필요 없는 경우
        - 동기
            - 데이터를 요청한 뒤 그에 대한 피드백이 올 때까지 대기하는 방식
            - 거래량이 적고, 빠른 응답이 요구되는 경우
        - 비동기
            - 데이터를 요청한 뒤 그에 대한 피드백이 올 때까지 타 직업을 처리한 뒤 해당 요청을 처리하는 방식
            - 거래량이 많거나 데이터 전송 시스템의 처리가 늦는 경우 사용함
    - 처리 유형
        - 지연 처리 : 단위 처리 비용이 과다하게 발생하는 경우
        - 배치 처리 : 대량의 데이터를 한 번에 처리해야 하는 경우
        - 실시간 처리 : 요청을 즉시 처리해야 하는 경우
- 인터페이스 데이터 명세화
    - 인터페이스 요구사항 분석 과정에서 식별한 연계 정보에 해당하는 개체 정의서, 테이블 정의서, 코드 정의서 등을 분석하여 그에 요구되는 데이트 명세를 작성함
    - 개체 정의서 : 데이터베이스 개념 모델링 단계에서 도출한 개체 타입, 속성, 식별자 등 개체에 관한 정보를 명세화한 자료
    - 테이블 정의서
        - 데이터베이스 논리/물리 모델링 단계에서 작성하는 설계 산출물
        - Table의 속성명, 자료형, 길이, Key, Default 값, Index, 업무 규칙 등을 명세화한 자료
    - 코드 정의서 : Code는 전체 데이터베이스에 유일하게 정의되며 Code의 명명 규칙 확정 및 그에 따른 어던 코드를 사용할지 정함
- 송/수신 데이터 명세
    - 송/수신 시스템의 테이블 정의서, 파일 레이아웃에서 연계하고자 하는 테이블이나 파일 단위로 명세를 작성함
    - 송/수신 데이터 항목의 데이터 타입, 길이, 필수 입력 여부, 식별자 여부를 정의함
    - 코드성 데이터 항목은 공통 코드 여부인지 확인하고 코드값 범위를 정의함
    - 법률적 근거 및 사내 보안 규정을 참고하여 암호화 대상 칼럼을 선정하고, 해당 칼럼이 송/수신 데이터에 포함되었으면 암호화 적용 여부를 정의함
4) 인터페이스 오류를
- 오류 식별 및 처리 방안 명세화
    - 내/외부 인터페이스 목록에 존재하는 각 인터페이스에 대해 발생 가능한 오류를 식별하고 오류 처리 방안을 명세화하는 것을 의미함
    - 시스템 및 전송 오류 시 연계 프로그램 등에서 정의한 예외 상황과 대/내외 시스템 연계 시 발생할 수 있는 다양한 오류 상황을 식별 구분함
- 오류 발생 영역 : 송신 시스템(연계 프로그램)과 중계 시스템(연계 서비스) 사이, 중계 시스템(연계 서비스)과 수신 시스템(연계 프로그램) 사이
- 인터페이스 오류 처리 유형
    - 연계 서버 : 연계 서버와 실행 여부, 송/수신 전송 형식 변환 등 연계 서버의 기능과 관련된 장애와 오류
    - 연계 데이터 : 연계 데이터값이 유효하지 않아 발생하는 오류
    - 송신 시스템 연계 프로그램 : 송신 데이터 추출을 위한 데이터베이스 접근 권한 오류와 데이터 변환 처리 오류
    - 수신 시스템 연계 프로그램 : 수신 데이터를 응용 데이터베이스에 반영하는 중에 발생하는 오류와 데이터 변환 시 발생하는 오류
5) 인터페이스 설계서
- 인터페이스 설계서의 정의
    - 시스템 인터페이스 현황을 확인하기 위해 시스템이 가지고 있는 인터페이스 목록과 상세 데이터 명세를 정의한 것
    - 인터페이스 목록과 인터페이스 정의서 작성을 통해 구현됨
    - 내/외부의 모듈 간에 공통으로 제공되는 기능과 각 데이터의 인터페이스 확인에 활용됨
    - 송/수신 방법 및 송/수신 데이터 명세화 과정에서 작성된 산출물을 기반으로 작성함
    - 초안 작성 후 인터페이스 시스템 정의서 내용과 비교하여 보완 및 수정을 진행함
- 인터페이스 목록 작성
    - 인터페이스 목록은 연계 업무와 연계에 참여하는 송/수신 시스템의 정보나 연계 방식 그리고 통신 유형 등에 관한 정보를 포함해야 함
    - 주요 항목 : 인터페이스 ID, 인터페이스명, 시스템 및 대내외 구분, 연계 방식, 통신 유형, 처리 유형, 주기, 데이터 형식
- 인터페이스 정의서 작성
    - 데이터 송신 시스템, 데이터 수신 시스템 간의 데이터 저장소와 속성 등의 상세 내역을 포함함
    - 인터페이스별로 시스템 간 연계를 유지하는 데 필요한 데이터 항목 및 구현 요건 등을 기술하는 것
    - 주요 항목 : 인터페이스 ID, 요구 성능, 시스템 정보, 데이터 정보