1) 검색
- 검색(Search)의 정의 : 기억 공간 내 기억된 자료 중에서 주어진 조건을 만족하는 자료를 찾는 것
- 검색 방식의 종류
    - 이분 검색(Binary Search, 이진 검색)의 특징
        - 이분 검색을 실행하기 위한 전제 조건은 자료가 순차적으로 정렬되어 있어야 함
        - 탐색 효율이 좋고 탐색 시간이 적게 소요됨
        - 비교 횟수를 거듭할 떄마다 검색 대상이 되는 데이터의 수가 절반으로 줄어듦
    - 선형 검색(Linear Search)
        - 주어진 자료에서 원소를 첫 번째 레코드부터 순차적으로 비교하면서 해당키 값을 가진 레코드를 찾아내는 가장 간단한 검색 방법
        - 데이터를 특별히 조직화할 필요가 없고 다양한 상황에서도 사용될 수 있는 장점이 있음
        - n개의 입력 자료에 대해서 평균적으로 (n+1)/2 번의 비교를 해야 하므로 비효율적임
    - 피보나치 검색(Fibonacci Search) : 이진 검색과 비슷한 원리로, 비교 대상 기준을 피보나치수열로 결정함
    - 블록 검색(Block Search) : 전체 레코드를 일정한 블록으로 분리한 뒤 각 블록 내의 키값을 순서대로 비교하여 원하는 값을 찾는 기법
    - 이진 트리 검색(Binary Tree Search)
        - 레코드를 2진 트리로 구성하여 검색하는 방식
        - 데이터를 입력하는 순서대로 첫 번째 값을 근노트로 지정하고 근노드보다 작으면 왼쪽, 크면 오른쪽에 연결하여 구성
    - 제어 검색 : 이분 검색, 보간 검색 등
    - 해싱 검색 : 검색 대상의 자료를 키 변환 작업을 통해 검색함
2) 해싱
- 해싱(Hashing)의 정의
    - 해싱 함수를 이용해 레코드키에 대한 해시 테이블(Hash Table) 내의 홈주소(Home Address)를 계산해 주어진 레코드에 접근하는 방식
        - 해싱 함수(Hashing Function) : 키 값을 해시 테이블의 홈주소로 반환하는 함수
    - 직접 접근(Direct Access Method) 파일을 구성할 때 사용됨
    - 속도는 가장 빠르지만, 충돌 현상 시 오버플로 해결의 부담이 가중되며, 많은 기억 공간을 요구함
- 해싱 함수의 종류
    - 제산 방법(Division Method) : 해싱 함수 기법에서 키값을 양의 정수인 소수로 나누어 나머지를 홈주소로 취하는 방법
    - 중간 제곱 방법(Mid-Square Method)
        - 레코드 키값을 제곱하고 나서 그 중간 부분의 값을 주소로 계산하는 방법
        - 해시 테이블의 크기에 따라서 중간 부분의 적당한 자릿수를 선택할 수 있음
        - 비트 단위로 n자릿수를 중간 위치 자릿수로 가정하면 해시 테이블의 크기는 2^n
    - 중첩 방법(Folding Method) : 해싱 함수 중 주어진 키를 여러 부분으로 나누고, 각 부분의 값을 더하거나 배타적 논리합(XOR) 연산을 통해 나온 결과로 주소를 취하는 방법
    - 기수 변환 방법(Radix Conversion Method) : 해싱 함수 기법 중 어떤 진법으로 표현된 주어진 레코드 키값을 다른 진법으로 간주하고 키값을 변환하여 홈주소로 취하는 방식
    - 계소 분석 방법(Digit Analysis Method) : 주어진 모든 키값들에서 그 키를 구성하는 자릿수들의 분포를 조사해 비교적 고른 분포를 보이는 자릿수들을 필요한 만큼 택하는 방법을 취하는 해싱 함수 기법
- 오버플로 해결 방법
    - 선형 개방 주소법(Linear Open Addressing)
        - 해싱에서 충돌이 일어난 자리에서 그 다음 버킷들을 차례로 하나씩 검색해 최초로 나오는 빈 버킷에 해당 데이터를 저장하는 방법
        - 저장할 데이터가 적을 때 유리함
        - 포인터와 추가적 저장 공간이 필요 없음
        - 삽입/삭제 시 오버헤드가 적음
    - 폐쇄 주소 방법(Closed Addressing)
        - 버킷 내에 연결리스트(Linked List)를 할당해, 버킷에 데이터를 삽입하다가 해시 충돌이 발생하면 연결 리스트로 데이터들을 연결하는 방식
        - 연결 리스트만 사용하면 되므로 개방 주소법도가 계산식을 사용할 필요성이 낮음
        - 해시 테이블이 채워질수록 Lookup 성능 저하가 발생할 수 있음
    - 재해싱(Rehashing) : 충돌이 발생하면 새로운 해시 함수를 적용해 새로운 홈주소를 계산함
3) 해싱 관련 용어
- 동의어(Synonym) : 해싱에서 동일한 홈주소로 인해 충돌이 일어난 레코드들의 집합을 의미함
- 슬롯(Slot) : 한 개의 레코드를 저장할 수 있는 공간으로 n개의 슬롯이 모여 하나의 버킷을 형성함
- 충돌(Collision)
    - 레코드를 삽입할 때 2개의 상이한 레코드가 똑같은 버킷으로 해싱되는 것을 의미함
    - 버킷(Bucket)이 여러 개의 슬롯(Slot)으로 구성될 때는 충돌(Collision)이 발생해도 오버플로우(Overflow)가 발생하지 않을 수 있음
- 해싱 함수의 조건
    - 충돌이 적어야 함
    - 계산이 복잡하지 않고 쉬워야 함