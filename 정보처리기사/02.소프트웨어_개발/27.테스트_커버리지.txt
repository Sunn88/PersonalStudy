1) 테스트 커버리지
- 테스트 커버리지
    - 주어진 테스트 케이스에 의해 수행되는 소프트웨어의 테스트 범위를 측정하는 테스트 품질 측정 기준
    - 테스트의 정확성과 신뢰성을 향상시키는 역할
    - 기능 기반(Function Coverage)
        - 테스트 대상 애플리케이션의 전체 기능을 모수로 설정하고, 실제 테스트가 수행된 기능의 수를 측정하는 방법
        - 기능 기반 테스트 커버리지는 100% 달성을 목표로 하며, 일반적으로 UI가 많은 시스템의 경우 화면 수를 모수로 사용할 수도 있음
    - 라인 기반(Line Coverage)
        - 애플리케이션 전체 소스 코드의 Line 수를 모수로 테스트 시나리오가 수행한 소스 코드의 Line 수를 측정하는 방법
        - 단위 테스트에서는 이 라인 커버리지를 척도로 삼기도 함
    - 코드 기반(Code Coverage) : 소프트웨어 테스트 충분성 지표 중 하나로 소스 코드의 구문, 조건, 결정 등의 구조 코드 자체가 얼마나 테스트 되었는지를 측정하는 방법
    - 구문 기반(Statement Coverage) : 코드 구조 내의 모든 구문에 대해 한 번 이상 수행하는 테스트 커버리지
    - 조건 기반(Condition Coverage) : 결정 포인트 내의 모든 개별 조건식에 대해 수행하는 테스트 커버리지
    - 결정 기반(Decision Coverage) : 결정 포인트 내의 모든 분기문에 대해 수행하는 테스트 커버리지
    - 변경조건/결정기반(Modified Condition/Decision Coverage)
        - 조건과 결정을 복합적으로 고려한 측정 방법
        - 결정 포인트 내의 다른 개별적인 조건식 결과에 상관없이 독립적으로 전체 조건식의 결과에 영향을 주는 테스트 커버리지
    - 다중 조건 기반(Multiple Condition Coverage)
        - 결정 포인트 내에 있는 모든 개별 조건식의 모든 가능한 논리적 고합을 고려함
        - 가장 강력한, 논리적 수준의 100% 커버리지를 보장함
    - 조건/결정 기반(Condition/Decision Coverage)
        - 전체 조건식의 결과가 참 한번, 거짓 한번을 갖도록 각 개별 조건식을 조합하는 데 이때 각 개별 조건식도 참 한번, 거짓 한번을 모두 갖도록 개별 조건식을 조합함
        - 결정 커버리지와 조건 커버리지를 포함하는 커버리지
2) 테스트 자동화
- 테스트 자동화 도구
    - 애플리케이션 개발 중 반복되는 다양한 테스트 과정을 HW/SW 적으로 자동화 도구를 사용하고 일관성 및 생산성을 향상시키는 도구
    - 테스트 관리, 소스 코드 리뷰 및 인스펙션, 테스트 설계 및 개발, 테스트 수행 등 테스트에 포함되는 다양한 과정을 자동으로 지원하는 도구
- 테스트 자동화 수행 시 고려사항
    - 모든 과정이 아닌 그때그때 맞는 적절한 도구를 선택
    - 자동화 도구를 고려하여 프로젝트 일정 계획
    - 프로젝트 초기에 테스트 엔지니어 투입 시기 계획
- 테스트 자동화 도구의 유형
    - 정적 분석 도구
        - 프로그램을 실행하지 않고 소스 코드 분석을 통해 결함을 발견하는 도구
        - 코딩 표준, 코딩 스타일, 코딩 복잡도, 남은 결함 등을 발견하기 위해 사용
    - 테스트 실행 도구
        - 스크립트 언어를 사용하여 테스트를 실행하는 방법으로서 테스트 데이터와 수행 방법 등이 포함된 스크립트를 작성한 수 실행
        - 데이터 주도 접근 방식
            - 테스트 데이터를 스프레드시트 문서에 저장하고 실행하는 방식
            - 다양한 테스트 데이터를 동일한 테스트 케이스로 반복하여 실행할 수 있음
            - 새로운 데이터의 경우 미리 작성된 스크립트에 테스트를 추가하여 테스트 진행할 수 있음
        - 키워드 주도 접근 방식
            - 테스트를 수행할 동작을 나타내는 키워드와 테스트 데이터를 스프레드시트 문서에 저장하여 실행하는 방식
            - 키워드를 이용하여 테스트를 정의할 수 있음
    - 성능 테스트 도구 : 애플리케이션의 처리량, 응답 시간, 경과 시간, 자원 사용률에 대해 가상의 사용자를 생성하고 테스트를 수행함으로써 성능 목표를 달성하였는지를 확인하는 테스트 자동화 도구
    - 테스트 통제 도구 : 테스트 계획 및 관리, 수행, 결함 관리 등을 수행
    - 테스트 하네스 도구 : 소프트웨어 컴포넌트의 테스트를 가능하게 하거나 프로그램의 입력을 받아들이거나 빠진 컴포넌트의 기능을 대신하거나 실행 결과과 예상 결과를 비교하기 위해 동원된 소프트웨어 도구
- 테스트 자동화 도구의 장점
    - 반복되는 테스트 데이터를 다시 입력할 때 자동화함
    - 사용자 요구 긴으의 일관성 있는 검증에 유리함
    - 테스트 결과값에 대한 객관적인 평가 기준을 제공함
    - UI가 없는 서비스의 경우에도 정밀한 테스트가 가능함
    - 테스트 시간 단축과 인력 투입 비용을 최소화할 수 있음
- 테스트 자동화 도구의 단점
    - 도구 사용 방법에 대한 교육 및 학습이 필요함
    - 프로세스 단계별로 적용하기 위한 시간, 노력이 필요함
    - 도구 구매 비용, 유지 관리 비용이 많이 들어 추가적인 투자가 필요함
- 테스트 하네스(Test Harness) 도구 구성 요소
    - 테스트 드라이버(Test Driver)
        - 하위->상위 모듈로 통합하면서 테스트하는 상향식 테스트에서 사용함
        - 테스트 대상을 제어하고 동작시키는데 사용되는 도구를 의미함
        - 시스템 및 컴포넌트를 시험하는 환경의 일부분으로 시험을 지원하는 목적하에 생성된 코드와 데이터
    - 테스트 스텁(Test Stub)
        - 상위->하위 모듈 방향으로 통합 테스트를 진행하는 하향식 테스트에서 사용함
        - 상위 모듈에서 하위 모듈로의 테스트를 진행하는 과정 중 하위 시스템 컴포넌트의 개발이 완료되지 않은 상황에서 시스템 테스트를 진행하기 위해 임시로 생성된 가상의 더미 컴포넌트(Dummy Component)임
    - 테스트 슈트(Test Suites)
        - 일정한 순서에 의해 수행될 개별 테스트들의 집합 또는 패키지
        - 슈트는 응용 분야나 우선순위, 내용에 연관됨
    - 테스트 케이스(Test Case)
        - 요구에 맞게 개발되었는지 확인하기 위해 테스트할 입력과 예상 결과를 정의한 것
        - 테스트 자동화를 도입하면 테스트 케이스는 데이터 레코드로 저장될 수 있고 테스트 스크립트로 정의할 수 있음
    - 테스트 스크립트(Test Script) : 테스트 케이스를 수행하여 그 결과를 보고할 목적으로 명령어 또는 이벤트 중심의 스크립트 언어로 작성한 파일로 수행경로에 영향을 미칠 논리 조건들을 포함하고 있음
    - 목 오브젝트(Mock Object) : 테스트를 위해 사용자 행위를 미리 조건부로 입력해두고 그 상황에 맞는 행위를 수행하는 객체
- 테스트 수행 단계별 테스트 자동화 도구
    - 테스트 계획 단계 : 요구사항 관리 도구
    - 테스트 분석 및 설계 단계 : 테스트 케이스 생성 도구
    - 테스트 수행 단계 : 테스트 자동화/정적 분석/동적 분석/성능 테스트/모니터링 도구
    - 테스트 관리 단계 : 커버리지 분석/형상 관리/결함 추적 및 관리 도구