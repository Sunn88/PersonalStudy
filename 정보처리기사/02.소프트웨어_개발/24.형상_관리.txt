1) 형상 관리 도구
- 형상 관리(Configuration Management)
    - 개발 단계에 생성되는 모든 문서, 코드 등 소프트웨어의 변경사항을 체계적으로 관리하기 위하여 추적하고 통제하는 것
    - 작업 산출물을 형상 항목(Configuration Item)이라는 형태로 선정하고, 형상 항목 간의 변경사항 추적과 통제 정책을 수립하고 관리함
    - 요구사항 변경 또는 오류로 지속해서 변화하는 자료이며, 이러한 변화를 이력화하여 유지보수성을 향상할 수 있음
    - 소프트웨어는 눈으로 확인할 수 있는 가시성이 없으므로 개발 과정의 진행 정도를 확인하는 도구로 사용됨
    - 단순 버전 관리 기반의 소프트웨어 운용을 좀 더 포괄적인 학술 분야의 형태로 넓히는 근간을 의미함
- 형상 관리 항목(Configuration Item)
    - 개발 프로세스에서 생산되거나 사용되는 작업 산출물, 작업 산출물들의 집합체를 의미함
    - 대표적인 소프트웨어 형상 항목 : 프로젝트 요구 분석서, 운영 및 설치 지침서, 요구사항 명세서, 설계/인터페이스 명세서, 테스트 설계서, 소프트웨어 품질보증, 형상 관리, V&V 계획서와 같은 계획서, 코드 모듈(소스와 오브젝트 모두)
        - V&V(Verification & Validation, 확인 및 검증)
- 형상 관리 종류
    - 형상 관리는 버전 관리, 리비전 관리, 변경 관리, 빌드 관리, 이슈 관리 등을 모두 포함함
    - 버전 관리 : 변경사항을 '버전'이란 개념을 통해 관리
        - 다양한 형상 항목이 과거부터 현재에 이르기까지 요구사항 등의 변화에 따라 버전을 부여함으로써 이력을 관리하는 것
        - 버전을 통해 시간적인 변경사항과 해당 작업 담당자를 추적할 수 있음
    - 변경 관리 : 소스 코드 변경 사항에 대한 관리
        - 변경된 요구사항에 대하여, 비용 및 기간 등을 고려하고 타당성을 평가함
        - 요구사항이 타당한 경우 제품 또는 산출물을 변경하고, 그렇지 않을 경우 변경을 거부하는 활동
- 형상 관리 도구
    - 소프트웨어 개발 생명주기 전반에 걸쳐 생성되는 소스 코드와 문서 등과 같은 산출물의 종합 및 변경 과정을 체계적으로 관리하고 유지하는 일련의 개발 관리 활동
    - 소프트웨어에 가시성과 추적 가능성을 부여하여 제품의 품질과 안전성을 높임
    - 형상 식별, 형상 통제, 형상 상태 보고, 형상 감사를 통해 변경사항을 관리함
    - 이전 리비전이나 버전에 대한 정보에 접근 가능하여 배포본 관리에 유용함
    - 불필요한 사용자의 소스 수정을 제한할 수 있음
    - 동일한 프로젝트에 대해 여러 개발자가 동시 개발이 가능함
- 형상 관리의 필요성과 효과
    - 관리적 효과
        - 표준 확립으로 전사적 IT 자원 관리가 쉬워 기간별/팀별/업무별 산출물 현황 및 변경 이력 통계를 파악할 수 있음
        - 제품 개발 관련 산출물이 자동 생성되고 관리됨
        - 개발/유지보수 활동을 통합 관리할 수 있음
        - 변경 프로세스 체계를 확립하고, 외주 개발 통제 및 현황 파악을 도와줌
    - 품질 향상 효과
        - 산출물 버전 관리를 자동으로 생성 관리할 수 있어 결함 및 오류가 감소함
        - 변경 프로그램의 이력 관리를 통해 문제 파악 및 버그 수정이 쉬워지고, 변경 내용의 영향 분석이 쉬워짐
- 형상 관리 절차
    - 형상 식별(Configuration Identification)
        - 형상 관리의 가장 기본이 되는 활동
        - 형상 관리 계획을 근거로 형상 관리의 대상이 무엇인지 식별하는 과정
        - 변경 추적성 부여와 대상 식별을 위해 ID와 관리번호를 할당함
        - 형상 항목 대상 : 품질 관리 계획서, 품질 관리 매뉴얼, 요구사항 명세서, 설계/인터페이스 명세서, 테스트 설계서, 소스 코드
    - 형상 통제(Configuration Control)
        - 형상통제위원회 운영을 통하여 변경 통제가 이루어져야 함
        - 요구사항 변경 요구를 관리하고, 변경 제어, 형상 관리 등의 통제를 지원하고 기주선에 대한 관리 및 형상 통제 수행할 수 있음
    - 형상 보고 및 감사
        - 기준선의 무결성 평가 단계로서 개발자, 유지보수 담당자가 아닌 제3자의 객관적인 확인 및 검증 과정을 통해 새로운 형상의 무결성을 확보하는 활동
        - 형상 감사 시 고려사항
            - 명시된 변경이 정확하게 수정되었는가?
            - 기술 검토를 수행하였는가?
            - 개발 프로세스를 준수하였는가?
            - 변경 발생 시, 형상 관리 절차를 준수하였는가?
            - 변경에 대한 정보(변경일, 변경인, 변경사항)를 기록하였는가?
    - 형상 기록/보고
        - 소프트웨억 ㅐ발 상태에 대한 보고서를 제공하는 단계
        - 기준선에 대한 변경과 처리 과정에서의 변경을 상태 보고에 모두 기록함
        - 기록/보고 항목 : 승인된 형상 리스트, 계획된 변경 상태, 승인된 변경의 구현 상태
- 형상 관리, 버전 관리, 변경 관리
    - 형상 관리(Configuration Management)
        - 버전, 변경 관리 개념을 포함하고, 프로젝트 진행 상황, 빌드와 릴리즈 퍼블리싱까지 모두 관리할 수 있는 통합 시스템
        - 버전 관리(Version Management)
            - 변경 이력을 추적 관리하는 가장 좋은 방법이 버전으로 구분하는 것
            - 사소한 체크인, 체크아웃부터 릴리즈, 퍼블리싱의 과정을 버전으로 관리함
            - 변경 관리(Version Management)
                - 소스 코드의 변경 상황을 관리함
                - 문서의 변경 이력과 복원 등의 기능이 제공됨
2) 버전 관리 도구
- 버전 관리 도구
    - 관리 도구는 형상 관리를 포함하여 관리하는 도구
    - 형상 관리 지침을 활용하여 제품 소프트웨어의 신규 개발, 변경, 개선과 관련된 수정 내역을 관리하는 도구
    - 버전 관리 도구를 활용하여 제품 소프트웨어의 버전과 변경, 개선 내역을 관리함
    - 제품 소프트웨어의 버전 관리 도구를 통해 실무에서는 다양한 방법으로 버전 관리를 함
- 버전 관리 도구 구분
    - 공유 폴더 방식
        - 담당자 한 명이 공유 폴더 내 자료를 자신의 PC로 복사한 후 컴파일하여 이상 유무를 확인하고, 파일의 오류가 확인되면, 해당 파일을 등록한 개발자에게 수정 의뢰함
        - 개발자들은 매일 완료된 파일을 공유 폴더에 복사하여 관리함
        - 파일에 이상이 없다면 다음날 각 개발자가 동작 여부를 다시 확인함
        - 파일의 변경사항을 데이터베이스에 기록하여 관리함
        - 종류 : SCCS, RCS, RVCS, QVCS
    - 클라이언트/서버 방식
        - 버전 관리 자료가 중앙 시스템(서버)에 저장되어 관리되는 방식
        - 서버의 자료를 개발자별로 자신의 pc(클라이언트)로 복사하여 작업 후 변경된 내용을 서버에 반영하고, 모든 버전 관리는 서버에서 수행하는 방식
        - 하나의 파일을 서로 다른 개발자가 작업할 경우 경고 메시지를 출력함
        - 서버에 문제가 생기면, 서버가 복구되지 전까지 다른 개발자와의 협업 및 버전 관리 작업을 중단함
        - 종류 : CVS, SVN(Subversion), CMVS, Perforce, CVSNT, Clear Case
    - 분산 저장소 방식
        - 버전 관리 자료가 원격 저장소와 로컬 저장소에 함께 저장되어 관리됨
        - 로컬 저장소에서 버전 관리가 가능하므로 원격 저장소에 문제가 생겨도 로컬 저장소의 자료를 이용하여 작업할 수 있음
        - 개발자별로 원격 저장소의 자료를 각자의 로컬 저장소로 복사하여 작업 후 변경사항을 로컬 저장소에서 우선 적용하여 로컬 버전 관리가 가능해짐
        - 개발 완료한 파일을 수정한 다음에 로컬 저장소에 먼저 커밋(Commit)한 이후, 다시 원격 저장소에 반영(Push)하는 방식
        - 종류 : Git, Bazaar, Mercurial, TeamWare, Bitkeeper, Plastic SCM, GNU arch
- 주요 버전 관리 도구
    - CVS(Concurrent Versions System)
        - 동시 버전 시스템
        - 소프트웨어 프로젝트를 진행할 때, 파일로 이뤄진 모든 작업과 모든 변화를 추적하고, 여러 개발자가 협력하여 작업할 수 있게 함
        - 오픈소스 프로젝트에서 널리 사용됨
        - 최근에는 CVS가 한계를 맞아, 이를 대체하는 Subversion이 개발됨
    - RCS(Revision Control System)
        - 동시에 소스를 수정하는 것을 방지하며 다른 방향으로 진행된 개발 결과를 합치거나 변경 내용을 추적할 수 있는 소프트웨어 버전 관리 도구
        - CVS와의 차이점은 소스 파일의 수정을 한 사람만으로 제한함
        - 다수의 사용자가 동시에 파일 수정을 할 수 없도록 파일 잠금 방식으로 버전을 관리하는 도구
    - Subversion(SVN)
        - CVS보다, 속도 개선, 저장 공간, 변경 관리 단위가 작업 모음 단위로 개선됨
        - 2000년부터 콜랩넷에서 개발됨
        - CVS와 사용 방법이 유사해 CVS 사용자가 쉽게 도입해 사용할 수 있음
        - 아파치 최상위프로젝트로서 전 세꼐 개발자 커뮤니티와 함께 개발되고 있음
        - 디렉터리, 파일을 자유롭게 이동해도 버전 관리가 가능함
        - repository(저장소) : 포르젝트의 파일 및 변경 정보가 저장되는 장소
        - trunk : 메인 개발 소스, 개발 소스를 commit했을 때 개발 소스가 모이는 곳
        - branch : trunk에서 분기된 개발 소스로 실험적인 기능을 추가하거나, 출시를 위한 안정화 버전 작업을 할 떄 사용함
        - tag : 특정 시점에서 프로젝트의 스냅숏을 찍어두는 것을 의미함
    - Bitkeeper : SVN과 비슷한 중앙 통제 방식으로 대규모 프로젝트에서 빠른 속도를 내도록 개발된 버전 관리 도구
    - Git
        - 프로그램 등의 소스 코드 관리를 위한 분산 저장소 방식 시스템
        - 리누스 토르발스가 리눅스 커널 개발에 이용하려고 개발함
        - 지역 저장소와 원격 저장소 2개의 저장소가 존재함
            - 지역 저장소 : 개발자가 실제 작업하는 로컬 저장소
            - 원격 저장소 : 다수 개발자가 협업을 위해 공동 관리하는 저장소
        - 지역 저장소에서 버전 관리가 진행되어, 버전 관리가 빠름
        - 깃의 작업 폴더는 모두, 전체 기록과 각 기록을 추적할 수 있는 정보를 포함하고 있으며, 완전한 형태의 저장소임
        - 네트워크에 접근하거나 중앙 서버에 의존하지 않음
    - Clear Case
        - 복수 서버, 복수 클라이언트 구조
        - 서버 확장 요구가 있을 때 필요한 서버를 하나씩 추가할 수 있음
- 컴포넌트 저장소(Repository)
    - 인증을 받은 컴포넌트를 등록하는 저장소로 손쉽게 컴포넌트를 이용할 수 있음
    - 저장소는 컴포넌트의 최신 버전을 유지하고 있으며, 컴포넌트의 버전별 상태도 유지하고 관리함으로써 사용자가 컴포넌트 이용을 쉽게 함
- Git 주요 명령어
    - init : 새로운 로컬 git 생성
    - add : 저장소(Staging Area)에 파일 추가
    - commit : 작업 내역 지역 저장소에 저장
    - branch : 새로운 파생 저장소인 브랜치 생성
    - checkout : 선택한 브랜치로 이동
    - merge : 현재 브랜치와 지정한 브랜치를 병합
    - fetch : Git 서버에서 코드를 받아오기
    - pull : Git 서버에서 최신 코드 받아와 병합
    - remote : 원격 저장소 추가
    - clone : 원격 저장소에 있는 프로젝트 복사하여 내려받기
- SVN 주요 명령어
    - import : 아무것도 없는 서버의 저장소에 맨 처음 소스 파일을 저장
    - check-in : 체크아웃으로 가져온 파일을 수정 후 저장소(Repository)에 새로운 버전으로 갱신
    - check-out : 타 개발자가 수정 작업을 위해 저장소에 저장된 파일을 자신의 작업 공간으로 인출함
    - commit : 체크인 시 이전 갱신 사항이 있는 경우, 충돌(Conflict)이 있을 경우 알림을 표시하고 diff(코드 비교) 도구를 이용해 수정한 뒤 Commit(예치) 과정을 수행함
    - diff : 새로운 개발자가 추가된 파일의 수정 기록(Change Log)을 보면서 기존 개발자가 처음 추가한 파일과 이후 변경된 파일의 차이를 봄
    - update : 저장소에 존재하는 최신 버전 자료와 자신의 작업 공간과 동기화
    - branch : 주 저장소에서 파생된 프로젝트
    - fork : 주 저장소에서 소프트웨어 소스 코드를 통쨰로 복사하여 독립적인 새로운 소프트웨어 개발 허용하는 것으로 제시된 라이선스 기준을 지켜야 함
    - update : commit 후 새로운 개발자가 자신의 작업 공간과 저장소를 동기화함
    - info : 지정된 파일에 대한 정보를 표시함
    - merge : 다른 디렉터리에서 작업된 버전 관리 내역을 기본 개발 작업과 병합함