1) 인터페이스 보안
- 인터페이스 보안
    - 모듈 컴포넌트 간 데이터 교환 시 데이터 변조/탈취 및 인터페이스 모듈 자체의 보안 취약점이 존재할 수 있음
    - 데이터 통신 시 테이터 탈취 위험
        - 스니핑(Sniffing) : 네트워크 주변을 지나다니는 패킷을 엿보면서 계정(ID)과 비밀번호를 알아내는 보안 위협
        - 스푸핑(Spoofing) : 일반 사용자가 인터넷상에서 통신하는 정보를 크래커의 사이트를 통하도록 하여 비밀번호를 알아내는 보안 위협
    - 데이터베이스 암호화
        - 데이터베이스의 기밀성을 유지하기 위해 중요 민감 데이터는 암호화함
        - 대칭키, 해시, 비대칭키 알고리즘이 사용됨
    - 시큐어 코딩
        - OWASP(Open Web Application Security Project) Top 10을 참고하여 KISA(한국 인터넷 진흥원)에서 SW 보안 약점 가이드를 발표함
        - SW 보안 취약점, 약점 및 대응 방안이 구체적으로 서술되어 있으며 이를 바탕으로 시큐어 코딩을 하도록 함
- 네트워크 보안 적용 : IPSec, KE, SSL, S-HTTP
    - 인터페이스 송/수신 간 중간자에 의한 데이터 탈취 또는 위변조를 방지하기 위해서 네트워크 트래픽에 대한 암호화 적용이 요구됨
    - 네트워크 구간의 암호화를 위해서는 인터페이스 아키텍처에 따라 다양한 방식으로 보안 기능을 적용함
    - 네트워크 구간 보안 기능 적용 시 고려사항
        - Transport Layer Network 보안
            - 상대방 인증을 적용함 : IPSec AH 적용, IKE(Internet Key Exchange) 프로토콜을 적용
                - AH(Authentication Header) : 메시지 체크섬(Checksum)을 활용한 데이터 인증과 비연결형 무결성을 보장해 주는 프로토콜
            - 데이터 기밀성 보장이 필요함 : IPSec ESP(Encapsulation Security Payload) 적용
            - End-to-End 봉나 적용 : IPSec Transport Mode 적용
        - Application Layer Network 보안
            - 서버만 공개키 인증서를 가지고 통신(위험 분산)함 : SSL(Secure Socket Layer)의 서버 인증 상태를 운영함
            - 연결 단위 외 메시지 단위로도 인증 및 암호화가 필요함 : S-HTTP 적용하여 메시지를 암호화함(상호 인증 필요, 성능 일부 저하됨)
2) 데이터베이스 보안
- 데이터베이스 보안 적용
    - 데이터베이스의 기밀성 유지를 위해 중요하고 민감한 데이터는 암호화 기법을 활용해 암호화하도록 함
    - 데이터베이스의 접근 권한 및 SQL, 프로시저, 트리거 등 데이터베이스 동작 객체의 보안 취약점을 보완하도록 함
    - 민감하고 중요한 데이터는 암호화와 익명화 등을 통해 데이터 차제 보안 방법도 고려해야 함
    - 영역 : 비인가자 접근 관리, 악의적 코드 삽입 금지, 민감 데이터 관리, 악의적 시도 시 에러 처리
- ★데이터베이스 암호화 알고리즘
    - 대칭키 알고리즘 : APIA 128/129/256, SEED
    - 해시 알고리즘 : SHA-256/384/512, HAS-160
    - 비대칭키 알고리즘 : RSA, ECDSA, ECC
- ★데이터베이스 암호화 기법
    - API 방식
        - 개념 : 애플리케이션 레벨에서 암호 모듈(API)을 적용하는 방식
        - 암호화/보안 방식 : 별도의 API 개발/통합
        - 서버 성능 부하 : 애플리케이션 서버에서 암호화/복호화, 정책 관리, 키 관리를 하므로 부하가 발생함
        - 시스템 통합 용이성 : 애플리케이션 개발 및 통합 기간이 필요함
        - 관리 편의성 : 애플리케이션 변경 및 암호화 필드를 변경하는 유지보수가 필요함
    - Filter(Plug-in) 방식
        - 개념 : 데이터베이스 레벨의 확장성 프로시저 기능으 ㄹ이용해 DBMS에 Plugin 또는 Snap-in 모듈 형식으로 작성하는 방식
        - 암호화/보안 방식 : DB 내 설치/연동
        - 서버 성능 부하 : DB 서버에 암호화, 복호화, 정책 관리 키 관리를 하므로 부하가 발생함
        - 시스템 통합 용이성 : 애플리케이션 변경이 필요치 않아 용이성이 높음
        - 관리 편의성 : 관리자용 GUI를 이용해 DB 통합 관리가 가능하여 편의성이 높음
    - Hybrid 방식
        - 개념 : AP/Filter 방식을 결합하거나, Filter 방식에 추가로 SQL문에 대한 최적화를 대행해 주는 어플라이언스를 제공하는 방식
        - 암호화/보안 방식 : 어플라이언스/DB 내 설치
        - 서버 성능 부하 : DB와 어플라이언스에서 부하가 분산됨
        - 시스템 통합 용이성 : 애플리케이션 변경이 필요치 않아 용이성이 높음
        - 관리 편의성 : 관리자용 GUI를 이용해 DB 통합 관리가 가능하여 편의성이 높음
    - 중요도가 높거나 민감한 정보를 통신 채널을 통해 전송 시에는 반드시 암/복호화 과정을 거치도록 함
    - IPSec, SSL/TLS 등 보안 채널을 활용해 전송함
        - IPSec : 통신 세션의 각 IP 패킷을 암호화하고 인증하는 안전한 인터넷 프로토콜(IP) 통신을 위한 프로토콜
        - SSL/TLS : 공개키 기반의 국제 인터넷 표준화 기구에서 표준으로 지정한 인터넷에서 정보를 암호화해서 수신하는 프로토콜
3) 인터페이스 연계 테스트
- 연계 테스트
    - 송/수신 시스템 간 구성 요소가 정상적으로 동작하는지 테스트하는 활동
    - 진행 순서 : 연계 테스트 케이스 작성->연계 테스트 환경 구축->연계 테스트 수행->연계 테스트 수행 결과 검증
- 연계 테스트 분류
    - 소프트웨어 연계 단위 테스트 : 기능 동작 여부 및 결함 여부 확인
        - 연계 자체만을 테스트함
        - 송신 시스템에서 연계 테이터를 추출 및 생성하고 이를 연계 테이블로 생성함
        - 연계 서버 또는 중꼐 서버가 있는 경우 연계 테이블 간 송/수신을 함
    - 소프트웨어 연계 테스트 구간 : 데이터의 흐름 및 처리 절차, 기능의 정상적 동작 확인
        - 송신 시스템에서 연계 서버 또는 중계 서버를 거치고 수신 시스템까지 데이터가 전달되는가를 테스트함
    - 소프트웨어 연계 통합 테스트 : 운용 애플리케이션 기능과의 통합 구조 흐름 확인
        - 연계 테스트보다 큰 통합 기능 테스트의 일부로서 연계 통합 테스트를 수행함