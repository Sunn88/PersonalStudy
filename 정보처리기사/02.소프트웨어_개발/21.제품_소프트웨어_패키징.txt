1) 애플리케이션 패키징(배포)
- 애플리케이션 패키징의 개념
    - 개발이 완료된 소프트웨어를 고객에 인도하기 위해 패키징하고, 설치 매뉴얼, 사용 매뉴얼 등을 작성하는 일련의 배포용 설치 파일을 만드는 작업
    - 사용자를 중심으로 진행하며, 사용자의 다양한 환경에서 설치할 수 있도록 패키징
    - 사용자의 불편함을 줄이고 사용자의 편의성을 먼저 고려함
    - 주의 사항 : 전체 내용을 포함, 고객 중심, 모듈화, 버전 관리 및 릴리즈 노트 관리
- ★패키징 시 고려사항 : 사용자 시스템의 환경, 직관적 UI, 관리 서비스 형태 제공, 패키징 변경 및 개선 관리를 통한 안정적 배포
    - 패키징은 사용자 중심으로 진행
- 패키징 프로세스
    - 기능 식별
        - 입/출력 데이터를 식별하고, 전체적인 기능 정의 및 데이터 흐름 식별
        - 기능 단위 및 출력에 대해 상세 정의
    - 모듈화
        - 기능 분리가 가능하여 인터페이스가 간단해짐
        - 모듈화를 위해 모듈 간 결합도와 응집도를 분석함
        - 분류할 수 있는 기능 단위 및 서비스 단위를 모듈별로 분류함
        - 공유 가능한 기능과 재활용 기능을 분류함
    - 빌드 진행
        - 신규 개발 소스 및 컴파일 결과물을 준비
        - 정상적으로 빌드되는 기능 단위 및 서비스를 분류
        - 빌드 도구 선별해 선택하고, 해당 빌드 도구를 이용해 빌드를 수행
        - 컴파일 외의 에디터 등의 관련 도구 기능 확인
    - 사용자 환경 분석
        - 고객의 편의를 위해 최소 사용자 환경 사전을 정의
        - 다양한 사용자 환경 테스트 수행
    - 패키지 적용 시험
        - 실 사용자 환경에서의 패키징 적용 테스트
        - 사용자 관점에서 UI 및 시스템상의 편의성을 점검
    - 패키지 변경 개선 : 사용자 관점에서 패키징 적용 시 개선점을 도출해 서비스 가능한 수준의 개선 후 개선 버전을 다시 패키징함
2) 제품 소프트웨어의 패키징 도구
- 패키징 도구
    - 소프트웨어 배포를 목적으로 패키징 시에 지적 재산권을 보호하고, 관리하는 기능을 제공하는 도구
    - 소프트웨어의 안전한 유통 그리고 배포를 도와주는 솔루션
    - 패키징 도구는 불법 복제로부터 디지털 콘텐츠의 지적 재산권을 보호해주는 사용 권한 제어 기술, 패키징 기술, 라이선스 관리, 권한 통제 기술 등을 포함함
- 패키징 도구 활용 시 고려사항
    - 사용자에게 배포되는 소프트웨어임을 고려하여 반드시 내부 콘텐츠에 대한 암호화 및 보안을 고려
    - 다양한 이기종 콘텐츠 및 단말기 간 DRM 연공을 고려
    - 사용자 편의성을 위한 복잡성 및 비효율성 문제를 고려
    - 반드시 내부 콘텐츠에 대한 암호화 및 보안을 고려
    - 제품 소프트웨어에 적합한 암호화 알고리즘을 적용해 범용성에 지장이 없도록 고려
- 패키징 도구의 구성 요소
    - 암호화(Encryption)
        - 콘텐츠 및 라이선스를 암호화하고, 전자 서명을 할 수 있는 기술
        - ex) OKI, Symmetric/Asymmetric Encruption, Digital Signature
    - 키 관리(Key Management)
        - 콘텐츠를 암호화한 키에 대한 저장 및 배포 기술
        - 관리 방식 : 분산형, 중앙 집중형
    - 암호화 파일 생성(Packager)
        - 콘텐츠를 암호화된 콘텐츠로 생성하기 위한 기술
        - ex) Pre-packaging, On-the-fly Packaging
    - 식별 기술(Identification)
        - 콘텐츠에 대해 식별하고 체계화하는 기술
        - ex) DOI, URI
    - 저작권 표현(Right Expression)
        - 저작권의 라이선스 내용을 표현하는 기술
        - ex) XrML/MPGE-21 REL, ODRL
    - 정책 관리(Policy Management)
        - 라이선스 발급 및 사용에 대한 정책 표현 및 관리 기술
        - ex) XML, Contents Management System
    - 크랙 방지(Tamper Resistance)
        - 크랙에 의한 콘텐츠 사용 방지 기술
        - ex) Code Obfuscation, Kernel Debugger Detection, Module Certification, Secure DB, Secure Time Management, Encryption
    - 인증(Authentication)
        - 라이선스 발급 및 사용의 기준이 되는 사용자 인증 기술
        - ex) User/Device Authentication, SSO, Digital Certificate
3) 모니터링 도구와 협업 도구
- 애플리케이션 모니터링 도구(APM, Application Performance Management)
    - 응용 소프트웨어의 성능과 서비스 이용성을 감시하고 관리하는 데 초점을 둔 도구
    - 애플리케이션의 안정적인 시스템 운영을 위한 도구로써 부하량, 접속자 파악, 장애 진단, 통계, 분석 등을 목적으로 하는 성능 모니터링 제품
- 애플리케이션 모니터링 도구의 기능
    - 변경 관리
        - Change-Miner : 애플리케이션 변경 관리, 영향 분석, 품질 관리 등의 기능을 제공
    - 성능 관리
        - Jenifer : 애플리케이션 서버로 유입되는 트랜잭션 수량, 처리시간, 응답시간 등을 모니터링
        - Nmon : 리눅스 서버 자원에 대한 모니터링 도구로 Nmon-Analyser을 이용해 자원 사용량을 그래프로 표현
    - 정적 분석
        - PMD : 자바로 작성된 소스 코드의 잠재적ㅇ니 문제와 코딩 규칙 오류를 발견
        - Cppcheck : C/C++ 소스 코드에 대한 잠재적 문제 발견
    - 동적 분석
        - Avalanche : Valgrid 프레임워크와 stp를 기반으로 구현되었으며 심각한 소프트웨어 에러와 취약점 발견
        - Valgrid : C/C++ 기반 프로그램에 대한 메모리 및 스레드 문제 발견
- 협업 도구
    - 소프트웨어 개발 과정에서 이해관계자 간의 지속적 이견 조율을 수행하기 위한 도구
    - 분류 : 문서 공유, 소스 공유, 아이디어 공유, 디자인 공유, 일정 관리, 프로젝트 관리, 마인드맵
- 대표적인 APM 도구
    - 스카우터(SCOUTER) : 애플리케이션에 대한 모니터링 및 DB Agent를 통해 오픈소스 DB 모니터링 기능, 인터페이스 감시 기능 제공
    - 제니퍼(Jennifer) : 애플리케이션의 개발부터 테스트, 오픈, 운영, 안정화까지 전 생애주기 단계 동안 성능을 모니터링하고 분석해줌