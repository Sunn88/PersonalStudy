1) 소스 코드 최적화
- 소스 코드 최적화
    - 읽기 쉽고 변경 및 추가가 쉬운 클린 코드를 작성하는 것
    - 소스 코드 품질을 위해 기본적으로 지킬 원칙과 기준을 정의
    - 나쁜 코드(Bad Code)
        - 다른 개발자가 로직(Logic)을 이해하기 어렵게 작성된 코드
        - 변수/메소드에 대한 명칭을 알 수 없는 코드
        - 동일한 처리 로직이 중복되게 작성된 코드
        - 스파게티 코드라고도 함
        - 유형 : 오염, 문서 부족, 의미 없는 이름, 높은 결합도, 아키텍처 침식
    - 클린 코드(Clean Code)
        - 깔끔하게 잘 정리된 코드
        - 중복 코드 제거로 애플리케이션의 설계가 개선됨
        - 가독성이 높아 애플리케이션의 기능에 대해 쉽게 이해할 수 있음
        - 버그를 찾기 쉬워지며, 프로그래밍 속도가 빨라짐
        - ★클린 코드 최적화 원칙 : 가독성, 단순성, 의존성 배제, 중복성 최소화, 추상화
        - 유형 : 보기 좋은 배치, 작은 함수, 분석 가능한 제어 흐름, 오류 처리, 간결한 주석, 의미 있는 이름
    - 처리 로직의 제어가 체계화되어 있지 않고 스파게티 면처럼 서로 얽혀 있는 코드
    - 잦은 오류가 발생할 가능성이 있음
    - 소스 코드 이해 부족으로 인해 코드를 계속 덧붙이기 할 경우 코드 복잡도가 증가함
- 코드의 간결성을 유지 지침
    - 공백을 이용해 실행문 그룹과 주석을 명확히 구분하고, 복잡한 논리식과 산술식은 괄호와 들여쓰기(Indentation)를 통해 명확히 표현함
    - 빈 줄을 사용해 선언부와 구현부를 구별하고 한 줄에 되도록 적은 문장을 코딩함
- 클린 코드의 작성 원칙
    - 가독성 : 이해하기 쉬운 용어를 사용하고 들여쓰기 등을 활용해 코드를 쉽게 읽을 수 있도록 작성
    - 단순성 : 클래스/메소드/함수는 최소 단위로 분리해 한 번에 한 가지 기능만 처리함
    - 의존성 배제 : 다른 모듈에 미치는 영향을 최소화하여 코드 변경 시 다른 부분에 영향없도록 작성
    - 중복성 최소화 : 중복된 코드는 삭제하여 공통된 코드로 사용
    - 추상화 : 상위 클래스/메소드/함수에서 간략하게 애플리케이션 특성을 나타내고, 상세 내용은 하위 클래스/메소드/함수에서 구현
- ★외계인 코드(Alien Code) : 오래되거나 참고문서 또는 개발자가 없어 유지보수 작업이 어려운 프로그램
- ★소스 코드 최적화 유형
    - 클래스 분할 배치
        - 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높이도록 함
        - 모듈 크기를 작게 작성함
    - 좋은 이름 사용 : 변수나 함수 이름은 Namming Rule을 정의해 기억하기 좋고, 발음이 쉬운 것으로 사용
    - 코딩 형식 준수
        - 개념적 유사성 높은 종속 함수를 사용해 논리적으로 코드를 라인별로 구분해 가독성을 높임
        - 호출하는 함수 앞쪽에 배치, 호출되는 함수 뒤쪽에 배치하고 지역 변수는 각 함수 맨 처음에 선언
    - 느슨한 결함(Loosely Coupled) : 클래스 간 의존성을 느슨하게 하기 위해 인터페이스 클래스를 이용해 추상화된 자료 구조와 메소드를 구현
    - 적절한 주석 : 코드의 간단한 기능 안내 및 중요 코드를 표시할 때 적절히 사용함
2) 소스 코드 품질 분석
- 소스 코드 품질 분석 도구 : 소스 코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 현상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구
- 정적 분석 도구
    - 잠재적인 실행 오류와 코딩 표준 위배 사항 등 보안 약점을 검출
    - 검출된 약점을 수정/보완하여 소프트웨어 안전성을 강화하고 향후 발생하는 오류 수정 비용을 줄일 수 있음
    - 소스 코드에서 코딩의 복잡도, 모델 의존성, 불일치성 등을 분석할 수 있음
    - 기법
        - 소스 코드 검증 : 검증 가이드라인을 통한 보안 조치
        - 코드 리뷰 : 개발자가 작성하고 다른 개발자가 정해진 방법을 통해 검토하는 방법(동료 검토, 제3자 검토라고도 함)
        - 리버스 엔지니어링 : 시스템의 기술적인 원리를 구조 분석을 통해 발견하는 방법
        - 종류 : pmd, cppcheck, SonarQube, checkstype, ccm, cobertura 등
- ★정적 분석 도구 종류
    - pmd : 소스코드에 대한 미사용 변수, 최적화되지 않은 결함을 유발할 수 있는 코드 검사
        - 지원 환경 : Linux, Windows
    - cppcheck : C/C++ 코드에 대한 메모리 누수, 오버플로 분석
        - 지원 환경 : Windows
    - SonarQube : 중복 코드, 복잡도, 코딩 설계 등을 분석
        - 지원 환경 : Cross-Platform
    - checkstyle
        - 자바 코드 표준 검사
        - 다양한 개발 도구에 통합 사용 가능
        - 지원 환경 : Cross-Platform
    - ccm : 다양한 언어의 복잡도 분석
        - 지원 환경 : Cross-Platform
    - cobertura : 자바 언어의 소스 코드 복잡도 분석 및 테스트 커버리지 측정
        - 지원 환경 : Cross-Platform
- 동적 분석 도구
    - SE 소스 코드보다는 실행 과정에서의 다양한 입/출력 데이터의 변화 및 사용자 상호작용에 따른 변화를 점검하는 분석 기법
    - 기법
        - 디버깅 : 논리적인 오류(버그)를 찾아내는 테스트 과정
        - 스트레스 테스트 : 결과 관찰을 위해 한계점에 이르는 테스트를 수반
        - 모의 해킹 : 내부 또는 외부에서 실제 해커가 사용하는 해킹 도구와 기법 등을 이용해 정보 시스템으로의 침투 가능성을 진단하는 선의의 해킹 기법
        - 리버스 엔지니어링 : 동적 역공학 분석 툴을 이용해 구조 분석
    - 종류 : Avalanche, Valgring, vallMeter 등
- ★동적 분석 도구 종류
    - Avalanche
        - Valgrind 프레임워크 및 STP 기반 구현
        - 프로그램의 결함 및 취약점 분석
        - 지원 환경 :Linux, Android
    - Valgring : 프로그램의 메모리 및 스레드 결함 분석
        - 지원 환경 : Cross-Platform
- 정적 분석과 동적 분석 기술의 비교
    - 정적 분석
        - 대상 : 소스 코드
        - 평가 기술 : 오염 분석, 패턴 비교
        - 단계 : 애플리케이션 개발 단계
    - 동적 분석
        - 대상 : 실제 애플리케이션
        - 평가 기술 : 애플리케이션 실제 실행
        - 단계 : 애플리케이션 개발 완료 단계
