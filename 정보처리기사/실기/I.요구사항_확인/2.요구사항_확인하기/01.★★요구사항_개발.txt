출제빈도 상

1) 요구사항
- 요구사항의 정의(IEEE-Std-610)
    - 문제의 해결 또는 목적 달성을 위해 고객에 의해 요구되는 기능
    - 계약, 표준, 명세 등을 만족하기 위해 시스템이 처리하거나 충족해야 하는 서비스 또는 제약사항
    - 고객이 요구한 사항과 요구하지 않았더라도 당연히 제공되어야 한다고 가정되는 사항들
- 요구공학(Requirements Engineering)의 개념
    - 소프트웨어 개발 시 사용자 요구를 정확히 반영한 시스템 개발을 위해 사용자의 요구를 추출, 분석, 명세, 검증, 관리하는 구조화된 활동 집합
    - 요구사항을 정의하고, 문서로 만들고, 관리하는 프로세스
    - 효과적인 의사소통을 통해 공통 이해를 설정함
    - 불필요한 비용 절감, 요구사항 변경 추적 가능해짐
- 목적
    - 소프트웨어 개발 시 이해관계자 사이의 원활한 의사소통 수단 제공
    - 요구사항 누락 방지, 상호 이해 오류 등의 제거로 경제성 제공
    - 요구사항 변경 이력 관리
    - 요구사항 관리해 개발 비용 및 시간 절약
- 요구공학(개발) 프로세스
    - 요구사항을 명확히 분석해 검증하는 진행 순서
    - 개발 대상에 대한 요구사항을 체계적으로 도출
    - 도출된 요구사항을 분석해 분석 결과를 명세서에 정리
    - 정리된 명세서를 마지막으로 확인, 검증하는 일련의 단계
    - 경제성, 기술성, 적법성, 대안성 등 타당성 조사(feasibility study)가 선행되어야 함
- SWEBOK에 따른 요구사항 개발 프로세스
    - SWEBOK : Software Engineering Body of Knowledge, 소프트웨어 공학 지식 체계
        - 국제 표준화 기구의 정보기술 분야인 ISO/IEC에서 의견을 모아 집필 발간하는 표준화 체계 문서
    - 도출(Elicitation) -> 분석(Analysus) -> 명세(Specification) -> 확인(Validation)

2) 요구사항 도출(Requirement Elicitation, 요구사항 추출)
- 요구사항 도출의 정의
    - 소프트웨어가 해결해야 할 문제를 이해하는 첫 번째 단계
    - 소프트웨어 개발 생명 주기(SDLC) 동안 반복됨
    - 현재의 상태를 파악하고 문제를 정의한 후 문제 해결과 목표를 명확히 도출하는 단계
    - 요구사항의 위치와 수집 방법과 관련됨
    - 이해관계자(Stakeholder)가 식별되고 개발팀과 고객 사이의 관계가 만들어지는 단계이므로 다양한 이해관계자와 효율적인 의사소통이 중요함
    - 요구사항 도출 기법 : 롤 플레잉(역할극), 고객의 발표, 문서 조사, 설문, 업무 절차 및 양식 조사, 브레인스토밍, 워크숍, 인터뷰, 프로토타이핑,
                            Use Case, 벤치마킹, BPR(업무재설계), REP(제안요청서)
- 요구사항 도출 기법
    - 문서 기법
        - 현재 시스템을 이해하기 위해 보고서, 메모, 정책 메뉴얼, 교육 메뉴얼, 조직도, 양식 등의 문서를 분석하는 방법
        - 사용한 적이 없는 문서는 제외하고 변경, 개선할 필요성을 찾아내야 함
    - 관찰
        - 직접 작업 과정을 지켜보면서 현재 시스템에 관한 정보를 도출함
        - 잠재적인 사용자들이 수행하는 복잡한 일을 관찰해 사용자가 하는 일을 자세히 설명해 달라고 요구함
        - 비디오 촬영 등을 사용
        - 인터뷰 정보를 보완할 목적으로 사용
        - 시간이 많이 소요된다는 단점
    - 설문 : 광범위한 사용자로부터 의견이 필요할 때 지면, 이메일, 웹을 통해 진행
    - 인터뷰
        - 사용자와의 심층 대화로부터 요구를 끌어내는 방법
        - 질문의 준비가 중요하기 때문에 미리 잘 계획하여야 많은 정보를 얻을 수 있음
        - 가능하면 많은 당사자와 인터뷰를 진행하고 관련자 이외의 다른 사람도 인터뷰 하는것이 좋음(경쟁 제품의 사용자, 마케팅 담당자 등)
        - 절차 : 대상자 선정 -> 일정 계획 -> 인터뷰 질문 작성 -> 인터뷰 -> 분석 및 정리
        - 질문 작성 시 다른 곳에서 찾을 수 있는 질문은 피해야 하며 대상자가 알 수 있다고 예상되는 질문으로 구성함
    - JAD 회의
        - Joint Application Development, 결합 응용 설계
        - 집중 브레인스토밍 회의를 의미함
        - 프로젝트팀, 사용자, 관리자의 협의 회의 등이 있음
    - 프로토타이핑(Prototyping)
        - 도출된 요구사항을 토대로 프로토타입을 제작해 대상 시스템과 비교하면서 개발 중에 도출되는 추가 요구사항을 지속해서 재작성하는 과정
        - 새로운 요구사항을 도출하기 위한 수단
        - 요구사항에 대해 소프트웨어 엔지니어 관점에서 해석한 것을 확인하기 위한 수단으로 많이 사용됨
        - 실제 구현 전에 잘못된 요구사항을 만족시키기 위해 자원을 방비하는 것을 방지할 수 있음
        - 장점
            - 분석가의 가정을 파악하고 잘못되었을 때 유용한 피드백을 제공함
            - 문서나 그래픽 모델보다 프로토타입으로 이해하기 쉬워 사용자와 개발자 사이의 의사소통에 도움이 됨
            - 요구사항의 가변성이 프로토타이핑 이후에 급격히 감소함
            - 빠르게 제작할 수 있으며, 반복 제작을 통해 발전된 결과를 가져올 수 있음
        - 단점
            - 사용자의 관심이 핵심 기능에서 멀어질 수 있으며 프로토타입의 디자인이나 품질 문제로 집중될 수 있음
            - 프로토타입 수행 비용이 발생함
            - 전체 범위 중 일부 대상 범위만 프로토타입을 제작하면 사용성이 과대 평가될 수 있음
    - 시나리오
        - 시스템과 사용자 간에 상호작용을 시나리오로 작성해 시스템 요구사항을 추출하는 기법
        - 포함해야 할 필수 정보
            - 시나리오에 들어가기 이전의 시스템 상태에 관한 기술
            - 정상적인 사건의 흐름
            - 정상적인 사건의 흐름에 대한 예외 흐름
            - 동시에 수행되어야 할 다른 행위의 정보
            - 시나리오의 완료 후에 시스템 상태의 기술

3) 요구사항 분석(Requirement Analysis)
- 요구사항 분석
    - 시스템 요구사항을 정제해 소프트웨어 요구사항을 도출함
    - 요구사항 기술 시 요구사항 확인, 요구사항 구현의 검증, 비용 추정 등의 작업이 가능하도록 충분하고 정확하게 기술함
    - 요구사항 간 상충하는 것을 해결하고, 소프트웨어의 범위를 파악함
    - 소프트웨어가 환경과 어떻게 상호작용하는지 이해하고, 명확하지 못하거나 모호한 부분을 걸러내기 위한 과정
    - 도출된 사항을 분석한 후 소프트웨어 개발 범위를 파악해 개발 비용, 일정에 대한 제약을 설정하고 타당정 조사를 수행함
    - 요구사항 정의를 문서화함
    - 요구분석을 위해 사용자 의견 청취, 사용자 인터뷰, 현재 사용 중인 각종 문서 분석과 중재, 관찰 및 모델 작성 기술, 설문 조사를 통한 의견 수렴 등의 방법을 사용
- 요구사항 분석 기법의 종류
    - 요구사항 분류
        - 기술 내용에 따른 분류 : 기능적 요구사항, 비기능적 요구사항
            - 기능적 요구사항(Functional Requirements)
                - 제품 구현을 위해 소프트웨어가 가져야 할 기능적 속성
            - 비기능적 요구사항(Non-Functional Requirements)
                - 제품 품질 기준 등의 만족을 위해 소프트웨어가 가져야 할 특성
                - 고객의 새로운 요구사항을 추가하기 위해 시스템을 확장할 수 있도록 설계
        - 기술 관점 및 대상에 따른 분류 : 시스템 요구사항, 사용자 요구사항
            - 요구사항이 제품에 관한 것인지 프로세스에 관한 것인지 우선순위가 더 높은 것인지 아닌지를 판단해 분류함
            - 요구사항의 범위(요구사항이 소프트웨어에 미치는 영향의 범위)와 요구사항이 소프트웨어 생명주기 동안에 변경이 발생하는지를 분석해 분류함
            - 요구사항이 하나 이상의 고수준 요구사항으로부터 유도된 것인지 또는 이해관계자나 다른 원천(Source)으로부터 직접 발생한 것인지 분류함
    - 요구사항 분류 기준
        - 기능적 요구사항과 비기능적 요구사항을 구분
        - 요구사항이 하나 이상의 고수준 요구사항으로부터 유도된 것인지 확인
        - 이해관계자나 다른 원천으로부터 직접 발생한 것인지 확인
        - 요구사항이 제품에 관한 것인지 프로세스에 관한 것인지 확인
        - 우선순위가 더 높은 것을 확인
        - 요구사항의 범위(요구사항이 소프트웨어에 미치는 영향의 범위)를 확인
        - 요구사항이 소프트웨어 생명주기 동안에 변경될 수 있는지를 확인
- 개념 모델의 역할
    - 현실 세계 객체에 대한 모델링은 요구사항 분석에 있어 중요한 부분
    - 이렇게 분석된 모델은 문제가 발생하면 이해를 증진하고 해결책을 제시할 수 있음
    - 개념 모델은 현실 세계의 대상 도메인의 엔티티(entity)들과 그들의 관계 및 종속성을 반영함
    - 개념 모델의 종류
        - 유스 케이스 다이어그램(Use Case Diagram)
        - 데이터 흐름 모델(Data Flow Model)
        - 상태 모델(State Model)
        - 목표 기반 모델(Goal-Based Model)
        - 사용자 상호작용(User Interactions)
        - 객체 모델(Object Model), 데이터 모델(Data Model)
    - UML(Unified modeling Language)을 가장 많이 사용함
        - UML 다이어그램
            - 시나리오를 표현할 때 사례 다이어그램을 주로 사용함
            - 구조 다이어그램(Structure Diagram) : 시스템의 정적 구조(Static Structure)와 다양한 추상화 및 구현 수준에서 시스템의 구성요소, 구성요소 간의 관계를 보여줌
            - 행위 다이어그램(Behavior Diagram) : 시스템 내의 객체들의 동적인 행위(Dynamic Behavior)를 보여 주며, 시간의 변화에 따른 시스템의 연속된 변경을 설명해줌
- 요구사항 할당(Requirement Allocation)
    - 요구사항을 만족시키기 위한 구성요소를 식별하는 활동
    - 식별된 타 구성요소와 상호작용 여부를 분석해 추가 요구사항을 발견할 수 있음
- 요구사항 협상(Requirement Negotiation)
    - 요구사항이 서로 충돌할 경우 이를 해결하는 과정 -> 적절한 기준점을 찾아 합의
    - 우선순위를 부여해 해결함
- 정형 분석(Formal Analysis) : 구문과 의미같은 정형화된 언어를 이용해 요구사항을 수학적 기호로 표현하고 분석하는 과정
- 요구사항 분석 수행 단계
    - 문제 인식 : 인터뷰, 설문 조사 등 도구를 활용해 요구사항을 파악하는 과정
    - 전개 : 파악한 문제를 자세히 조사하는 작업
    - 평가와 종합 : 요구들을 다이어그램이나 자동화 도구를 이용해 종합하는 과정
    - 검토 : 요구분석 작업의 내용을 검토, 재정리하는 과정
    - 문서화 : 요구사항 분석 내용을 문서로 만드는 과정

4) 요구사항 명세(Requirement Spsecification)
- 시스템 정의서(System Definition Document), 시스템 요구사항 명세서(System Requirement Specification), 소프트웨어 요구사항 명세서(Software Requirement Specification)를 작성
- 체계적으로 검토, 평가, 승인될 수 있도록 문서를 만드는 것
- 요구사항 명세서 작성 방법
    - 시스템이 수행할 모든 기능과 시스템에 영향을 미치는 제약 조건을 명확하게 기술함
    - 명세 내용은 고객과 개발자 사이에서 모두가 이해하기 쉽고 간결하게 작성
        - 기술된 모든 요구사항은 검증할 수 있으므로 원하는 시스템의 품질, 상대적 중요도, 품질의 측정, 검증 방법 및 기준 등을 명시
    - 요구사항 명세서는 시스템의 외부 행위를 기술하는 것
        - 특정한 구조나 알고리즘을 사용해 설계하지 않도록 함
        - 참여자들이 시스템의 기능을 이해하거나, 변경에 대한 영향 분석 등을 위해 계층적으로 구성함
    - 요구사항을 쉽고 참조할 수 있도록 고유의 식별자를 가지고 번호화
        - 모든 요구사항이 동등한 것이 아니므로 요구사항을 우선순위화함
- 요구사항 명세서 작성 시 주의사항
    - 설계 과정의 오류 사항을 추적할 수 있어야 함
    - 기능적 요구사항은 빠지는 부분이 없이 명확하게 기술함
    - 비기능적 요구사항은 필요한 것만 명확하게 기술함
    - 개발자가 효과적으로 설계할 수 있고 사용자가 쉽게 이해할 수 있도록 함

5) 요구사항 확인(Requirement Validation, 요구사항 검증)
- 요구사항 분석 단계를 거쳐 문서로 만들어진 내용을 검토(Review)하고 검증(Verification)하는 단계
- 요구분석가가 요구사항을 이해했는지 확인(Validation)이 필요함
- 회사의 표준에 적합하고, 이해할 수 있고, 일관성이 있고, 완전한지 검증
- 일반적으로 요구사항 관리 도구를 이용해 이해관계자들이 문서를 검토해야 하고, 요구사항 정의 문서들에 대해 형상관리를 함
- 자원이 요구사항에 할당되기 전에 문제를 파악하기 위해 검증을 수행함
- 이해관계자들이 문서를 검토해야 하고, 요구사항 관리 도구를 이용해 요구사항 정의 문서들에 대해 형상관리를 함
    - 형상관리(Configuration Management)
        - 형상 단위 : 애플리케이션 개발 단계에서 도출되는 프로그램, 문서, 데이터 등의 모든 자료
        - 이러한 자료의 변경을 관리함으로써 애플리케이션 버전 관리 등을 하는 활동
- 요구사항 검증의 의미와 검증 내용
    - 사용자 요구가 요구사항 명세서에 올바르게 기술되었는가에 대해 검토하는 활동
    - 검증 내용
        - 요구사항이 사용자나 고객의 목적을 완전하게 기술하는가?
        - 요구사항 명세가 문서 표준을 따르고, 설계 단계의 기초로 적합한가?
        - 요구사항 명세의 내부적 일치성과 완전성이 있는가?
        - 기술된 요구사항이 참여자의 기대에 일치하는가?
- 요구사항 타당성 검증 사항
    - 무결성(correctness) 및 완전성(completeness) : 사용자의 요구를 에러 없이 완전하게 반영하고 있는가?
    - 일관성(consistency) : 요구사항이 서로 간에 모순되지 않는가?
    - 명확성(unambiguous) : 요구분석의 내용이 모호함 없이 모든 참여자에 의해 명확하게 이해될 수 있는가?
    - 기능성(functional) : 요구사항 명세서가 '어떻게'보다 '무엇을'에 관점을 두고 기술되었는가?
    - 검증 가능성(verifiable) : 요구사항 명세서에 기술된 내용이 사용자의 요구를 만족하는가? 개발된 시스템이 요구사항 분석 내용과 일치하는지를 검증할 수 있는가?
    - 추적 가능성(traceable) : 시스템 요구사항과 시스템 설계문서를 추적할 수 있는가?
    