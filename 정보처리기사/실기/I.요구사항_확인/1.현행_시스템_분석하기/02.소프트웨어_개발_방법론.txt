출제빈도 하

1) 생명주기
- 소프트웨어 생명주기(Software Life Cycle)
    - 소프트웨어 제품의 개념 형성에서 시작해 운용/유지보수에 이르기까지의 변화의 모든 과정
    - 일반적인 소프트웨어 생명주기 : 타당성 검토 -> 개발 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 운용 -> 유지보수
- 소프트웨어 생명주기의 역할
    - 프로젝트의 비용 산정과 개발 계획을 수립할 수 있는 기본 골격
    - 용어의 표준화를 가능하게 함
    - 문서화가 충실한 프로젝트 관리를 가능하게 함
    - 소프트웨어 생명주기의 단계(공정) : 타당성 검토 -> 개발 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트

2) 생명주기 모형의 종류
- 폭포수 모형(Waterfall Model)
    - Bohem이 제시한 고전적 생명주기 모형
    - 소프트웨어 개발 과정의 각 단계가 순차적으로 진행되는 모형
    - 선형 순차적 모델이라고도 함
    - 개발 단계
        - 타당성 검사 : 시스템을 개발하는 것이 타당한지를 검사하는 단계
        - 계획 : 추진 방안을 제시하고 개발 비용, 소요 기간, 인력 등 개발 계획을 수립하는 단계
        - 요구분석 : 시스템의 기능, 성능, 환경 등의 요구사항을 면밀히 분석하는 단계
        - 기본 설계 : 하드웨어, 소프트웨어, 제어 구조, 자료 구조 등의 설계를 작성하는 단계
        - 상세 설계 : 각 단위 프로그램의 제어, 자료 구조와 인터페이스를 상세히 작성하는 단계
        - 구현 : 설계된 문서를 통해 실제 컴퓨터가 작동할 수 있는 코드로 변환하는 단계
        - 시험(검사) : 구현한 프로그램을 테스트하여 요구조건에 맞는지 확인하는 단계
        - 운용 : 실제 시스템에 적용해 실행되는지 확인하는 단계
        - 유지보수 : 개발 후 발생하는 문제점이나 수정 사항을 적용하는 단계 -> 가장 많은 비용이 소모됨
    - 장점
        - 적용 경험과 성공 사례가 많음
        - 단계별 정의가 분명하고, 전체 구조의 이해가 용이함
        - 단계별 산출물이 명확함
    - 단점
        - 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움
        - 두 개 이상의 과정이 병행 수행되거나 이전 단계로 넘어가는 경우가 없음
        - 이전 단계의 오류 수정이 어려움
- 프로토타입 모형(Prototype Model)
    - 실제 개발될 시스템의 견본(Prototype)을 미리 만들어 최종 결과물을 예측하는 모형
    - 개발 완성 후 문제점을 알 수 있는 폭포수 모형의 단점 보완
    - 개발 단계 : 요구 수집 -> 빠른 설계 -> 프로토타입 구축 -> 고객 평가 -> 프로토타입 조정 -> 구현
    - 장점
        - 프로토타입은 발주자나 개발자 모두에게 공동의 참조 모델을 제공함
        - 프로토타입은 구현 단계의 골격이 될 수 있음
        - 최종 결과물이 만들어지기 전 의뢰자가 결과물의 일부 또는 모형을 볼 수 있음
        - 요구사항이 충실히 반영됨
    - 단점
        - 실제 소프트웨어와의 차이로 인해 사용자의 혼란 야기 가능
        - 프로토타입 폐기로 인한 비경제적
- 나선형 모형(Spiral Model)
    - Bohem이 제시한 반복적인 작업을 수행하는 점증적 생명주기 모형
    - 점증적 모형, 집중적 모형이라고도 함
    - 목적 : 소프트웨어 개발 중 발생할 수 있는 위험을 관리하고 최소화하는 것
    - 나선을 따라 돌아가면서 각 개발 순서를 반복하여 수행하는 점진적 방식 -> 누락된 요구사항 추가 가능
    - 유지보수 과정 필요 X
    - 개발 단계
        - 목표 설정, 계획 수립(Planning) : 기능, 제약 등의 세부적 계획 단계
        - 위험 분석(Risk Analysis) : 위험 요소 분석 및 해결 방안 설정 단계
        - 개발과 검증, 공학적 개발(Engineering) : 기능 개발 및 검증 단계
        - 고객 평가/다음 단계 수립(Customer Evaluation) : 결과물 평가 및 추후 단계 진행 여부 결정
    - 장점
        - 위험 분석 단계에서 기술과 관리의 위험 요소들을 하나씩 제거해 나감으로써 완성도 높은 소프트웨어 개발 가능
        - 비용이나 시간이 많이 소요되는 대규모 프로젝트나 큰 시스템 구축 시 유리함
    - 단점
        - 위험 분석 단계에서 발견하지 못한 위험 요소로 인해 문제 발생
        - 적용 경험이나 성공 사례가 많이 않음
- 애자일(Agile) 방법론
    - 개념
        - '날렵한', '재빠른'이라는 사전적 의미 -> 소프트웨어 개발 중 설계 변경에 신속히 대응해 요구사항을 수용할 수 있음
        - 절차와 도구보다 개인과 소통을 중요시하고 고객과의 피드백을 중요시함
        - 소프트웨어가 잘 실행되는 것에 가치를 둠
        - 소프트웨어 배포 시차를 최소화할 수 있음
        - 특정 방법론이 아닌 소프트웨어를 빠르고 낭비 없이 제작하기 위해 고객과의 협업에 초점을 둠
        - 특징 : 짧은 릴리즈와 반복, 점증적 설계, 사용자 참여, 문서 최소화, 비공식적인 커퓨니케이션, 변화
        - 종류 : 익스트림프로그래밍(eXtremeProgramming), 스크럼(SCRUM), 린(Lean), DSDM, FDD, Crystal
    - Agile 선언문
        - 프로세스나 도구보다 개인과의 소통이 더 중요함
        - 완벽한 문서보다 실행되는 소프트웨어가 더 중요함
        - 계약 협상보다 고객과의 협업이 더 중요함
        - 계획을 따르는 것보다 변경에 대한 응답이 더 중요함
- XP(eXtremeProgramming)
    - XP의 정의
        - 1999년 Kent Beck이 제안 -> 개발 단계 중 요구사항의 변동이 심한 경우 적합한 방법론
        - 목표 : 요구에 맞는 양질의 소프트웨어를 신속하게 제공하는 것
        - 요구사항이 변경되는 것을 적용하는 방식 -> 예측성보다는 적응성에 더 높은 가치 부여
        - 고객 참여와 개발 과정의 반복 극대화 -> 생산성 향상
    - 5가지 핵심 가치
        - 소통(Communication) : 개발자, 관리자, 고객 간 원활한 소통 지향
        - 단순성(Simplicity) : 부가적 기능 또는 미사용 구조와 알고리즘 배제
        - 피드백(Feedback) : 소프트웨어 개발에서 변화는 불가피 -> 지속적인 테스트와 통합, 반복적 결함 수정 등을 빠르게 피드백
        - 용기(Courage) : 고객 요구사항 변화에 능동적 대응
        - 존중(Respect) : 개발 팀원 간의 상호 존중을 기본으로 함
    - XP 프로세스
        - User Story
            - 일종의 요구사항 -> 사용자의 요구사항을 간단한 시나리오로 표현
            - UML의 유스 케이스와 같은 목적으로 생성되나 형식이 없고 고객에 의해 작성된다는 차이
            - Spike : 어려운 요구사항, 잠재적 솔루션을 고려하기 위해 작성하는 간단한 프로그램
        - Release Planning
            - 몇 개의 스토리가 적용되어 부분적으로 기능이 완료된 제품 제공
            - 부분/전체 개발 완료 시점에 대한 일정 수립
        - Iteration
            - 하나의 릴리즈를 세분화한 단위 -> 1~3주 단위로 진행됨
            - 반복 진행 중 새로운 스토리가 추가될 경우 진행 중 반복이나 다음 반복에 추가될 수 있음
        - Acceptance Test
            - 릴리즈 단위의 개발이 구현되었을 때 진행하는 테스트
            - 사용자 스토리에 작성된 요구사항을 확인해 고객이 직접 테스트
            - 오류가 발견되면 다음 반복에 추가함
            - 테스트 후 고객의 요구사항이 변경되거나 추가되면 중요도에 따라 우선순위가 변경될 수 있음
            - 완료 후 다음 반복을 진행함
        - Small Release
            - 릴리즈 단위를 기능별로 세분화하면 고객의 반응을 기능별로 확인할 수 있음
            - 최종 완제품일 때 고객에 의한 최종 테스트 진행 후 고객에 제공함
- XP의 12가지 실천사항(Practice)
    - Fine scale Feedback
        - Pair Programming : 하나의 컴퓨터에 2명의 프로그래머가 모든 코드에 대해서 코딩과 리뷰 역할을 바꿔가며 공동 작업을 진행함
        - Planning Game : 게임처럼 선수와 규칙, 목표를 두고 기획에 임함
        - Test Driven Development : 실제 코드를 작성하기 전에 단위 테스트부터 작성 및 수행하며, 이를 기반으로 코드 작성
        - Whole Team : 개발 효율을 위해 고객을 프로젝트 팀원으로 상주시킴
    - Continuous process
        - Continuous Integration : 상시 빌드 및 배포를 할 수 있는 상태로 유지함
        - Design Improvement : 기능 변경 없이 중복성/복잡성 제거, 커뮤니케이션 향상, 단순화, 유연성 등을 위한 재구성 수행
        - Small Releases : 짧은 주기로 잦은 릴리즈를 함으로써 고객이 변경사항을 볼 수 있게 함
    - Shared understanding
        - Coding Standards : 소스코드 작성 포맷과 규칙들을 표준화된 관례에 따라 작성함
        - Collective Code Ownership : 시스템에 있는 소스코드는 팀의 모든 프로그래머가 언제라도 수정할 수 있음
        - Simple Design : 가능한 가장 간결한 디자인 상태를 유지함
        - System Metaphor : 최종적으로 개발되어야 할 시스템의 구조를 기술
    - Programmer welfare
        - Sustainable Pace : 일주일에 40시간 이상 작업 금지, 2주 연속 오버타임 금지
- 짝 프로그래밍(Pair Programming)
    - 두 사람이 짝이 되어 한 사람은 코딩을, 다른 사람은 검사를 수행하는 방식
    - 코드에 대한 책임을 공유하고, 비형식적인 검토를 수행할 수 있음
    - 코드 개선을 위한 리팩토링을 장려하며, 생산성이 떨어지지 않음
- SCRUM
    - SCRUM의 개념
        - 반복적이고 점진적인 소규모 팀 중심의 소프트웨어 개발 방법론
        - 팀원 간 활발한 소통과 협동심이 필요함
        - 요구사항 변경에 신속하게 대처할 수 있음
        - 신속하게 반복적으로 실제 작동하는 소프트웨어를 제공함
        - 개발자들의 팀 구성과 각 구성원의 역할, 일정 결과물 및 그 외 규칙을 정함
        - 팀원 스스로 팀을 구성해야 함(Self Organizing)
        - 개발 작업에 관한 모든 것을 팀원 스스로 해결해야 함(Cross Functional)
    - SCRUM의 특징
        - 기능 개선점에 우선순위를 부여하고, 개발 주기 동안 실제 동작 가능한 결과를 제공함
        - 개발 주기마다 적용된 기능이나 개선점의 리스트를 제공함
        - 커뮤니케이션을 위해 팀을 개방된 공간에서 개발하고, 매일 15분 정도 회의
    - SCRUM의 기본 원리
        - 기능 협업을 기준으로 배치된 팀은 스프린트 단위로 소프트웨어를 개발함
        - 스프린트는 고정된 30일의 반복 -> 스프린트 시 행하는 작업은 고정됨
        - 요구사항, 아키텍처, 설계가 프로젝트 전반에 걸쳐 잘 드러나야 함
        - 정해진 시간을 철저히 지켜야 함
        - 완료된 모든 작업은 제품 백로그에 기록됨
        - 가장 기본적인 정보 교환 수단은 일일 스탠드업 미팅 또는 일일 스크림
    - SCRUM 팀의 역할
        - 제품 책임자(Product Owner)
            - 개발 목표에 이해도가 높은 개발의뢰자, 사용자가 담당함
            - 제품 요구사항을 파악해 기능 목록(Product Backlog)을 작성함
            - 제품 테스트 수행 및 요구사항 우선순위를 갱신함
            - 업무 관점에서 우선순위와 중요도를 표시하고 신규 항목을 추가함
            - 스프린트 계획 수립까지만 임무 수행
            - 스프린트가 시작되면 팀 운영에 관여하지 않음
        - 스크럼 마스터(SRCRUM Master)
            - 업무를 배분만 하고 일은 강요하지 않음
            - 팀을 스스로 조직하고 관리하도록 지원함
            - 개발 과정에서 스크럼의 원칙과 가치를 지키도록 지원함
            - 개발 과정의 장애 요소를 찾아 제거함
        - 스크럼 팀(SCRUM Team)
            - 제품 책임자, 스크럼 마스터를 제외한 팀원 지칭
            - 팀원 5~9명 내외로 구성 : 개발자, 디자이너, 제품 검사자 등
            - 요구사항을 사용자 스토리로 도출 및 구현
            - 기능을 작업 단위로 나눔
            - 일정, 속도를 추정 뒤 제품 책임자에게 전달
            - 스프린트 결과물을 제품 책임자에게 시연
            - 매일 스크럼 회의에 참여해 진행 상황 점검
- SCRUM의 작업 흐름도
    - Product Backlog
        - 제품 개발에 필요한 모든 요구사항(User Story)을 우선순위에 따라 나열한 목록
        - 개발 과정에서 새롭게 도출되는 요구사항으로 인해 지속 업데이트
        - 제품 백로그에 작성된 사용자 스토리를 기반으로 전체 일정 계획인 릴리즈 계획 수립
    - Sprint
        - 작은 단위의 개발 업무를 단기간에 전력 질주해 개발
        - 반복 주기(2~4주)마다 이해관계자에게 일의 진척도를 보고함
    - Sprint Planning Meeting
        - Product Backlog(게품 기능 목록)에서 진행할 항목을 선택함
        - 선택한 Sprint에 대한 단기 일정을 수립하고, 요구사항을 개발자들이 나눠 작업할 수 있도록 Task 단위로 나눔
        - 개발자별로 Sprint Backlog를 작성하고 결과물에 대한 반복 완료 시 모습을 결정함
        - 수행에 필요한 각종 요구사항을 SCRUM Master에게 보고해 이해관계자로부터 지원을 받음
    - Daily SCRUM Meeting
        - 매일 약속된 시간에 짧은 시간 동안(약 15분) 서서 진행 상황만 점검함
        - 스프린트 작업 목록을 잘 개발하고 있는지 확인함
        - 한 사람씩 어제 한 일과 오늘 할 일을 이야기함
        - 완료된 세부 작업 항목을 완료 상태로 옮겨 스프린트 현황판에 갱신함
        - 스크럼 마스터는 방해요소를 찾아 해결하고 잔여 작업시간을 소멸 차트(Burn down Chart)에 기록함
    - Finished Work : 모든 스프린트 주기가 완료되면 제품 기능 목록(Product Backlog)의 개발 목표물이 완성됨
    - Sprint Review
        - 스프린트 검토 회의(Sprint Review)에 개발자와 사용자가 같이 참석함
        - 하나의 스프린트 반복 주기(2~4주)가 긑나면 실행 가능한 제품이 생성되며 이에 대해 검토함
        - 검토는 가능한 4시간 안에 마무리
        - 개선해야 할 사항에 대해 제품 책임자(Product Owner)는 피드백을 정리해 제품 기능 목록(Product Backlog)을 작성해 다음 스프린트에 적용함
    - 스프린트 회고(Sprint Retrospective)
        - 그동안 스프린트에서 수행한 활동과 결과물을 살펴봄
        - 개선점이 없는지 살펴보고 문제점을 기록하는 정도로 진행함
        - 정해진 규칙이나 표준을 잘 수행했는지 확인함
        - 팀의 단점을 찾기보다는 강점을 찾아 팀의 능력을 극대화함
        - 개발 추정속도와 실제 작업속도를 비교하고 차이가 있다면 이유를 분석함