출제빈도 중

1) HIPO(Hierarchy plus Inout Process Output)
- 기본 모델로 입력, 처리, 출력으로 구성되는 시스템 분석 및 설계와 시스템 문서화용 기법
- 일반적 구성 : 가시적 도표(Visual Table of Contents), 총체적 다이어그램(Overview Diagram), 세부적 다이어그램(Detail Diagram)
    - 구조도(가시적 도표), 개요, 도표(Index Diagram), 상세 도표(Detail Diagram)
    - 가시적 도표 : 전체적인 기능과 흐름을 보여주는 구조
    - 기능과 자료의 의존 관계를 동시에 표현할 수 있음
    - 보기 쉽고 이해하기 쉬우며 유지보수가 용이함
    - 하향식 소프트웨어 개발을 위한 문서화 도구
2) V-모델
- 폭포수 모델에 시스템 검증과 테스트 작업을 강조한 모델
    - 폭포수 모델 : 개발과정이 단계화 되어 있어 관리가 쉬우나 요구분석에 상당한 시간이 소요되며, 분석이 끝나면 수정이 어려움
- 세부적인 프로세스로 구성됨 -> 신뢰도 높은 시스템 개발에 효과적
- 개발 단계 작업 확인 위해 테스트 작업 수행
- 생명 주기 초반부터 테스트 작업 지원
- 코드뿐만 아니라 요구사항과 설계 결과도 테스트할 수 있어야 함
- 폭포수 모델보다 반복과 재처리 과정이 명확함
- 테스트 작업을 단계별로 구분하므로 책임이 명확해짐
3) 재공학
- 소프트웨어 재사용(Software Reusability)의 개념
    - 이미 개발되어 그 기능 및 성능, 품질을 인정받은 소프트웨어의 전체 또는 일부분을 재사용해 새롭게 개발하는 기법
    - 1990년대의 클래스, 객체 등의 소프트웨어요소가 소프트웨어 재사용성을 크게 향상시킴
- 재사용의 장점
    - 개발 시간 및 비용 감소
    - 품질 향상
    - 생산성 향상
    - 신뢰성 향상
    - 구축 방법에 대한 지식 공유
    - 프로젝트 실패 위험 감소
- 소프트웨어 재공학(Software Reengineering)의 개념
    - 소프트웨어 위기를 개발의 생산성이 아닌 유지보수의 생산성으로 해결하려는 방법을 의미
    - 기존 시스템을 이용해 보다 나은 시스템을 구축하고 새로운 기능을 추가해 소프트웨어 성능을 향상시키는 기법
    - 데이터와 기능들의 개조 및 개선을 통해 유지보수의 용이성을 향상시키고자 함
    - 현재의 시스템을 변경하거나 재구조화(Restructuring)하는 것
    - 재구조화는 재공학의 한 유형 -> 사용자의 요구사항이나 기술적 설계의 변경 없이 프로그램을 개선하는 것
    - 사용자의 요구사항을 변경시키지 않고, 기술적 설계를 변경하여 프로그램을 개선하는 것도 해당됨
    - 재공학의 과정 : 분석(Analysis) -> 구성(Restructuring) -> 역공학(Reverse Engineering) -> 이식(Migration)
- 재공학의 목표
    - 소프트웨어의 유지보수성 향상이 최우선 목표
    - 복잡한 시스템을 다루는 방법을 구현하기 위해
    - 다른 뷰의 생성을 위해
    - 잃어버린 정보의 복구 및 제거를 하기 위해
    - 재사용이 용이하도록 하기 위해
    - 소프트웨어의 수명을 연장하기 위해
4) 역공학
- 소프트웨어를 분석하여 소프트웨어 개발 과정과 데이터 처리 과정을 설명하는 분석 및 설계 정보를 재발견하거나 다시 만들어내는 작업
- 현재 프로그램으로부터 데이터, 아키텍처, 절차에 관한 분석 및 설계 정보를 추출하는 작업
- 재문서화 : 역공학의 가장 간단하고 오래된 형태
- 기존 소프트웨어의 구성요소와 그 관계를 파악하여 설계도를 추출함
