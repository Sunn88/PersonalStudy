출제빈도 상

1) 객체지향(Object Oriented) 분석
- 현실 세계의 대상체인 개체(Entity)를 속성(Attribute)과 메소드(Method)로 결합해 객체(Object)로 표현(모델링)함
- 소프트웨어 개발 대상을 기능이 아닌 개체를 대상으로 하며, 개체 간의 상호 관계를 모델링하는 방식
- 구조적 소프트웨어 위기를 해결하기 위한 생산성, 재사용성, 확장성, 사용 편의성, 유지보수성 요구로 인해 등장함
- 현실 세계를 객체라는 모형으로 형상화하므로 사용자와 개발자의 상호 이해도가 높음

2) 객체지향 프로그램(Object Oriented Programming)
- 컴퓨터 소프트웨어를 구조적인 코드 단위로 보는 것이 아니라 Object 단위로 구분하고 Object 간의 모음으로 설계하는 것
- 소프트웨어 내의 Ibject는 서로 Message를 주고받음
- 처리 요구를 받은 객체가 자기 자신 안에 있는 내용을 가지고 처리하는 방식
- 프로그램이 단순화되고 생산성, 신뢰성이 높아져 대규모 개발에 많이 사용됨

3) 객체지향 구성 요소
- Class
    - 유사한 객체를 정의한 집합 -> 속성 + 행위를 정의한 것으로 일반적인 Type을 의미함
    - 기본적인 사용자 정의 데이터형 -> 데이터를 추상화하는 단위
    - 구조적 기법에서의 단위 테스트(Unit Test)와 같은 개념
    - 상위 클래스(부모 클래스, Super Class), 하위 클래스(자식 클래스, Sub Class)로 나뉨
- Object
    - 데이터와 함수를 묶어 캡슐화하는 대상이 됨
    - Class에 속한 Instance를 Object라고 함
    - 하나의 소프트웨어 모듈로서 목적, 대상을 표현함
    - 같은 클래스에 속한 각각의 객체를 Instance라고 함
    - 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 함
    - Attribute : Object가 가지고 있는 데이터 값
    - Method : Object의 행위인 함수
- Message
    - Object 간에 서로 주고받는 통신을 의미함

4) 객체지향의 5가지 특징
- 캡슐화(Encapsulation)
    - 서로 관련성이 높은 데이터(속성)와 그와 관련된 기능(메소드, 함수)을 묶는 기법
    - 결합도가 낮아져 소프트웨어 개발에 있어 재사용성이 높아짐
    - 정보은닉을 통해 타 객체와 메시지 교환 시 인터페이스가 단순해짐
    - 변경 발생 시 오류의 파급 효과가 적음
- 정보은닉(Information Hiding)
    - 객체 내부의 속성과 메소드를 숨기고 공개된 인터페이스를 통해서만 메시지를 주고 받을 수 있도록 하는 것
    - 예기치 못한 Side Effect를 줄이기 위해 사용함
    - JAVA에서 정보은닉을 표기할 떄 private는 외부에서 클래스 내부 정보에 접근하지 못하도록 하는 '접근금지' 의미를 가짐
- 추상화(Abstraction)
    - 시스템 내의 공통 성질을 추출한 뒤 추상 클래스로 설정하는 기법
    - 현실 세계를 컴퓨터 시스템에 자연스럽게 표현할 수 있음
    - 종류 : 기능 추상화, 제어 추상화, 자료 추상화
- 상속성(Inheritance)
    - 상위 클래스의 모든 속성, 연산을 하위 클래스가 재정의 없이 물려받아 사용하는 것
    - 상위 클래스는 추상적 성질을, 자식 클래스는 구체적 성질을 가짐
    - 하위 클래스는 상속받은 속성과 연산에 새로운 속성과 연산을 추가해 사용할 수 있음
    - 다중 상속 : 다수 상위 클래스에서 속성과 연산을 물려받는 것
- 다형성(Polymorphism)
    - 객체가 다양한 모양을 가지는 성질
    - 오퍼레이션이나 속성의 이름이 하나 이상의 클래스에서 정의되고 각 클래스에서 다른 형태로 구현될 수 있는 개념
    - 속성이나 변수가 서로 다른 클래스에 속하는 객체를 지칭할 수 있는 성질
    - 오버로딩(같은 이름순서 재사용)과 오버라이딩(재정의)이 있음
    - 현재 코드를 변경하지 않고 새로운 클래스를 쉽게 추가할 수 있음

5) 객체지향 기법에서의 관계성
- is member of : 연관성(Association), 참조 및 이용 관계
- is part of : 집단화(Aggregation), 객체 간의 구조적인 집약 관계
- is a : 일반화(Generalization), 특수화(Specialization), 클래스 간의 개념적인 포함 관계

6) 객체지향 설계 원칙(SOLID)
- 단일 책임의 원칙(SRP, Single Responsibility Principle)
    - 모든 클래스는 단일 목적으로 생성되고, 하나의 책임만 가져야 함
- 개방-폐쇄의 원칙(OCP, Open Closed Principle)
    - 소프트웨어 구성요소는 확장에 대해서는 개방되어야 하나 수정에 대해서는 폐쇄적이어야 함
- 리스코프치환 원칙(LSP, Liskov Substitution Principle)
    - 부모 클래스가 들어갈 자리에 자식 클래스를 대체해도 계획대로 작동해야 함
- 인터페이스 분리 원칙(ISP, Interface Segregation Principle)
    - 클라이언트는 자신이 사용하지 않는 메소드와 의존 관계를 맺으면 안 됨
    - 클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안 됨
- 의존 역전 원칙(DIP, Dependency Inversion Principle)
    - 의존 관계를 맺으면 변하기 쉽고 변화 빈도가 높은 것보다 변하기 어렵고 변화 빈도가 낮은 것에 의존함