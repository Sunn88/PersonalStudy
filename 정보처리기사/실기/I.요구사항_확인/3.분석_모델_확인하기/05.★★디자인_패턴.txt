출제빈도 상

1) 디자인 패턴
- 소프트웨어 개발 중 나타나는 과제를 해결하기 위한 방법 중 한 가지
- 자주 사용하는 설계 형태를 정형화해 유형별로 설계 템플릿을 만들어 둔 것
- 다양한 응용 소프트웨어 시스템들을 개발할 때 서로 간에 공통되는 설계 문제가 존재하는데, 각 해결책 사이에도 공통점이 있음
    -> 이러한 유사점을 '패턴'이라 함
- 객체지향 프로그래밍 설계 시 유사한 상황에서 구조적인 문제를 해결할 수 있도록 방안을 제공함
- 개발자 간 원활한 의사소통, 소프트웨어 구조 파악 용이, 설계 변경에 대한 유연한 대처, 개발의 효율성, 유지 보수성, 운용성 등 소프트웨어 품질 향상에 도움을 줌
- Gof(Gang of Four) 분류가 가장 많이 사용됨

2) 디자인 패턴의 구성요소
- 필수 요소
    - 패턴의 이름 : 패턴을 부를 떄 사용하는 이름과 패턴의 유형
    - 문제 및 배경 : 패턴이 사용되는 분야 또는 배경, 해결하는 문제를 의미
    - 해법 : 패턴을 이루는 요소들, 관계, 협동(Collaboration) 과정
    - 결과 : 패턴을 사용하면 얻게 되는 이점이나 영향
- 추가 요소
    - 알려진 사례 : 간단한 적용 사례
    - 샘플 코드 : 패턴이 적용된 원시 코드
    - 원리/정당성/근거
    - 예제

3) GoF(Gang of Four) 디자인 패턴
- 에릭 감마(Eric Gamma), 리처드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 브리시데스(John Vlissides)가 제안함
- 객체지향 설계 단계 중 재사용에 관한 우용한 설계를 디자인 패턴화함
- 생성 패턴, 구조 패턴, 행위 패턴으로 분류함
- 생성 패턴
    - 객체를 생성하는 것과 관련된 패턴
    - 객체의 생성과 변경이 전체 시스템에 미치는 영향을 최소화하도록해 유연성을 높일 수 있고 코드를 유지하기 쉬운 편
    - 객체의 생성과 참조 과정을 추상화함으로써 시스템을 개발할 때 부담을 덜어줌
    - Abstraction factory(추상 팩토리)
        - 구체적인 클래스에 의존하지 않고 서로 연관되거나 의존적인 객체들의 조합을 만드는 인터페이스를 제공하는 패턴
        - 관련된 서브 클래스를 그룹지어 한 번에 교체할 수 있음
    - Builder
        - 작게 분리된 인스턴스를 조립하듯 조합해 객체를 생성함
    - Factory method
        - 객체를 생성하기 위한 인터페이스를 정의해 어떤 클래스가 인스턴스화될 것인지는 서브 클래스가 결정하도록 함
        - Vitrual-Constructor 패턴이라고도 함
    - Prototype
        - 원본 객체를 복제해 객체를 생성하는 패턴
        - 일반적인 방법으로 객체를 생성하고 비용이 많이 소요되는 경우에 주로 사용함
    - Singleton
        - 전역 변수를 사용하지 않고 객체를 하나만 생성하도록 함
        - 생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴
- 구조 패턴
    - 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
    - 복잡한 형태의 구조를 갖는 시스템을 개발하기 쉽게 만들어주는 패턴
    - 새로운 기능을 가진 복합 객체를 효과적으로 작성할 수 있음
    - 프로그램 내의 자료 구조나 인터페이스 구조 등 구조를 설계하는 데 많이 활용됨
    - Adapter : 호환성이 없는 인터페이스 때문에 함께 사용할 수 없는 클래스를 개조해 함께 작동할 수 있도록 해주는 패턴
    - Bridge : 기능 클래스 계층과 구현의 클래스 계층을 연결하고, 구현부에서 추상 계층을 분리해 각자 독립적으로 변형할 수 있도록 해주는 패턴
    - Composite : 여러 개의 객체로 구성된 복합 객체와 단일 객체를 클라이언트에서 구별 없이 다루게 해주는 패턴
    - Decorator : 객체의 결합을 통해 기능을 동적으로 우연하게 확장할 수 있게 해주는 패턴
    - Facade(퍼사드)
        - '건물의 정면'이라는 의미
        - Facade 인터페이스를 제공해 facede 객체를 통해서만 모든 관꼐가 이루어질 수 있도록 인터페이스를 단순화함
        - 클래스 간의 의존관계가 줄고, 복잡성이 낮아짐
    - Flyweight
        - '권투 선수 증 플라이급'이라는 의미
        - 인스턴스를 매번 생성하지 않고 가능하다면 공유해 사용함으로써 메모리를 절약하는 패턴
        - 여러 개의 비슷한 객체 생성/조작 시 메모리를 효과적으로 사용할 수 있음
    - Proxy
        - 접근 조절, 비용 절감, 복잡도 감소를 위해 접근이 어려운 객체와 연결하려는 다른 객체와 인터페이스 임무를 수행하는 패턴
        - 메모리가 대용량 객체로 접근할 수 있도록 하거나, 네트워크 연결에 사용함
- 행위 패턴
    - 반복적으로 사용되는 객체들의 상호작용을 패턴화한 것 -> 클래스나 객체들이 상호작용하는 방법과 책임을 분산하는 방법을 정의함
    - 메시지 교환과 관련된 것으로, 객체 간의 행위나 알고리즘 등과 관련된 패턴을 말함
    - Chain of Responsibility(책임 연쇄)
        - 요청을 처리할 기회를 하나 이상의 객체에 부여함으로써 요청하는 객체와 처리하는 객체 사이의 결합도를 없애려는 것
        - 요청을 해결할 객체를 만날 때까지 객체 고리(Chain)를 따라서 요청을 전달함
    - Command
        - 요청을 객체로 캡슐화함으로써 서로 다른 요청으로 클라이언트를 파라미터화하고, 요청을 저장하거나 기록을 남겨서 오퍼레이션의 취소도 가능하게 함
    - Interpreter
        - 언어에 따라서 문법에 대한 표현을 정의함
        - 언어의 문장을 해석하기 위해 정의한 표현에 기반해 분석기를 정의함
    - Iterator(반복자)
        - 내부 표현 방법을 노출하지 않고 복합 객체의 원소를 순차적으로 접근할 수 있는 방법을 제공함
    - Mediator(중재자)
        - 객체 간의 상호작용을 객체로 캡슐화함
        - Mediator 패턴은 객체 간의 참조 관계를 객체에서 분리함으로써 상호작용만을 독립적으로 다양하게 확대할 수 있음
    - Memento
        - 캡슐화를 위배하지 않고 객체 내부 상태를 객체화하여, 나중에 객체가 이 상태로 복구 가능하게 함
    - Observer
        - 객체 사이에 일대다의 종속성을 정의하고 한 객체의 상태가 변하면 종속된 다른 객체에 통보가 가고 자동으로 수정이 일어나게 함
    - State
        - 객체의 내부 상태에 따라 행위를 변경할 수 있게 함
        - 이렇게 하면 객체는 마치 클래스를 바꾸는 것처럼 보임
    - Strategy
        - 알고리즘군이 존재할 경우 각각의 알고리즘을 별도의 클래스로 캡슐화하고 이들을 상호 교환 가능한 것으로 정의함
        - 클라이언트에 영향을 주지 않고 독립적으로 알고리즘을 다양하게 변경할 수 있게 함
    - Template method
        - 오프레이션에는 알고리즘의 처리 과정만을 정의하고 각 단계에서 수행할 구체적 처리는 서브 클래스에 정의함
        - 알고리즘의 처리 과정은 변경하지 않고 알고리즘이 각 단꼐의 처리를 서브 클래스에서 재정의할 수 있게 함
    - Visitor
        - 객체 구조의 요소들에 수행할 오퍼레이션을 표현한 패턴
        - 오퍼레이션이 처리할 요소의 클래스를 변경하지 않고도 새로운 오퍼레이션을 정의할 수 있게 함
    
4) 아키텍처 패턴과 디자인 패턴
- 아키텍처 패턴이 상위 설계에 이용됨
- 아키텍처 패턴 : 시스템 전체 구조를 설계하기 위한 참조 모델
- 디자인 패턴 : 서브 시스템 내 컴포넌트와 그들 간의 관계를 구성하기 위한 참조 모델

5) 디자인 패턴의 구조
- Context(주제, 목표)
    - 문제 발생 상황을 작성함(패턴이 적용될 수 있는 상황)
    - 때에 따라서는 패턴이 유용하지 못한 상황을 나타내기도 함
- Problem(문제)
    - 패턴이 적용되어 해결될 필요가 있다는 여러 디자인 이슈들을 작성함
    - 여러 제약 사항과 영향력도 문제 해결을 위해 고려해야 함
- Solution(해결)
    - 문제를 해결하도록 설꼐를 구성하는 요소들과 그 요소들 사이의 관계, 책임, 협력 관계를 작성함
    - 해결은 반드시 구체적인 구현 방법이나 언어에 의존적이지 않으며 다양한 상황에 적용할 수 있는 일종의 템플릿임