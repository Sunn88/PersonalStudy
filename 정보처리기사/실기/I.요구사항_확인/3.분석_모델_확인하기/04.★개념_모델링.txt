출제빈도 중

1) 개념 모델링(Conceptual Modeling)
- 모델 : 요구사항을 이해하기 쉽도록 실세계의 상황을 단순화해 개념적으로 표현한 것
- 개념 모델링 : 이렇게 표현된 모델을 생성해 나가는 과정
- 모델은 문제가 발생하는 상황에 대한 이해를 증진하고 해결책을 설명하므로 소프트웨어 요구사항 분석의 핵심이라 할 수 있음
- 개발 대상 도메인의 엔티티들과 그들의 관계 및 종속성을 반영함
- 요구사항별로 관점이 다르므로 개념 모델도 다양하게 표현되어야 함
- 종류 : Use Case Diagram, Data Flow Model, State Model, Goal-Based Model, User Interactions, Object Model, Data Model 등
- 대부분 UML(Unified modeling Language)을 사용함

2) UML
- UML의 개념
    - 객체지향 소프트웨어 개발 과정에서 시스템 분석, 설계, 구현 등의 산출물을 명세화, 시각화, 문서화 할 때 사용하는 모델링 기술과 방법론을 통합해 만든 범용 모델링 언어
    - Runbaugh(OMT)와 Booch(Booch)가 두 방법을 통합하기 위해 IBM Rational Software에 같이 일하면서 만들어짐
    - 1995.10 발표 이후 Jacobson이 합류함
    - OMG(Object Management Group)에서 표준화 공고 후, IBM, HP, Microsoft, Oracle등이 참여해 1997.1 버전 1.0을 Release함
* 럼바우(Rumbaugh) 객체지향 분석 기법
    - 소프트웨어 구성요소를 그래픽으로 모형화함
    - 객체 모델링 기법(OMT, Object Modeling Technique)이라고도 함
    - 객체 모델링 : 객체를 다이어그램으로 표시
    - 동적 모델링 : 상태를 시간 흐름에 따라 다이어그램으로 표시
    - 기능 모델링 : 자료흐름도를 이용해 여러 프로세스 간의 자료 흐름을 표시
- UML의 특성
    - 비주얼화 : 소프트웨어의 구성요소 간의 관계 및 상호작용을 시각화한 것
    - 문서화 : 소프트웨어 생명 주기의 중요한 작업을 추적하고 문서화할 수 있으며, 개별 프로세스 및 언어와 무관하게 개발자 간의 의사소통 도구를 제공함
    - 명세화 : 분석, 설계, 구현의 완벽한 모델 제공
        - 분석 단계(기능모델), 설계 단계(동작 수준 모델), 구현 단계(상호작용 모델) 수준으로 명세화할 수 있음
        - 단순 표기법이 아닌 구현에 필요한 개발적 요소 및 기능에 대한 명세를 제공함
    - 구축 : 객체지향 언어와 호환되는 프로그래밍 언어는 아니지만, 모델이 객체지향 언어로 매핑될 수 있음
- UML 소프트웨어에 대한 관점
    - 기능적 관점 : 사용자 측면에서 본 소프트웨어의 기능을 나타냄
        - 사용 사례 모델링이라고도 하며, 요구분석 단계에서 사용함
    - 정적 관점 : 소프트웨어 내부의 구성요소 사이의 구조적 관계를 나타냄
        - ex) 클래스 사이의 관계, 클래스 구성과 패키지 사이의 관계
    - 동적 관점 : 소프트웨어의 내부 활동을 나타냄
- UML의 구성
    - 사물
        - 객체지향 모델을 구성하는 기본 요소
        - 객체 간의 관계 형성 대상
    - 관계
        - 객체 간의 연관성을 표현하는 것
        - 종류 : 연관, 집합, 포함, 일반화, 의존, 실체화
    - 다이어그램
        - 객체의 관계를 도식화한 것
        - 다양한 관점에서 의사소통할 수 있도록 View를 제공
        - 정적 모델-구조 다이어그램
        - 동적 모델-행위 다이어그램
* 스테레오 타입
    - UML에서 제공하는 기본 요소 외에 추가적인 확장 요소를 표현할 때 사용
    - UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호는 쌍 꺾쇠와 비슷하게 생긴 일러멧(<<>>)리며, 길러멧 안에 확장 요소를 적음
- UML 접근제어자
    - public : + " 어떤 클래스의 객체에서 든 접근 가능
    - private : - : 해당 클래스로 생성된 객체만 접근 가능
    - protected : # : 해당 클래스와 동일 패키지에 있거나 상속 관계에 있는 하위 클래스의 객체들만 접근 가능
    - package : ~ : 동일 패키지에 있는 클래스의 객체들만 접근 가능
- 연관 관계 다중성 표현
    - 1 : 1 개체 연결
    - * 또는 0..* : 0이거나 그 이상 객체 연결
    - 1..* : 1이거나 1 이상 객체 연결
    - 0..1 : 0이거나 1 객체 연결
    - 1,3,6 : 1이거나 3이거나 6 객체 연결
    - n : n개 객체 연결

3) UML 다이어그램 분류
- 구조적 다이어그램(Structure Diagram)
    - 정적이고, 구조적인 표현을 위한 다이어그램
    - 종류
        - 클래스 다이어그램(Class Diagram) : 시스템을 구성하는 클래스들 사이의 관계를 표현함
        - 패키지 다이어그램(Package Diagram) : 클래스나 유스 케이스 등을 포함한 여러 모델 요소들을 그룹화하여 패키지를 구성하고 패키지들 사이의 관계를 표현함
        - 복합체 구조 다이어그램(Composite Structure Diagram) : 복합 구조의 클래스와 컴포넌트 내부 구조를 표현함
        - 객체 다이어그램(Object Diagram) : 객체 정보를 보여줌
        - 컴포넌트 다이어그램(Componenet Diagram) : 컴포넌트 구조 사이의 관계를 표현함
        - 배치 다이어그램(Deployment Diagram) : 소프트웨어, 하드웨어, 네트워크를 포함한 실행 시스템의 물리 구조를 표현함
- 행위 다이어그램(Behavior Diagram)
    - 동적이고, 순차적인 표현을 위한 다이어그램
    - 종류
        - 유스 케이스 다이어그램(Use Case Diagram) : 사용자 관점에서 시스템 행위를 표현함
        - 활동 다이어그램(Activity Diagram) : 업무 처리 과정이나 연산이 수행되는 과정을 표현함
        - 콜라보레이션 다이어그램(Collaboration Diagram) : 순차 다이어그램과 같으며 무델링 공간에 제약이 없어 구조적인 면을 중시함
        - 상태 머신 다이어그램(State Machine Diagram) : 객체의 생명주기를 표현함
        - 상호작용 다이어그램(Interaction Diagram)
            - 순차 다이어그램(Sequence Diagram) : 시간 흐름에 따른 객체 사이의 상호작용을 표현함
                - 요소 : 생명선(LifeLine), 통로(Gate), 상호작용(Interaction Fragment), 발생(Occurrence), 실행(Execution), 상태불변(State Invariant), 상호작용(Interaction Use), 메시지(Messages), 활성(Activations), 객체(Entity), Actor
            - 통신 다이어그램(Communication Diagram) : 객체 사이의 관계를 중심으로 상호작용을 표현함
            - 상호작용 개요 다이어그램(Interaction Overview Diagram) : 여러 상호작용 다이어그램 사이의 제어 흐름을 표현함
            - 타이밍 다이어그램(Timing Diagram) : 객체 상태 변화와 시간 제약을 명시적으로 표현함
- Class Diagram
    - 시스템을 구성하는 객체 간의 관계를 추상화한 모델을 논리적 구조로 표현함
    - 객체지향 개발에서 공통으로 사용됨
    - 분석, 설계, 구현 단계 전반에 지속해서 사용됨
    - UML 연관 관계(Association Relation)
        - 한 사물의 객체가 다른 사물의 객체와 연결된 것을 표현함
        - 두 클래스가 서로 연관이 있다면 A, B 객체를 서로 참조할 수 있음을 포현함
        - 이름 : 관계의 의미를 표현하기 위해 이름을 가질 수 있음
        - 역할 : 수행하는 역할을 명시적으로 이름을 가질 수 있음
    - UML 의존 관계(Dependency Relation)
        - 연관 관계와 같지만 메소드를 사용할 때와 같이 매우 짧은 시간만 유지됨
        - 영향을 주는 객체(User)에서 영향을 받는 객체 방향으로 점선 화살표로 연결함
    - UML 일반화 관계(Generalization Relation)
        - 객체지향에서 상속 관계를 표현함
        - 한 클래스가 다른 플래스를 포함하는 상위 개념일 때 사용함
    - UML 집합 관계(Aggregation Relation)
        - A 객체가 B 객체에 포함된 관계
        - '부분'을 나타내는 객체를 다른 객체와 공유할 수 있음
        - '전체' 클래스 방향에 빈 마름모로 표시하고, Or 관계에 놓이면 선 사이를 점선으로 잇고 {or}를 표시함
    - UML 포함 관계(Composition Relation)
        - 부분 객체가 전체 객체에 속하는 강한 집합 연관의 관계를 표현하는 클래스
        - '부분' 객체를 다른 객체와 공유 불가하고, '전체' 객체 방향에 채워진 마름모로 표시함
    - UML 실체화 관계(Realization Relation)
        - 인터페이스와 실제 구현된 일반 클래스 간의 관계로 존재하는 행동에 대해 구현함
        - 인터페이스의 명세나 정의만 존재하는 메소드를 실제 기능으로 구현한 것
- Use Case Diagram
    - Use Case Diagram의 개념
        - 사용자의 요구를 기능적 측면에서 기술할 때 사용하고, Actor와 Use Case로 구성됨
        - 객체지향 초반기 분석 작업에 작성되어야 함
        - 얻어지는 결과는 개발 대상 시스템이 제공해야 하는 서비스 목록이 됨
    - Use Case Diagram 요소
        - 시스템 경계(System Boundary)
            - 시스템이 제공해야 하는 사례(Use Case)들의 범위가 됨
            - 큰 규모의 객체로 구현되는 존재임
        - 액터(Actor)
            - 서비스를 이용하는 외부 객체임
            - 시스템이 특정한 사례(Use Case)를 실행하도록 요구할 수 있는 존재
        - 유스 케이스(Use Case)
            - 시스템이 제공해야 하는 개별적인 서비스 기능
            - 서비스는 특정 클래스의 멤버함수로 모델링됨
        - 접속 관계(Comminucation Association)
            - 액터/유스 케이스 또는 유스 케이스/유스 케이스 사이에 연결되는 관계
            - 액터나 유스 케이스가 다른 유스 케이스의 서비스를 이용하는 상황을 표현함
        - 사용 관계(Uses Association)
            - 여러 개의 유스 케이스에서 공통으로 수행해야 하는 기능을 모델링하기 위해 사용함
        - 확장 관계(Extends Association)
            - 어떠한 유스 케이스에 추가로 새로운 유스 케이스의 기능을 정의할 때 이용됨
    - Use Case Diagram 작성 단계
        - 액터 식별
            - 모든 사용자의 역할을 식별함
            - 상호작용하는 타 시스템을 식별함
            - 정보를 주고받는 하드웨어 및 지능형 장치를 식별함
        - Use Case 식별
            - 액터가 요구하는 서비스를 식별함
            - 액터가 요구하는 정보를 식별함
            - 액터가 시스템과 상호작용하는 행위를 식별함
        - 관계 정의
            - 액터와 액터의 관계분석을 정의함
            - 액터와 유스 케이스 관계분석을 정의함
            - 유스 케이스와 유스 케이스 간의 관계분석을 정의함
        - Use Case 구조화
            - 두 개의 상위 유스 케이스에 존재하는 공통 서비스를 추출함
            - 추출된 서비스의 유스 케이스를 정의함
            - 조건에 따른 서비스 수행의 부분을 분석해 구조화함
            - 추출된 서비스를 유스 케이스를 정의하고 추출된 서비스를 사용하는 유스 케이스와 관계를 정의함
            