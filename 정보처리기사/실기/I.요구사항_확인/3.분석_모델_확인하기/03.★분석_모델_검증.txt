출제빈도 중

1) 분석 모델 검증 절차
- 순서 : 사례 모델 검증 -> 개념 수준 분석 클래스 검증 -> 분석 클래스 검증
- 사례 모델 검증
    - 액터
        - 기능 구현에 관계되는 액터가 모두 도출되었는지와 액터 목록에서 액터명이 역할 중심으로 명명되었는지 검증함
        - 요구사항 정의서, 요구사항 기술서에 외부/내부 액터가 모두 도출되었는지를 확인하고 액터 목록과 액터 명세서에 기록된 액터가 타당한지 검증함
    - 사례
        - 요구기능 구현에 필요한 유스 케이스가 모두 도출되었는지 확인하고 도출된 유스 케이스를 논리적으로 연결해 빠진 기능을 파악함
        - 도출된 유스 케이스의 논리적인 합이 과업 범위와 일치하는지 비교하고 도출된 유스 케이스가 사례 목록과 사례 명세서에 반영되었는지 확인함
        - 도출된 유스 케이스들이 논리적(액터 기준, 연관 관계 기준, 동시성 기준)으로 그룹화되었는지 확인하고, 사례 기능 범위가 다른 사례 기능 범위와 중복되는지 확인
    - 사례 명세서
        - 사례 명세서 형식에 중요 항목(사전 및 사후 조건, 주요 흐름, 서브 흐름, 예외 흐름)이 빠지지 않았는지 확인하고 유스 케이스의 주요 이벤트 흐름이 모두 도출되고 논리적으로 타당한지 확인
        - 유스 케이스를 구현하는 데 필요한 입출력 항목이 모두 도출되었는지 확인
- 개념 수준 분석 클래스 검증(클래스 도출, 클래스명과 속성, 클래스 간 관계)
    - 시스템의 주요 도메인 개념을 분석 클래스로 도출해 사례 분석에 활용함 -> 개념 수준의 주요 분석 클래스를 적절히 도출했는지, 관련 정보가 명확한지 점검함
    - 클래스 간 다중성(Multiplicity) 표기법
        - 1 : 엄밀하게 1
        - * : 0 또는 그 이상
        - 0..* : 0 또는 그 이상
        - 1..* : 1 또는 그 이상
        - 0..1 : 0 ~ 1
        - 2..5 : 2 ~ 5
        - 1,2,6 : 1 또는 2 또는 6
        - 1,3..5 : 1 또는 3 또는 4 또는 5
- 분석 클래스 검증(스테레오 타입, 경계 및 제어 클래스 도출, 관계 및 상세화 정도)
    - 유스 케이스마다 분석 클래스가 적절히 도출되었고 제어 클래스의 도출 등이 충분하고 상세하게 도출되어 클래스의 역할, 클래스 간의 관계, 메시지 흐름 등을 확인할 수 있는지 검토함
    - 사례 실체화(Realization)에 필요한 분석 클래스 도출 확인
        - 하나의 유스 케이스를 실현하기 위해 3개 이상의 클래스가 역할(Role) 기준으로 도출되어야 하며 사례별로 실현에 필요한 클래스가 추적 가능해야 클래스 누락 여부를 확인할 수 있음
        - 유스 케이스별로 도출된 분석 클래스들이 역할(Role) 기준으로 경계(Boundary), 제어(Control), 엔티티(Entity) 클래스가 도출되어 스테레오 타입으로 표시되었는지 확인함
        - 사례 이벤트 흐름에 따라 다르지만, 일반적으로 사례당 1개의 제어 클래스가 존재하고 액터마다 1개의 경계 클래스가 존재하는지 확인함
    - 분석 클래스의 스테레오 타입
        - 경계 : 액터와의 상호작용을 제공하는 클래스
        - 제어 : 유스 케이스의 비즈니스/제어 로직을 제공함
        - 엔티티 : 영속적인 데이터를 도출해 엔티티 클래스로 표현하며, 엔티티 클래스는 영속적인 정보의 관리 기능을 제공함

2) 분석 모델의 시스템화 타당성 분석
- 요구사항의 기술적 타당성 검토
    - 업무 분석가가 수집하고 분석한 요구사항이 개발하고자 하는 응용 소프트웨어에 미칠 영향에 대해 검토하고 확인해야 함
- 요구사항 기술적 타당성 검토 항목
    - 성능 및 용량 산정의 적정성
        - 요구사항을 만족시키기 위한 분석 모델에 따라 시스템을 구현할 때 요구되는 시스템의 자원 식별
        - 분석 클래스에서 불필요하고 지나치게 많은 속성들을 포함하게 되면 객체 생성 시 시스템의 메모리 자원을 많이 요구
        - 많은 자원 요구로 인한 JVM에서 과도한 가비지 컬렉션이 발생해 전체 시스템의 성능 저하가 빈번히 발생
    - 시스템 간 상호 운용성
        - 분석 모델을 이용해 더욱 구체적으로 시스템 간 상호 정보 및 서비스를 교환 가능한지 검토
        - 분석 모델에서 정의한 구체적인 정보의 존재 여부, 생성 가능성, 교환 방식 지원 등에 관해서 확인
    - 시장 성숙도 및 추세 부합성
        - 분석 모델이 과거의 문제를 해결하고 많이 사용되는 추세에 부합하는지 확인
        - 시스템에서 중요하고 빈번하게 사용되는 클래스를 Spring의 프로토타입 빈(Prototype Bean)으로 사용할 것을 가정하고 분석 모델이 작성되지 않았는지 검토
    - 기술적 위험 분석
        - 분석 모델이 시스템의 기술 구조, 프레임워크, 사용되는 하드웨어 및 소프트웨어가 부합되는지 확인
        - 분석 모델이 검증되지 않은 기술의 사용을 가정으로 하고 있어 추가적인 비용 발생 가능성이 있는지 확인
        - 분석 모델을 구현하기 위해 특정 업체 기술, 특허, 라이선스에 의존해야 하는지 확인
- 요구사항의 기술적 타당성 분석 프로세스 : 타당성 분석 결과 기록 -> 타당성 분석 결과 이해관계자 검증 -> 타당성 분석 결과 확인 및 배포/공유

3) 소프트웨어 개발 자동화 도구 CASE(Computer Aided Software Engineering)
- 요구사항을 자동으로 분석하고 요구사항 분석 명세서를 기술하도록 개발된 도구
- 소프트웨어 개발과정 일부 또는 전체를 자동화하기 위한 도구
- 계획 수립에서부터 요구분석, 설계, 개발, 유지보수에 이르는 소프트웨어 생명주기의 모든 과정을 자동화하도록 지원함
- 소프트웨어 개발과정에서 사용되는 요구분석, 설계, 구현, 검사 및 디버깅 과정을 컴퓨터와 전용의 소프트웨어 도구를 사용해 자동화하는 작업
- 소프트웨어 생명 주기의 전체 단계를 연결시켜 주고 자동화시켜 주는 통합된 도구를 제공하는 기술
- 소프트웨어 시스템의 문서화 및 명세화를 위한 그래픽 기능 제공함
- 자료흐름도 등의 다이어그램을 쉽게 작성하게 해주는 소프트웨어도 CASE도구임
- 표준화된 개발 환경 구출 및 문서 자동화 기능을 제공함
- 작업 과정 및 데이터 공유를 통해 작업자 간의 커뮤니케이션을 증대함
- CASE 사용의 장점
    - 소프트웨어 개발 시간 단축 및 개발 비용 절약
    - 자동화된 검사를 통해 소프트웨어 품질 향상
    - 프로그램의 유지보수 간편화
    - 소프트웨어 생산성 향상
    - 소프트웨어 모듈의 재사용성 향상
- CASE가 제공하는 기능
    - 개발을 신속하게 할 수 있음
    - 오류 수정이 쉬워 S/W 품질이 향상됨
    - S/W 개발 단계의 표준화를 기할 수 있음
    - 모델들 사이의 모순검사를 할 수 있음
    - 자료흐름도 작성을 할 수 있음
- CASE의 분류
    - 상위(Upper) CASE : 요구분석 및 설계 단계 지원
    - 하위(Lower) CASE : 코드 작성, 테스트, 문서화 과정 지원
    - 통합(Integrate) CASE : 소프트웨어 개발 주기 전체 과정 지원
- 자동화 도구의 필요성
    - 대규모 개발 프로젝트에서는 다양한 이해관계자들이 요구사항 명세서를 검토해야 하고, 요구사항 명세서에 대해 형상관리를 수행해야 하므로 요구사항 관리 도구를 이용함
        - 형상관리 : 소프트웨어의 생산물(프로그램, 문서, 데이터 등)을 확인하고 소프트웨어, 통제, 변경 상태를 기록하고 보관하는 일련의 작업
    - 자동화 도구를 사용하면 요구변경 사항을 추적하고 분석, 관리할 수 있으며 표준 준수 여부를 확인할 수 있음
    - 분산된 환경에서 다양한 이해관계자가 공동 작업이 가능함
    - 테스트 연계 및 결함 관리 등의 기능을 제공하여 시스템 구축 업무를 효과적으로 수행할 수 있음
- 자동화 도구의 효과
    - 표준화된 환경 구축 및 문서 과정의 자동화, 표현성 확보
    - 소프트웨어 재사용성 확보 및 안정된 소프트웨어 품질 확보
    - 개발 전 과정의 신속성 및 통합성 제공
    - 변경 추적의 용이성과 명세에 대한 유지보수 비용 축소
- 자동화 도구 도입 시 준비사항
    - 개발 방법론의 선택, 교육, 사전 협의 및 관리체계 구축 및 기반 조성
    - 경영진, 관리자, 개발자 전원의 올바른 사용에 대한 이해와 준비
    - 자동화 도구 선정 시 평가항목 : 비용, 업체 지명도, 시장 점유율, 호환성, 통합성, 사용 용이성, 숙달 기간, 유지 보수성
    