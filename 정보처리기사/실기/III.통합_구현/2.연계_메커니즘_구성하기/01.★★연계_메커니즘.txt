출제빈도 상

1) 연계 시스템의 구분
- 송신 시스템
    - 데이터베이스, 애플리케이션으로부터 연계 데이터를 인터페이스 테이블이나 파일로 변환해 
        송신하는 역할
- 중계 서버
    - 데이터 송수신 현황을 감시하는 연계 서버를 배치함
    - 성능보다 보안이 더 중요하거나 송신/수신 시스템이 위치한 네트워크가 다른 경우 
        설계하는 아키텍처 방식
- 수신 시스템
    - 수신한 인터페이스 테이블 또는 파일의 데이터를 변환해 운영 중인 데이터베이스에 적용함

2) 연계 방식의 종류
- 직접 연계
    - DB Link
        - 한 데이터베이스에서 네트워크상의 다른 데이터베이스에 접속하기 위한 설정을 해주는 
            오라클 객체
        - 데이터베이스에서 제공하는 객체를 이용해 수신 시스템 DB에 송신 시스템에서 접근 가능한 
            DB Link 객체를 생성한 후 송신 시스템에서 DB Link명으로 직접 참조해 연계함
        - DB Link 문법
            - PUBLIC : 공용 데이터베이스 링크를 생성할 수 있음
            - link_name : 데이터베이스 링크의 이름을 지정함
            - service_name : 네트워크접속에 사용할 오라클 데이터베이스 네트워크 서비스명을 지정함
            - username, password : 오라클 사용자명과 비밀번호를 지정함
        - ex) 테이블명 @DBLink명
        - 송수신 서버 사용 여부 : X
    - DB Connection Pool(WAS, Web Application Server)
        - 수신 시스템 WAS에서 송신 시스템 DB로 연결되는 Connection Pool을 생성하고 
            프로그램 소스에서 WAS에 설정된 Connection Pool명을 참고해 구현함
        - ex) 송신 시스템 데이터 소스
        - 송수신 서버 사용 여부 : X
    - JDBC(Java Database Connectivity)
        - 자바에서 데이터베이스에 접속할 수 있도록 도와주는 자바 API
        - 수신 시스템의 Batch, Online 프로그램에서 JDBC 드라이버를 이용해 송신 시스템의 DB와 
            연결을 생성함
        - ex) JDBC:DBMS 제품명:DBMS 설치 서버 IP: Port:DB Instance명
        - 송수신 서버 사용 여부 : X
    - 화면 링크
        - 웹 애플리케이션 화면에서 하이퍼링크(Hyper Link)를 사용함
        - ex) <a herf="url"> Link 이름</a>
        - 송수신 서버 사용 여부 : X
    - API/Open API
        - 송신 시스템의 DB와 연결해 데이터를 제공하는 인터페이스 프로그램
        - ex) 제공하는 컴포넌트 이름, 데이터 처리, 메소드 이름(파라미터 1 ~ N)
        - 송수신 서버 사용 여부 : 세모
- 간접 연계
    - EAI(Enterprise Application Integration, 기업 애플리케이션 통합)
        - 기업 내 필요한 각종 애플리케이션 간에 상호 연동이 가능하도록 통합하는 솔루션
        - 송수신 데이터의 처리 및 현황을 감시하고 통제하는 도구
        - 실제 송수신 처리와 진행 현황을 모니터링 및 통제하는 EAI 서버, 송수신 시스템에 설치되는
            어댑터(Client)를 이용함
        - ex) 메타빌드, 비즈 마스터(Biz Master) 등
        - 송수신 서버 사용 여부 : O
    - Web Service/ESB
        - 웹 서비스가 설명된 WSDL과 SOAP 프로토콜을 이용한 시스템을 연계함
        - 미들웨어인 ESB에서 서비스(컴포넌트) 간 연동을 위한 변환 처리로 다중 플랫폼을 지원함
        - ex) WSDL, UDDI, SOAP, Service, ESB(Enterprise Service Bus)
        - 송수신 서버 사용 여부 : O
    - Socket
        - 소켓을 생성해 포트를 할당하고, 클라이언트의 요청을 연결해 통신하는 네트워크 프로그램의
            기반 기술
        - ex) TcpServer.listen();
        - 송수신 서버 사용 여부 : O
* REST(Representational State Transfer)
    - HTTP 프로토콜로 데이터를 전달하는 프레임워크
    - WWW와 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처의 한 형식
    - RESTful : REST 6가지 제약 조건의 시스템
        - REST 6가지 제약 조건
            - Iniform Interface(유니폼 인터페이스)
            - Stateless(상태정보 유지 안 함)
            - Cacheable(캐시 가능)
            - Self-descriptiveness(자체 표현 구조)
            - Client-Server Architecture
            - Layered System(계층화)
    - 웹에 최적화되어 있고, 데이터 포맷이 JSON이기 때문에 브라우저들 간에 호환성이 좋음
* SOAP(Simple Object Access Protocol)
    - 웹에서 HTTP, HTTPS, SMTP 등을 통해 XML 기반의 메시지를 컴퓨터 네트워크상에서 교환하는
        프로토콜
    - XML을 이용해 분산 처리 환경에서 정보 교환을 쉽게 할 수 있도록 도와줌
    - HTTP를 이용하기 때문에 다른 RPC에 비해 Proxy와 방화벽에 제약을 받지 않고 쉽게 통신이 가능함
    - HTTP뿐만 아니라 다른 전송 프로토콜도 이용할 수 있음
    - 플랫폼과 프로그래밍 언어에 독립적임
* SOA(서비스 지향 아키텍처, Service Oriented Architecture)
    - 대규모 컴퓨터 시스템을 구축할 때의 개념
    - 업무상의 일 처리에 해당하는 소프트웨어 기능을 서비스로 판단해 그 서비스를 네트워크상에 
        연동해 시스템 전체를 구축해 나가는 방법론
* ROA(자원 지향 아키텍처, Resource Oriented Architecture)
    - 소프트웨어 공학에서 ROA는 "RESTful" 인터페이스 자원의 형태로 소프트웨어를 설계 및
        개발을 위한 소프트웨어 아키텍처와 프로그래밍 패러다임의 스타일임
    - 이러한 리소스는 다른 용도로 재사용 될 수 있는 소프트웨어 구성요소
        (부호의 개별 조각 및/ 또는 데이터 구조)
    - 설계 원칙과 지침은 소프트웨어 개발 및 시스템 통합의 단계에서 사용됨

3) 연계 방식별 비교
- 직접 연계
    - 매개체 : X
    - 장점
        - 연계 및 통합 구현이 단순하고 쉬움
        - 소요 비용 및 기간이 짧고 중간 매개체가 없어 데이터 연계 처리 성능이 좋음
    - 단점
        - 시스템 간 결합도가 높아 시스템 변경에 민감함
        - 보안을 위한 암/복호화 처리, 비즈니스 로직 적용 등이 불가능함
        - 연계 및 통합 가능한 환경이 제한적임
- 간접 연계
    - 매개체 : O
    - 장점
        - 서로 다른 네트워크나 프로토콜 등 다양한 환경에서 연계 및 통합을 할 수 있음
        - 시스템 간 인터페이스 변경 시에도 장애나 오류 없이 서비스할 수 있음
        - 보안이나 업무 처리를 위한 로직을 자유롭게 반영할 수 있음
    - 단점
        - 연계 아키텍처 및 메커니즘이 복잡하고, 중간 매개체로 인해 성능 저하 가능성이 있음
        - 개발 및 적용을 위한 테스트 기간이 상대적으로 긺

4) 연계 메커니즘별 구현 주체, 산출물
- 송신
    - 연계 메커니즘
        - 연계 데이터 생성 및 추출
            - 관리 및 구현 주체 : 응용 시스템 별도 구현
            - 산출물 : 연계 프로그램, Log 테이블(파일)
        - 코드 매핑 및 데이터 변환
            - 관리 및 구현 주체 : 응용 시스템 별도 구현
            - 산출물 : 연계 프로그램, Log 테이블(파일), 코드 매핑 테이블
        - 인터페이스 테이블 또는 파일 생성
            - 관리 및 구현 주체 : 응용 시스템 별도 구현
            - 산출물 : 연계 프로그램, Log 테이블(파일), 인터페이스테이블(파일)
        - 전송
            - 관리 및 구현 주체 : 연계 솔루션
            - 산출물 : 연계 프로그램, Log 테이블(파일), 연계 서버 및 Adapter
        - 연계 서버 또는 송신 Adapter
            - 관리 및 구현 주체 : 연계 솔루션
            - 산출물 : 연계 프로그램, Log 테이블(파일), 연계 서버 및 Adapter
        - 로그 기록
            - 관리 및 구현 주체 : 응용 시스템 별도 구현, 연계 솔루션
            - 산출물 : 연계 프로그램, Log 테이블(파일), 연계 서버 및 Adapter
- 수신
    - 연계 메커니즘
        - 연계 서버 및 수신 Adapter
            - 관리 및 구현 주체 : 연계 솔루션
            - 산출물 : 연계 프로그램, Log 테이블(파일), 연계 서버 및 Adapter
        - 인터페이스 테이블 또는 파일 생성
            - 관리 및 구현 주체 : 연계 솔루션
            - 산출물 : 연계 프로그램, Log 테이블(파일), 연계 서버 및 Adapter
        - 코드 매핑 및 데이터 변환
            - 관리 및 구현 주체 : 응용 시스템 별도 구현
            - 산출물 : 연계 프로그램, Log 테이블(파일), 코드 매핑 테이블
        - 운영 DB에 연계 데이터 반영
            - 관리 및 구현 주체 : 응용 시스템 별도 구현
            - 산출물 : 연계 프로그램, Log 테이블(파일)
        - 로그 기록
            - 관리 및 구현 주체 : 응용 시스템 별도 구현, 연계 솔루션
            - 산출물 : 연계 프로그램, Log 테이블(파일), 연계 서버 및 Adapter