출제빈도 중

1) 개념
- 배치(Batch) : ETL 과정을 일정한 시간과 순서, 조건에 따라 수행하는 작업
- 배치 프로그램(Batch Program) : 특정 시간에 일련의 대량 작업을 일괄 처리하는 프로그램
    - ETL : 데이터를 추출(Extract)하거나 변환(Transformation), 적재(Load)하는 작업
- 배치 프로그램의 특징 : 대량의 데이터를 대상으로 특정 시간에 실행되는 일괄적 처리 방식
- 배치 프로그램을 통해 업무의 효율성을 높이고 비효율적인 시스템의 과부하를 줄일 수 있음
- 배치 프로그램은 사람의 개입 없이 주기적으로 특정 동작을 수행하도록 하는 프로그램 -> 회원의 휴면계정 관리, 업데이트 알림, 요금 청구, 급여 정산 등의 기능을 구현할 수 있음
- 배치 프로그램의 구분
    - 자동으로 수행되는 주기에 따라 정해진 시점에 실행되는 일반적인 '정기 배치'
    - 사용자의 수행 요청 시 바로 실행되는 '주문형(On-Demand) 배치'
    - 설정 조건이 충족되면 자동 실행되는 '이벤트성 배치'

2) 필수 요소
- 대용량 데이터 : 대용량의 데이터를 처리할 수 있어야 함
- 자동화 : 심각한 오류 상황 외에는 사용자의 개입 없이 동작해야 함
- 견고함 : 유효하지 않은 데이터의 경우에도 처리해 비정상적인 동작 중단이 발생하지 않아야 함
- 안정성 : 어떤 문제가 생겼는지, 언제 발생했는지 등을 추적할 수 있어야 함
- 성능 : 주어진 시간 내에 처리를 완료할 수 있어야 하고, 동시에 실행하고 있는 다른 애플리케이션을 방해하지 말아야 함

3) 배치 스케줄러(Batch Scheduler)
- 개념
    - 배치 프로그램이 특정 시간에 실행될 수 있도록 지원해주는 도구
- 종류
    - 스프링 배치(Spring Batch)
        - 2007년 Accenture와 Spring Source사가 공동개발한 오픈소스 프레임워크
        - 배치 처리를 위해 만들어진 프레임워크 -> 가볍고, 빠르고, 실행 도중 문제가 발생하면 그 지점부터 재시작(Restartability)할 수 있음
        - 스프링 프레임워크 기반으로 DI(의존성 개입), AOP(관점 지향 프로그래밍), 서비스 추상화의 스프링 프레임워크의 3대 요소를 모두 사용할 수 있는 대용량 처리 제공 스케줄러
        - 스프링 배치를 통해 Job과 Step을 기준으로 배치를 쉽게 수행하고, 대용량 데이터는 Chunk 지향 처리를 통해 편리하게 ETL 작업을 수행할 수 있음
        - 스프링 배치는 배치 실행에 관련한 모든 정보를 DB에 저장하고 참조하며 Job을 순차적으로 처리함
        - 스프링 배치의 핵심 기능 : 스프링 프레임워크 기반, 자체 제공 컴포넌트, 견고함과 안전성
        - 스프링 배치의 주요 컴포넌트
            - 컴포넌트(Component) : 프로그래밍의 한 부분 -> 재사용이 가능한 최소 단위
            - Job Repository : Job Execution 관련 메타 데이터를 저장하는 기반 컴포넌트
            - Job Launcher : Job Execution을 실행하는 기반 컴포넌트
            - Job : 배치 실행 단위를 의미하는 애플리케이션 컴포넌트
            - JPA(Java Persistence API) : 페이징 기능을 제공
            - Step : Job의 각 단계를 의미 -> Job은 일련의 연속된 Step으로 구성
            - Item : Data Source로부터 읽거나 Data Source로 저장하는 각 레코드를 의미
            - Chunk : 특정 크기를 갖는 아이템 목록을 의미
            - Item Reader : 데이터 소스로부터 아이템을 읽어들이는 컴포넌트
            - Item Processor : Item Reader로 읽어들인 아이템을 Item Writer를 사용해 저장하기 전에 처리하는 컴포넌트
            - Item Writer : Item Chunk를 데이터 소스에 저장하는 컴포넌트
    - 쿼트 스케줄러(Quartz Scheduler)
        - 스프링 프레임워크를 기반으로 하는 응용 애플리케이션의 배치 처리를 위한 스케줄러
        - 실행 작업(JobDetail)과 실행 스케줄을 정의하는 트리거(Trigger)를 분리해 유연성을 제공하는 오픈 소스 기반 라이브러리
        - 원하는 시간에 원하는 기능을 실행해 주는 쿼트 스케줄러는 기능을 안정적으로 실행할 수 있고 실행할 시간을 매우 유연하게 지정할 수 있음
        - 구성 요소
            - Scheduler : Quartz 실행 환경을 관리하는 핵심 개체
            - Job : 사용자가 수행할 작업을 정의하는 인터페이스로서 Trigger 개체를 이용해 스케줄 가능
            - JonDetail : 작업명과 작업 그룹과 같은 수행할 Job에 대한 상세 정보를 정의하는 개체
            - Trigger : 정의한 Job 개체의 실행 스케줄을 정의하는 개체 -> Scheduler 개체에게 Job 수행 주기를 알려주는 개체
        - 스프링 스케줄러 구현은 쿼트 스케줄링 객체를 사용하는 방법과 xml 설정을 통해 구현하는 방법과 어노테이션(@)을 사용하는 방법이 있음
            - 어노테이션 사용 방법 : 주기적으로 실행할 메소드에 @Scheduled 어노테이션을 통해 배치 간격을 설정함
            - cron 속성을 설정하거나, fixedDelay 속성 또는 fixedRate 속성을 밀리세컨드(밀리초, ms)로 설정함
                - fixedDelay : 이전에 실행된 Job의 종료시간을 기준으로 지정된 시간(ms)만큼 지난 후 Job을 실행
                - fixedRate : 이전에 실행된 Job의 시작시간을 기준으로 지정된 시간(ms)만큼 지난 후 Job을 실행
    - 크론 표현식(UNIX Cron Expression)
        - 크론 : 유닉스 계열의 운영체제에서 작업 스케줄링 프로세스
        - 유닉스와 리눅스의 스케줄링 작업뿐만 아니라 서버 프로그램의 배치 스케줄러를 개발할 때도 크론 표현식을 사용함
        - 스프링 스케줄러 구현 시 리눅스의 스케줄러 도구인 크론탭(crontab)과 유사한 cron의 표현식을 사용함
        - 크론 표현식 : 7개의 단위로 구분된 문자열 -> 스케줄러의 정규 표현식
            - 각 단위는 공백("")으로 구분되며 초, 분, 시 등으로 세분화됨
            - 스케줄러를 실행시키기 위해 작업이 실행되는 시간 및 주기 등을 설정하는데 사용함
        - 형식 : 초 분 시 일 월 요일 년도
            - 초(Seconds) : 0 ~ 59
            - 분(Minutes) : 0 ~ 59
            - 시(Hours) : 0 ~ 23
            - 일(Day-of-Month) : 1 ~ 31
            - 월(Months) : 1 ~ 12 또는 JAN ~ DEC
            - 요일(Day-of-Week) : 0 ~ 6 또는 SUN ~ SAT
            - 년도(Year)(생략 가능) : 1970 ~ 2099