출제빈도 상

1) 프레임워크(Framework)에 대한 개념
- 프레임워크 : 틀, 규칙, 법칙 + 작업 => 작업에 대한 규칙을 정하는 일
- 랄프 존슨(Ralph Johnson)의 프레임워크 : '소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 일련의 협업화된 형태로 클래스들으리 제공하는 것;
- 소프트웨어 프레임워크(애플리케이션 프레임워크) : 프로그래밍에서 특정 운영체제를 위한 응용 프로그램 표준 구조를 구현하는 클래스와 라이브러리의 모임
- 효율적인 정보 시스템 개발을 위한 코드 라이브러리, 애플리케이션 인터페이스, 설정 정보 등의 집합 -> 재사용이 가능하도록 공통적인 개발 환경인 기본 뼈대를 제공해 주는 것
- 광의적으로 정보 시스템의 개발 및 운영을 지원하는 도구 및 가이드 등을 포함함
- 목적에 따라 효율적으로 구조를 마련해 놓은 개발 방식

2) 프레임워크의 특징
- 모듈화(modularity)
    - 프레임워크는 인터페이스에 의한 캡슐화를 통해 모듈화를 강화하고 설계화 구현의 변경에 따르는 영향을 극소화해 소프트웨어의 품질을 향상시킴
- 재사용성(reusability)
    - 프레임워크가 제공하는 인터페이스는 반복적으로 사용할 수 있는 컴포넌트를 정의할 수 있게 해 재사용성을 높여 줌
    - 프레임워크 컴포넌트를 재사용하느 것은 소프트웨어의 품질을 향상시킬 뿐만 아니라 개발자의 생산성도 높여 줌
- 확장성(extensibility)
    - 프레임워크는 다형성(polymorphism)을 통해 애플리케이션이 프레임워크의 인터페이스를 확장할 수 있게 함
    - 프레임워크 확장성은 애플리케이션 서비스와 특성을 변경하고 프레임워크를 애플리케이션의 갑녀성으로부터 분리함으로써 제사용성의 이점을 얻게 함
- 제어의 역흐름(inversion of control)
    - 프레임워크 코드가 전체 애플리케이션의 처리 흐름을 제어해 특정한 이벤트가 발생할 떄 다형성을 통해 애플리케이션이 확장한 메소드를 호출함으로써 제어가 프레임워크로부터 애플리케이션으로 거꾸로 흐르게 함
- 웹 서버 프레임워크의 주요 종류
    - 웹 서버 프레임워크 : 동적인 웹 페이지나 웹 서비스를 개발하는 과정에서 DB 연동, 템플릿 지원, 코드 재사용 등을 지원하는 것을 목적으로 하는 프레임워크
    - 웹 애플리케이션 구축 아키텍처는 대부분 MVC(모델-뷰-컨트롤러) 모델을 이용해 사용자 인터페이스를 백엔드로 분리해 개발함
        기반        프레임워크                  설명
        CLI         ASP.NetBeans                MS가 개발한 동적인 웹 사이트, 웹 애플리케이션, 웹 서비스 개발을 지원하는 웹 애플리케이션 프레임워크
        PHP         CodeIgniter(코드이그나이터) 간편한 인터페이스와 논리적인 구조로 서버 지원을 최소화한 프레임워크
                    Laravel(라라벨)             오픈소스 웹 프레임워크 -> MVC 아키텍처와 모듈 방식의 패키징 시스템으로 가장 대중적인 PHP 프레임워크
        Java        Spring(스프링)              자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크 -> 공공기관의 웹 서비스 개발 시 사용을 권장하는 전자정부 표준 프레임워크
                    struts(스트럿츠)            자바 기반의 JSP만을 위한 오픈소스 프레임워크
        JavaScript  Vue.js                      반응형 및 구성 가능한 뷰 구성요소를 제공해 단순한 사용자 인터페이스를 구축하는 데 사용되는 프레임워크
                    React.js                    페이스북에서 개발하는 대화형 사용자 인터페이스를 구축하는 선언적이고 동적이며 유연한 프레임워크
                    Angualr.js                  데이터 중심적, 테스트 주도적, 선언적 HTML의 특징을 가지고 사용자 환경에서 쉽고 빠르게 HTML 어휘를 확장 가능한 프레임워크
        Python      Django(장고)                고도의 데이터베이스 기반 웹 사이트를 작성하는 데 용이하며 강력한 라이브러리를 제공하지만 모바일 환경 구현이 어려운 프레임워크
        Ruby        Ruby on Rails               데이터베이스를 이용한 웹 애플리케이션을 개발할 때 반복되는 코드를 대폭 줄여 개발 시간이 단축 가능한 오픈소스 프레임워크
                    (루비 온 레일즈)

3) 데이터 저장 계층 도는 영속 계층(Persistence Layer)
- Persistence Layer
    - 데이터 저장 계층 또는 영속 계층
    - 영구 저장소인 데이터베이스에 데이터를 영구 처리하는 계층
- DAO/DTO/VO는 영속 계층에서 사용되는 특정 패턴을 통해 구현되는 Java Bean
    - Java Bean(자바 빈)
        - 데이터를 표현하는 것을 목적으로 하는 Java의 재사용 가능한 클래스
        - 반복적인 작업을 효율적으로 하기 위해 생성해 사용함
            -> 디폴트 생성자가 반드시 존재, 직렬화 가능, Getter와 Setter 메소드 제공
- 영속 계층의 객체 종류
    - DAO(Data Access Object)
        - 데이터베이스의 데이터를 접근(Access)하는 트랜잭션 객체 -> 데이터를 조회하거나 조작하는 기능 전담
        - 데이터베이스에 연결해 입력, 수정, 삭제, 조회 등의 작업을 하는 클래스1
        - 애플리케이션 호출을 데이터 저장 부분에 매핑함으로써 DAO는 데이터베이스의 세부 내용을 노출하지 않고 특정 데이터 조작 기능을 제공
    - DTO(Data Transfer Object)
        - 프로세스 사이에서 데이터를 전송하는 객체를 의미하는 계층 간 데이터 교환을 위한 자바 빈즈
        - 많은 프로세스 간의 커뮤니케이션이 원격 인터페이스에 의해 이루어지기 때문에 전송될 데이터를 모으는 DTO를 이용해 한 번만 호출하게 함
        - DTO는 스스로의 데이터를 저장 및 회수하는 기능을 제외하고 아무 기능도 가지고 있지 않다는 것이 DAO와의 차이점
        - 순수한 데이터 객체이며 속성과 그 속성에 접근하기 위한 Getter와 Setter 메소드만 가진 클래스
            - 필수사항 : 속성은 private 접근, public Getter/Setter 메소드
    - VO(Value Object)
        - 간단한 독립체(Entity)를 의미하는 작은 객체
        - 가변 클래스인 DTO와 다르게 Getter 기능(Read Only 속성)만 제공하는 불변 클래스를 만들어서 사용

4) 소프트웨어 개발 보안
- SW 개발 과정에서 개발자의 실수, 논리적 오류 등으로 인해 SW에 내포될 수 있는 보안 취약점(vulnerability)의 원인, 즉 보안 취약점(weakness)을 최소화, 사이버 보안 위협에 대응할 수 있는 안전한 SW를 개발하기 위한 일련의 보안 활동
- 소프트웨어 개발 보안 가이드의 구성(Java 시큐어 코딩 가이드의 점검 항목)
    - 입력 데이터 검증 및 표현
        - 프로그램 입력값에 대한 검증 누락 또는 부적절한 검증, 데이터의 잘못된 형식 지정으로 인해 발생할 수 있는 보안 약점
        - SQL 삽입, 자원 삽입, 크로스 사이트 스크립트 등 26개
    - 보안 기능
        - 보안 기능(인증, 접근 제어, 기밀성, 암호화, 권한 관리 등)을 적절하지 않게 구현 시 발생할 수 있는 보안 약점
        - 부적절한 인가, 중요 정보 평문 저장(또는 전송) 등 24개
    - 시간 및 상태
        - 동시 또는 거의 동시 수행을 지원하는 병렬 시스템, 하나 이상의 프로세스가 동작하는 환경에서 시간 및 상태를 부적절하게 관리해 발생할 수 있는 보안 약점
        - 경쟁 조건, 제어문을 사용하지 않는 재귀 함수 등 7개
    - 에러 처리
        - 에러를 처리하지 않거나, 불충분하게 처리해 에러 정보에 중요 정보(시스템 등)가 포함될 떄 발생할 수 있는 보안 약점
        - 취약한 패스워드 요구 조건, 오류 메시지를 통한 정보 노출 등 4개
    - 코드 오류
        - 타입 변환 오류, 자원(메모리 등)의 부적절한 반환 등과 같이 개발자가 범할 수 있는 코딩 오류로 인해 유발되는 보안 약점
        - 널 포인터 역참조, 부적절한 자원 해제 등 7개
    - 캡슐화
        - 중요한 데이터 도는 기능성을 불충분하게 캡슐화하였을 때 인가되지 ㅇ낳는 사용자에게 데이터 누출이 가능해지는 보안 약점
        - 제거되지 않고 남은 디버그 코드, 시스템 데이터 정보 노출 등 8개
    - API 오용
        - 의도된 사용에 반하는 방법으로 API를 사용하거나, 보안에 취약한 API를 사용해 발생할 수 있는 보안 약점
        - DNS Lookup에 의존한 보안 결정, 널 매개 변수 미조사 등 7개

5) 서버 프로그램 구현 절차
- 세부 업무 프로세스를 기반으로 업무 프로그램을 서버 영역(Back End)과 화면 영역(Front End)으로 구분해 구현함 -> 순서에 상관없기 구현해도 됨
    - 업무 프로그램을 구현하기 위한 I/O 오브젝트(DTP/VO)를 정의함
    - 업무 프로그램을 구현하기 위한 Data를 준비함
    - 업무 프로그램을 구현하기 위한 SQL을 작성함
    - 데이터 접근 객체(DAO)를 구현함
    - Java 시큐어 코딩 가이드에 의한 보안 취약성을 제거하는 코드를 구현함
    - 컨트롤러(Controller) 클래스를 구현함

6) 서버 프로그램 테스트
- 소프트웨어 테스트
    - 구현된 애플리케이션이나 시스템이 사용자의 요구사항을 만족시키는지 확인하기 위해 기능 및 비기능 요소의 결함을 찾아내는 활동
- 소프트웨어 테스트의 원칙
    - 개발자가 자신이 개발한 프로그램 및 소스코드를 테스팅하지 않음
        - 일반적으로 개발자가 자신이 개발한 소스코드를 자신이 테스팅을 할 경우 결함을 발견하는 것이 쉬운 일이 아님
    - 효율적인 결함 제거 법칙 사용(낚시의 법칙, 파레토의 법칙)
        - 효율적으로 결함을 발견, 가시화, 제거, 예방의 순서로 해 정량적으로 관리할 수 있어야 함
        - 낚시의 법칙 : 낚시처럼 소프트웨어 제품의 결함도 특정 기능, 모듈, 라이브러리에서 결함이 많이 발견된다는 법칙
        - 파레토의 법칙 : 소프트웨어 제품에서 발견되는 전체 결함의 80%는 소프트웨어 제품의 전체 기능 중 20%에 집중되어 있음
    - 완벽한 소프트웨어 테스팅은 불가능함
        - 단순한 애플리케이션이라도 테스트 케이스의 수는 무한대로 발생되기 때문에 완벽한 테스트는 불가능함
    - 테스트는 계획 단계부터 해야 함
        - 소프트웨어 테스트는 결함의 발견이 목적이긴 하지만 개발 초기 이전인 계획 단계에서부터 할 수 있다면 결함을 예방할 수 있음
    - 살충제 패러독스(Pesticide Paradox)
        - 동일한 테스트 케이스로만 반복 실행하면 더 이상 새로운 결함을 발견할 수 없으므로 주기적으로 테스트 케이스를 점검하고 개선해야 함
    - 오류-부재의 궤변(Absence of Errors Fallacy)
        - 사용자의 요구사항을 만족하지 못한다면 오류를 발견하고 제거해도 품질이 높다고 말할 수 없음
- 소프트웨어 테스트의 명세
    - 테스트가 완료되면 테스트 계획과 테스트 케이스 설계부터 단계별 테스트 시나리오, 테스트 결과까지 모두 포함된 문서를 일관성 있게 작성함
    - 테스트 계획, 소요 비용, 테스트 결과에 의한 판단 가능한 대상 소프트웨어의 품질 상태를 포함한 요약 문서를 작성함
    - 품질 상태는 품질 지표인 테스트 성공률, 발생한 결함의 수와 결함의 중요도, 테스트 커버리지 등이 포함됨
    - 테스트 결과서는 결함에 관련된 내용을 중점적으로 기록하며, 결함의 내용, 결함의 재현 순서를 상세하게 기록함
    - 단계별 테스트 종료 시 테스트 실행 절차를 리뷰하고 결과에 대한 평가를 수행하며, 그 결과에 따라 실행 절차를 최적화해 다음 테스트에 적용함