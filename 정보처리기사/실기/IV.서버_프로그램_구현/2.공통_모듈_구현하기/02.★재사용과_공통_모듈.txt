출제빈도 중
빈출태그 : 소프트웨어 재사용 / 공통 모듈

1) 소프트웨어 재사용(Software Reusability)의 개념
- 이미 개발되어 그 기능, 성능 및 품질을 인정받았던 소프트웨어의 전체 또는 일부분을 다시 사용해
    새로운 시스템을 개발하는 기법
    - 재사용의 장점 : 개발 시간 및 비용 감소, 품질 향상, 생산성 향상, 신뢰성 향상,
        구축 방법에 대한 지식의 공유, 프로젝트 실패 위험 감소
- 재사용을 통해 유사한 정보 시스템 개발 시간 및 비용을 절감해 생산성을 증가시킬 수 있음
- 재사용될 공통 모듈에 대해서는 관련 프로젝트 문서가 사전에 공유되어야 함
- 모듈의 크기가 작고 일반적으로 설계된 모듈일수록 재사용률이 높음
- 재사용의 범위에 따른 분류
    - 함수와 객채 : 클래스(Class)나 함수(Function) 단위로 구현된 소스코드를 재사용
    - 컴포넌트 : 컴포넌트의 인터페이스를 통해 통신해 컴포넌트 단위로 재사용
        - 컴포넌트의 4가지 특징
            - 독립적인 동작
            - 구현, 명세화, 패키지화, 배포 가능
            - 하나 이상의 클래스들로 구성
            - 인터페이스를 통해서만 접근 가능
    - 애플리케이션 : 공통된 기능을 제공하도록 구현된 애플리케이션과의 통신으로 기능을
        공유해 재사용
- 재사용 방식의 발전 방향
    - 시스템 개발의 생산성과 성능, 효과적인 유지보수 지원을 위한 재사용성 극대화를 위해
        발전해 왔으며 궁극적으로 프레임워크가 등장하게 되었음
    - 소스 재사용 -> 재사용 메소드 -> 재사용 객체 -> 디자인 패턴 -> 프레임워크
        - 프레임워크(Framework) : 소프트웨어 개발에 도움을 주는 재사용 가능한 디자인 패턴 및
            소스코드의 집합

2) 공통 모듈(Common Module)
- 공통 모듈의 개념
    - 공통 모듈은 시스템 구축 시 여러 하위 시스템에서 재사용되는 독립된 모듈
    - 시스템 구축 시 각 서브 시스템에서 공통으로 자주 사용하는 기능들을 하나의 패키지로 묶어
        공통 모듈로 개발을 진행하면 개발 생산성을 높일 수 있음
    - 공통 모듈을 재사용하면 서브 시스템의 기능에 대한 정합성이 보장되고 중복 개발을 줄일 수
        있으며, 유지보수가 편리함
    - 공통 모듈을 재사용을 통해 모듈 간 표준화가 보장되며 소프트웨어의 품질도 샹항시킬 수 있음
- 공통 모듈 명세 작성 원칙
    - 정확성 : 실제 시스템 구현 시 필요한지 여부를 알 수 있도록 정확하게 작성
    - 명확성 : 해당 기능에 대한 일관된 이해와 하나로 해석될 수 있도록 작성
    - 완전성 : 시스템의 구현 시 요구사항과 필요한 모든 것을 기술
    - 일관성 : 공통 기능 사이에 충돌이 발생하지 않도록 작성
    - 추적성 : 해당 기능에 대한 유의사항의 출처와 관련 시스템 등 유기적 관계에 대한 식별이
        가능하도록 작성
- 공통 모듈의 구현 형태
    - 클래스 : 공통 모듈이 존재할 수 있는 가장 기본적인 형태
    - 라이브러리 : 클래스의 묶음으로 클라이언트 소프트웨어가 일방적으로 호출함
    - 컴포넌트 : 라이브러리가 체계화된 형태의 소프트웨어
    - 프레임워크 : 여러 기능을 하는 클래스/컴포넌트들이 서로 유기적인 관계를 맺은 형태
        -> 클라이언트 소프트웨어가 호출하기도 하고 호출을 당하기도 함
- 공통 모듈 구현 순서 - 2000p 그림
    - 공통 모듈의 상세 설계를 기반으로 작성해야 할 공통 모듈을 확인 후, 공통 모듈의 상세 설계
        산출물을 기반으로 공통 모듈을 구현함
    - 공통 모듈 상세 설계를 기반으로 한 공통 모듈 구현 순서