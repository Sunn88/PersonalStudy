1) 생명주기
- 소프트웨어 생명주기(Software Life Cycle)
    - 소프트웨어 제품의 개념 형성에서 시작해 운용/유지보수에 이르기까지의 변화의 모든 과정
    - 일반적인 소프트웨어 생명주기 : 타당성 검토 -> 개발 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 운용 -> 유지보수
- 소프트웨어 생명주기의 역할
    - 프로젝트의 비용 산정과 개발 계획을 수립할 수 있는 기본 골격
    - 용어의 표준화를 가능하게 함
    - 문서화가 충실한 프로젝트 관리를 가능하게 함
    - 소프트웨어 생명주기의 단계(공정) : 타당성 검토 -> 개발 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트
2) 생명주기 모형의 종류
- 폭포수 모형(Waterfall Model)
    - Bohem이 제시한 고전적 생명주기 모형
    - 소프트웨어 개발 과정의 각 단계가 순차적으로 진행되는 모형
    - 선형 순차적 모델이라고도 함
    - 개발 단계
        - 타당성 검사 : 시스템을 개발하는 것이 타당한지를 검사하는 단계
        - 계획 : 추진 방안을 제시하고 개발 비용, 소요 기간, 인력 등 개발 계획을 수립하는 단계
        - 요구분석 : 시스템의 기능, 성능, 환경 등의 요구사항을 면밀히 분석하는 단계
        - 기본 설계 : 하드웨어, 소프트웨어, 제어 구조, 자료 구조 등의 설계를 작성하는 단계
        - 상세 설계 : 각 단위 프로그램의 제어, 자료 구조와 인터페이스를 상세히 작성하는 단계
        - 구현 : 설계된 문서를 통해 실제 컴퓨터가 작동할 수 있는 코드로 변환하는 단계
        - 시험(검사) : 구현한 프로그램을 테스트하여 요구조건에 맞는지 확인하는 단계
        - 운용 : 실제 시스템에 적용해 실행되는지 확인하는 단계
        - 유지보수 : 개발 후 발생하는 문제점이나 수정 사항을 적용하는 단계 -> 가장 많은 비용이 소모됨
    - 장점
        - 적용 경험과 성공 사례가 많음
        - 단계별 정의가 분명하고, 전체 구조의 이해가 용이함
        - 단계별 산출물이 명확함
    - 단점
        - 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움
        - 두 개 이상의 과정이 병행 수행되거나 이전 단계로 넘어가는 경우가 없음
        - 이전 단계의 오류 수정이 어려움
- 프로토타입 모형(Prototype Model)
    - 실제 개발될 시스템의 견본(Prototype)을 미리 만들어 최종 결과물을 예측하는 모형
    - 개발 완성 후 문제점을 알 수 있는 폭포수 모형의 단점 보완
    - 개발 단계 : 요구 수집 -> 빠른 설계 -> 프로토타입 구축 -> 고객 평가 -> 프로토타입 조정 -> 구현
    - 장점
        - 프로토타입은 발주자나 개발자 모두에게 공동의 참조 모델을 제공함
        - 프로토타입은 구현 단계의 골격이 될 수 있음
        - 