출제빈도 상
- 소프트웨어 개발 보안, 소프트웨어 개발 보안 적용 사례, 법률 검토

1) 소프트웨어 개발 보안
- SW 개발에 생명 주기 단계별로 보안 취약점 등을 분석해 외부의 해킹 등을 SQ 개발 단계에서 미리 제거해 보안 요소를 만족하는 소프트웨어를 개발 운영하기 위한 목적으로 수행되는 개발 방법
- 소프트웨어 개발 보안 요구공학 프로세스
    - 요구사항 도출
        - 제안서나 계약서, 과업지시서, 회으록, 사업 수행 계획서가 주로 참조해 조직 이해관계자의 상호의견을 조율하고, 협의를 통해 수집괸 요구사항을 정제하고 내용별로 분류함
    - 요구사항 분석
        - 비용 효율적인 면을 고려하고 보안 요구사항의 제약 조건을 판별해 기술/비용적으로 당장 구현이 핌들더라도 비슷한 대안을 제시할 수 있다면 의견 제시로 보안 요구사항 분석서에 기술함
    - 요구사항 명세
        - 보안 요구사항을 알아보기 쉽도록 명세화하는 과정
        - 보안 요구사항의 분석서를 통해 요구사항 정의서가 도출되는데, 개발 시스템의 목표 기술과 기능과 비기능적 요구사항을 명세함
    - 요구사항 확인과 검증
        - 이해관계자들에게 요구사항이 맞는지 확인하고 검증하는 과정
        - 이해관계자들의 지식과 조직의 성숙도, 소프트웨어 개발 보안 요구사항 문서, 조직의 표준을 참고해 보안 요구사항 문제 보고서를 작성
        - 검증 : 작성된 보고서를 경영진 또는 중간관리자에게 승인을 받아 내용을 확정하는 것
            - 보고서의 문서화의 정도, 내용의 명확성, 간결성, 구현 가능성, 문제가 없는지, 테스트 가능 여부, 추적 가능성 등의 요소를 만족하는 코드 체계인지 검토 후 검증

2)소프트웨어 개발 보안의 요구사항 관리
- 서버 보안 요구사항은 비즈니스 환경 변화 또는 시간의 흐름에 따라 변경될 수 있으므로 지속적으로 갱신해야 함
- 보안 요구사항 추적 매트릭스를 통해 요구사항 관리

3) 소프트웨어 개발 보안 방법론의 개념
- 기존의 소프트웨어 개발 방법론이 적용된 프로젝트에서 안전한 소프트웨어 개발에 요구되는 보안 활동들을 적용하는 개발 방법
- SDLC(Software Developmentt Life Cycle, 소프트웨어 개발 생명 주기)에 걸쳐 추가되는 보안 활동
    - 요구사항 분석
        - 요구사항 중 보안 항목 식별
        - 요구사항 명세서
    - 설계
        - 위협원 도출을 위한 위협 모델링
        - 보안 설계 검토 및 보안 설계서 작성
        - 보안 통제 수립
    - 구현
        - 표준 코딩 정이서 및 소프트웨어 개발 보안 가이드를 준수해 개발
        - 소스코드 보안 약점 진단 및 개선
    - 테스트
        - 모의 침투 테스트 또는 동적 분석을 통한 보안 취약점 진단 및 개선
    - 유지보수
        - 지속적인 개선 및 보안 패치

4) SDLC 보안 적용 사례
- MS-SDL(Microsoft-Secure Development Lifecycle)
    - 마이크로소프트사에서 보안 수준이 높은 안전한 소프트웨어를 개발하기 위해 수행한 프로세스 개선 작업
    - 자체 수립한 SDL 방법론 적용
        - 교육
            - 소프트웨어 개발 보안 교육
            - 안전 설계, 위협 모델링, 시큐어 코딩, 보안 테스팅, 프라이버시 관련 보안 교육
        - 계획/분석
            - 소프트웨어의 질과 버그 경계 정의
            - 보안과 프라이버시 위험 분석
        - 설계
            - 공격 영역 분석
            - 위협 모델링
        - 구현
            - 도구 명세
            - 금지된 함수 사용 제한
            - 정적 분석
        - 시험/검증
            - 동적/퍼징 테스팅
            - 공격 영역/위협 모델 검증
        - 배포/운영
            - 사고 대응 계획
            - 최종 보안 검토
            - 기록 보관
        - 대응
            - 사고 대응 수행
- Seven Touch points
    - 소프트웨어 보안의 모범 사례를 SDLC에 통합한 개발 보안 방법론
    - 공통 위험 요소를 파악하고 이해하며, 보안을 설계하고 모든 소프트웨어 산출물에 대해 철저하고 객관적인 위험 분석 및 테스트를 거쳐 안전한 소프트웨어를 만들어내는 방법 정의
    - SDLC의 각 단계에 7개의 보안 강화 활동을 집중적으로 관리하도록 개발자에게 요구함
        - 악용 사례, 보안 요구사항, 위험 분석, 위험 기반 보안 테스트, 코드 검토, 침투 테스트, 보안 운영
- CLASP(Comprehensive Lightweight Application Security Process)
    - SDLC 초기 단계에 보안 강화를 목적으로 하는 정형화된 개발 보안 프로세스
    - 활동 중심의 프로세스와 역할 기반의 프로세스로 구성된 집합체
    - 안전한 소프트웨어를 개발하기 위해 개념 관점, 역할 기반 관점, 활동 평가 관점, 활동 구현 관점, 취약성 관점 등 5가지 관점에 따라 개발 보안 프로세스를 수행함
        - 개념 관점
            - CLASP 구조와 CLASP 프로세스 컴포넌트 간의 종속성을 제공함
            - CLASP 프로세스 컴포넌트들의 상호작용 방법과 취약성 관점을 통해 역할 기반 관점에 적용하는 방법을 기술함
        - 역할 기반 관점
            - 24개의 보안 관련 CLASP 활동들에 요구되는 각 역할을 창출해 활동 평가 관점, 활동 구현 관점, 취약성 관점에서 사용함
        - 활동 평가 관점
            - 활동 평가 관점, 활동 구현 관점, 취약성 관점에서의 적합성과 관련해 보안 관련 CLASP 활동들에 대한 타당성을 평가함
        - 활동 구현 관점
            - 활동 평가 관점에서 선택한 24개의 보안 관련 CLASP 활동들을 수행함
        - 취약성 관점
            - 문제 타입에 대한 솔루션을 활동 평가 관점, 활동 구현 관점으로 통합함

5) 정보 보안의 3대 요소
- 기밀성(Confidentially)
    - 인가된 사용자만 정보 자산에 접근할 수 있음
    - 일반적인 보안의 의미와 가장 가까움
    - 방화벽, 암호, 패스워드 등이 대표적인 예
    - 신분 위장(Masquerading) 등과 같은 공격 때문에 위협받을 수 있음
- 무결성(Integrity, 완전성)
    - 시스템 내의 정보는 오직 인가된 사용자가 인가된 방법으로만 수정할 수 있음
    - 변경, 가장, 재전송 등과 같은 공격 때문에 위협받을 수 있음
- 가용성(Availability)
    - 사용자가 필요할 때 데이터에 접근할 수 있는 능력
    - 목표 : 인가된 사용자가 조직의 정보 자산에 적시에 접근해 업무를 수행할 수 있도록 유지하는 것
    - 가용성을 유지하기 위해 데이터 백업, 위협 요소 제거 등의 기술을 사용할 수 있음
    - 서비스 거부(Denial of Service) 등과 같은 공격 때문에 위협받을 수 있음

6) 소프트웨어 개발 보안의 위협, 자산, 취약점 개념도
- 자산 : 서버의 하드웨어나 소프트웨어와 같이 기업 내부의 데이터 또는 시스템 소유자가 가치를 부여하는 대상
- 위협원(Threat agents) : 해커와 내외부에 비인가 임직원, 단체, 자연재해 등 조직 자산을 파괴해 손해를 유발할 수 있는 대상
- 위협(Threat) : 위협원의 실제적 공격 행동을 의미함
- 취약점(Vulnerability) : 평문 전송, 입력값 미검증, 비밀번호 공유 등 위협을 유발할 수 있는 시스템 내부의 상황
- 위험(Risk) : 위협원이 공격 대상 시스템의 취약점을 분석해 위협 행동을 통해 시스템 내부에 나쁜 영향의 결과를 가져올 확률과 영향도를 의미함

7) 법률적 검토
- 내/외부 환경을 분석해 보안 항목을 분류하고 분석해 규제와 컴플라이언스 이슈 제거를 위한 항목을 식별해야 함
- 정보보호 관련 법규를 확인해 관련 보안 위협요소를 검토하고 법규 및 규정에 맞는 보안을 적용하도록 함
- 소프트웨어 개발 보안 관련 기관
    - 행정안전부 : 보안 정책 총괄
    - 한국인터넷진흥원(KISA) : 개발 보안 정책 및 가이드 개발
        - 소프트웨어 개발 보안에 관련된 기관
        - 소프트웨어 개발 보안 정책 가이드를 개발하고 소프트웨어 개발 보안에 관한 기술을 지원, 교육, 자격제도 운영 등을 수행하는 기관
    - 발주기관 : 개발 보안의 계획을 수립
    - 사업자 : 개발 보안 관련 기술 수준 및 적용 계획 명시
    - 감리법인 : 감리 계획을 수립하고 협의

8) 개발 보안 활동 관련 법령
- 개인정보 보호법
    - 개인정보 처리 과정상의 정보 주체와 개인정보 처리자의 권리, 의무 등을 검토해 소프트웨어 개발 요구사항에 반영함
- 정보통신망 이용 촉진 및 정보보호 등에 관한 법률
    - 정보통신망을 통한 개인정보 자료의 수집, 처리, 보관, 이용에 관한 규정을 검토해 소프트웨어 개발 요구사항에 충분히 반영함
    - 검토할 사항
        - 개인정보의 보호조치 시행령 제15조 분석
        - 개인정보의 보호조치 법률 제28조 분석
- 신용정보의 이용 및 보호에 관한 법률
    - 개인 신용정보의 취급 단계별 보호조치 및 의무사항에 관한 규정을 검토해 소프트웨어 개발 요구사항에 충분히 반영함
- 위치정보의 보호 및 이용 등에 관한 법률
    - 개인 위치정보 수집, 이용, 제공 파기 및 정보 주체의 권리 등이 규정을 검토해 소프트웨어 개발 요구사항에 충분히 반영함
- 표준 개인정보 보호 지침
    - 조직의 표준 개인정보 지침은 개인정보 취급자와 개인정보 처리자가 준수해야 하는 개인정보의 처리에 관한 기준을 준수하고, 개인정보 침해의 유형 및 예방조치 등에 관한 세부사항 규텅을 검토해 소프트웨어 개발 요구사항에 충분히 반영함
- 개인정보의 안전성 확보 조치 기준
    - 개인정보가 분실, 도난, 유출, 변조, 훼손되지 않도록 안전성을 확보하기 위해 취해야 하는 세부적인 기준 규정과 개인정보 위험도 분석 기준과 개인정보 처리 시스템의 보호 수준을 진단
    - 암호화에 상응하는 조치 필요 여부를 판단할 수 있는 기준 규정을 검토해 소프트웨어 개발 요구사항에 충분히 반영함
- 개인정보 영향평가에 관한 고시
    - 공신력 있는 평가기관의 지정 및 영향평가의 절차 등에 관한 세부 기준 규정을 검토해 개인정보의 영향평가 수행을 위해 소프트웨어 개발 요구사항에 충분히 반영함

9) 소프트웨어 개발 요구사항 관련 특정 정보통신 기술 관련 규정/법률
- RFID 프라이버시 보호 가이드라인
- 위치정보의 보호 및 이용 등에 관란 법률
- 위치정보의 관리적, 기술적 보호조치 권고 해설서
- 바이오 정보 보호 가이드라인
- 뉴미디어 서비스 개인정보보호 가이드라인

10) 취약점 점검 계획서, 명세서 검토
- 취약점 점검 계획서
    - 취약점 점검 활동의 범위, 접근 방법, 자원, 일정 등에 대해 정의됨
- 취약점 점검 설계 명세서
    - 취약점 점검 접근 방법을 상세회하고, 설계 시 포함된 특성과 해당 특성에 대한 취약점 점검 활동, 취약점 점검 케이스 및 취약점 점검 절차 등을 확인할 수 있음
- 취약점 점검 케이스 명세서
    - 실제 입력값과 예상 출력 결과를 문서화한 것 -> 취약점 점검 절차상의 제약사항을 확인할 수 있음
- 취약점 점검 절차 명세서
    - 관련 취약점 점검 설계 시, 정의된 취약점 점검 케이스를 수행하고 계획별로 따라야 하는 내용과 외부 환경의 상세 내용을 식별하고 시스템을 운영하기 위한 모든 단계를 확인할 수 있음
- 취약점 점검 목록 분석
    - 과거 취약점 점검 활동에서 사용했던 체크리스트나 점검 목록을 분석해 식별할 수 있는 장점이 있음
- 가정 분석
    - 취약점 점검은 결과에 대한 가정을 바탕으로 계획을 세우기 때문에 가정이 부정확하거나 불일치, 불완전할 경우 취약점 점검 실패가 발생할 수 있음
- 도식화 기법
    - 조직 업무 프로세스, 인과 관계도, 시스템 또는 프로세스 흐름도, 영향 관계도를 통해 취약점 점검 환경 분석을 수행함