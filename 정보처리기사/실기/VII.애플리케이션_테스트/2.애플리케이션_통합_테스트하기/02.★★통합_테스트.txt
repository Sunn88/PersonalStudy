출제빈도 상
- 통합 테스트, 빅뱅 통합, 상향식/하향식 통합

1) 단위 테스트(Unit Test)
- 소프트웨어 최소 기능 단위인 모듈, 컴포넌트를 테스트하는 것
- 사용자의 요구사항을 기반으로 한 기능 테스트를 제일 먼저 수행함
- 인터페이스, 자료 구조, 독립적 기초 경로, 오류 처리 경로, 결제 조건 등을 테스트함
- 구조 기반 테스트와 명세 기반 테스트로 분류할 수 있으나 주로 구조 기반 테스트를 시행함

2) 통합 테스트(Integration Test)
- 각 모듈을 결합해 시스템을 완성하는 과정에서 모듈 간 인터페이스 혹은 통합된 컴포넌트 간 상호작용 오류 및 결함을 찾아 해결하기 위한 테스트 기법
- 비점진적 통합 방식(빅뱅)
    - 모든 모듈이 결합된 프로그램 전체가 대상
    - 규모가 작은 소프트웨어에 적합함
    - 오류를 발견하거나 장애 위치를 파악하고 수정하는 것이 어려움
- 점진적 통합 방식(상향식/하향식)
    - 단계적으로 통합하며 테스트함
    - 오류 수정이 쉬움
    - 인터페이스 관련 오류를 테스트할 수 있음

3) 빅뱅(BigBang)
- 시스템을 구성하는 모듈을 각각 따로 구현하고 전체 시스템의 시험을 한 번에 진행함
- 테스트를 위한 Driver와 Stub 없이 실제 모듈들로 테스트를 진행함
- 단시간 테스트를 수행하나 결함의 격리가 어려운 방식

4) 상향식 통합 검사(Bottom Up Integration Test)
- 상향식 통합의 개념
    - 프로그램 구조에서 최하위 레벨인 모듈을 구성하고 상위 모듈 방향으로 통합해 검사
    - 가장 하위 단계의 모듈부터 수행되므로 스텁이 필요 없으나 하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 클러스터가 필요함
- 상향식 통합의 프로세스 4단계
    - 하위 레벨 모듈들은 특정한 소프트웨어 부가 기능을 수행하는 클러스터들에 결합함
    - 시험 사례 입력과 출력을 조정하기 위해 드라이버(Driver)가 작성됨
    - 클러스터를 시험함
    - 드라이버가 제거되고 클러스터가 프로그램 구조의 위로 이동하면서 결합함

5) 하향식 통합 검사(Top Down Integration Test)
- 하향식 통합의 개념
    - 상위 컴포넌트를 테스트하고 점증적으로 하위 컴포넌트를 테스트함
    - 주요 제어 모듈 기준으로 아래로 통합하며 진행함
    - 하위 컴포넌트 개발이 완료되지 않으면 스텁을 사용하기도 함
    - 우선 통합법, 깊이 우선 통합법, 넓이 우선 통합법 등이 있음
- 하향식 통합의 프로세스 5단계
    - 주 프로그램 모듈은 시험 드라이버로 사용하고, 주 모듈에 직접 종속되는 모든 모듈을 스텁으로 교체시킨 후 시작함
    - 선택한 통합 접근법(깊이-우선 또는 넓이-우선 방식)에 따라 종속된 스텁들을 한 번에 하나씩 실제 모듈들로 대체함
    - 각 모듈이 통합된 후 시험을 시행해 통합 시 발생하는 인터페이스 오류를 찾아 제거함
    - 주 모듈에 직접 종속적인 모듈의 시험이 끝난 경우, 하위 모듈의 종속 모듈들을 스텁 형태로 삽입함
    - 회귀 시험은 새로운 오류가 반입되지 않은 것을 확인하기 위해 실시함

6) 통합 테스트 수행 방법 비교
- 상향식
    - 드라이버/스텁 : 드라이버
    - 수행 방법 : 가장 하부의 모듈부터 통합해 가면서 진행
    - 수행 : 하위 -> 상위
    - 장점
        - 장애 위치 확인 용이
        - 모든 모듈이 개발 준비되어 있지 않아도 가능
    - 단점
        - 초기 프로토타입 불가
        - 중요한 모듈들이 마지막에 테스트될 가능성
- 하향식
    - 드라이버/스텁 : 스텁
    - 수행 방법 : 가장 상부의 모듈부터 통합해 가면서 진행
    - 수행 : 상위 -> 하위
    - 장점
        - 장애 위치 확인 용이
        - 초기 프로토타입 가능
    - 단점
        - 많은 스텁 필요
        - 낮은 수준 모듈은 부적절한 테스트 가능성
- 빅뱅
    - 드라이버/스텁 : 실제 모듈로 테스트
    - 수행 방법 : 모든 테스트 모듈을 동시에 통합
    - 수행 : 동시
    - 장점
        - 소규모 시스템에 단기간 테스트 가능
    - 단점
        - 장애 위치 확인 어려움
        - 모든 모듈이 개발 준비가 되어 있어야 함
- 백본(Backbone)
    - 드라이버/스텁 : 드라이버/스텁을 필요에 따라 만들어 사용
    - 수행 방법 : 가장 중요하고 위험이 큰 모듈을 초기 통합
    - 수행 : 위험도(중요도) 순
    - 장점
        - 결함 격리가 쉬움
        - 위험이 높은 결함을 초기에 발견 가능
    - 단점
        - 티스트 시간이 과다 소요

7) 샌드위치 테스트(Sandwich Test) => 혼합식 테스트
- 상향식과 하향식의 장점을 이용하는 방식(상향식 + 하향식)
- 하위 프로젝트가 있는 대규모 프로젝트에서 사용하는 방식
- 병렬 테스트가 가능하고 시간 절약이 가능함
- 스텁과 드라이버의 필요성이 매우 높은 방식, 비용이 많이 들어감

8) 회귀 시험(Regression Test)
- 새로운 코드 변경사항이 기존 기능에 부작용이 없어야 함을 확인하기 위해 수행됨
- 수정한 부분이 소프트웨어의 다른 부분에 영향을 미치는지 테스트해 소프트웨어 수정이 새로운 오류를 발생시키지 않았는지 확인하기 위한 것
    - 소프트웨어 수정은 새로운 오류를 발생시키거나, 이전에 수정했던 오류를 다시 발생시키는 경우가 흔함
- 회귀 테스트 유형
    - Retest All 기법
        - 방법 : 기존에 축적된 테스트 케이스 및 데이터 전부를 재사용하는 기법
        - 장점
            - 테스트 커버리지 향상 및 완전성 향상 가능
        - 단점
            - 고가의 테스트 비용
            - 사전 테스트 데이터 준비 필요
        - 활용 : 금융, 고객업무 등 고위험 시스템
    - Selective 기법
        - 방법 : 변경 대상 위주로 영향 범위를 결정해 테스트하는 방법
        - 장점
            - 테스트 수행 범위 최소화 가능
            - 투자 대비 효과적
        - 단점
            - 테스트 완전성 부족
            - 선정 대상 부정확시 결함 발견 어려움
        - 활용 : 일반 전사 시스템
    - Priority 기법
        - 방법 : 시스템의 핵심 기능을 위주로 우선순위를 정해 테스트하는 방법
        - 장점
            - 중요도/위험도에 의한 테스트 수행으로 테스트 비용 최소화
        - 단점
            - 우선순위 부정확시 결함 발견 어려움(변경 대상 포함)
        - 활용 : 위험도가 낮은 시스템
- 회귀 테스트 케이스 선정 방법
    - 애플리케이션 기능 변경에 의한 영향도를 분석하고, 영향도가 높은 부분이 포함된 테스트 케이스를 선정함
    - 애플리케이션 전체 기능을 테스트할 수 있는 대표적인 테스트 케이스를 선정함
    - 실제 수정이 발생한 부분에서 시행하는 테ㄴ스트 케이스를 선정함