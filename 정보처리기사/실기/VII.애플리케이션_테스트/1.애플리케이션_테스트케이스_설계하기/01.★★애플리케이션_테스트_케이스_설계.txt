출제빈도 상
빈출 태그 : 소프트웨어 테스트 / 테스팅의 원리 / 테스트 산출물

1) 응용 소프트웨어의 유형
- 시스템 소프트웨어
    - 응용 소프트웨어를 실행하기 위한 기반인 플랫폼을 제공하고 컴퓨터 하드웨어의 동작,
        사용자가 시스템을 조작하도록 설계된 소프트웨어
    - ex) 운영체제, DBMS, 데이터 통합, 프로그래밍 언어, 스토리지 소프트웨어,
        소프트웨어 공학 도구, 가상화 소프트웨어, 시스템 보안 소프트웨어 등
- 미들웨어
    - 서로 다른 프로토콜 환경에서 이를 원만하게 연결할 수 있도록 도와주는 도구
    - 분산 환경에서 타 기종 간 통신 환경을 연결해 원만한 통신이 이루어질 수 있도록 연계를
        도와주는 소프트웨어
    - ex) WAS, 실시간 데이터 처리, 연계 통합 솔루션, 분산 병렬 처리, 네트워크 관리,
        시스템 관리, 클라우드 서비스, 접근제어 소프트웨어 등
- 응용 소프트웨어
    - 운영체제 기반에서 작동하는 다양한 기능을 제공하는 소프트웨어
    - ex) 영상 인식/분석, 영상 코덱/스트리밍, 영상 제작/편집/합성, 3D 스캐닝/프린팅,
        가상 시뮬레이션, 콘텐츠 보호/관리/유통, 정보검색, 음성 처리, 오피스웨어 소프트웨어 등

2) 소프트웨어 테스트
- 개념
    - 소프트웨어 개발 단계에서 사용자 요구사항에 서술된 동작과 성능, 사용성, 안정성 등을
        만족하는지 확인하기 위해 소프트웨어의 결함을 찾아내는 활동
    - 품질 향상 관점 : 반복적인 테스트를 거쳐 제품의 신뢰도를 향상하는 품질 보증 활동
    - 오류 발견 관점 : 잠재적 오류를 발견하고 이를 수정해 올바른 프로그램을 개발하는 활동
    - 오류 예방 관점 : 코드 검토, 동료 검토, 인스펙션 등을 통해 오류를 사전에 발견하는 활동
- 소프트웨어 테스트의 원리
    - 테스팅은 결함이 존재함을 밝히는 활동 : 소프트웨어의 잠재적인 결함을 줄일 수 있지만,
        결함이 발견되지 않았다고 해서 결함이 없다고 증명할 수는 없음을 의미함
    - 완벽한 테스팅은 불가능함 : 무한 경로, 무한 입력값, 무한 시간이 소요되어 완벽하게
        테스트할 수 없으므로 위험 분석과 우선순위를 토대로 테스트에 집중할 것을 의미함
    - 테스팅은 개발 초기에 시작해야함 : 애플리케이션의 개발 단계에 테스트를 계획하고
        SDLC의 각 단계에 맞춰 전략적으로 접근하는 것을 고려하라는 뜻
        - SDLC(Software Development Life Cycle)
    - 결함 집중(Defect Clustering) : 애플리케이션 결함의 대부분은 소수의 특정한 모듈에
        집중되어 존재함 -> 파레토 법칙(2대8 법칙)
    - 테스팅은 정황(Context)에 의존함 : 정황과 비즈니스 도메인에 따라 테스트를 다르게 수행해야 함
    - 살충제 패러독스(Peticide Paradox) : 같은 테스트 케이스로 반복 실행하면 결함을 발견할 수
        없으므로 주기적으로 테스트 케이스를 검토하고 계선해야 함
        - 테스트 케이스 개선 : 많은 결함을 발견하기 위해 테스트 기법을 다른 모듈, 시각에서
            재적용하고 정기적 리뷰, 개선
        - 경험 기반 접근 : 탐색적 테스팅, JIT(Just-in-Time) 테스팅 등의 경험 기반 접근법을
            통해 테스트 케이스 추가
        - 전제 : 오래된 테스트 케이스는 잠재 결함에 노출
        - 관점 : 잠재 시스템 결함 제거
        - 관련 표준 : ISO29119
        - 테스트 기법 : 구조 기반/명세 기반 테스트
        - 테스트 유형 : 기능적 테스팅
        - 적용 시점 : 구현 및 시험 단계
    - 오류-부재의 궤변(Absence of Errors Fallacy) : 사용자의 요구사항을 만족하지 못하는 오류를
        발견하고 그 오류를 제거하였다고 해도, 해당 애플리케이션의 품질이 높다고 말할 수 없음
        - 검증 및 확인 : Validation & Verification을 통해 요구사항에 따라 개발되었는지 확인
        - 제품 및 품질 개선 : 고객의 적극적 참여를 통해 품질을 확인하며 CMMI, SPICE 등과 같은
            개발 프로세스 진단, 측정
        - 전제 : 결함이 없다고 SW 품질이 높은 것은 아님
        - 관점 : 시스템 사용성, 고품질 개발
        - 관련 표준 : ISO9126, ISO14598, ISO25000 등
        - 테스트 기법 : V&V, Inspection
        - 테스트 유형 : 비기능적 테스팅
        - 적용 시점 : SDLC 전 과정
- 소프트웨어 테스트 프로세스
    - 테스트 계획
        - 테스트 목적과 범위 정의
        - 대상 시스템 구조 파악
        - 테스트 일정 정의
        - 종료 조건 정의
        - 조직 및 비용 산정
    - 테스트 분석 및 디자인
        - 목적과 원칙 검토
        - 요구사항 분석
        - 리스크 분석 및 우선순위 결정
        - 테스트 데이터 준비
        - 테스트 환경 및 도구 준비
    - 테스트 케이스 및 시나리오 작성
        - 테스트 케이스 작성
        - 테스트용 스크립트 작성
        - 테스트 케이스 검토 및 확인
        - 테스트 시나리오 작성
    - 테스트 수행
        - 초기 데이터 로딩
        - 테스트 수행
        - 결함 리포팅
    - 테스트 결과 평가 및 리포팅
        - 테스트 결과 정의
        - 테스트 프로세스 검토
        - 테스트 결과 평가
        - 테스트 리포팅
- 소프트웨어 테스트 산출물
    - 테스트 계획서
        - 테스트 목적과 범위를 정의한 문서
        - 대상 시스템 구조 파악, 테스트 수행 절차, 테스트 일정, 조직의 역할 및 책임 정의,
            종료 조건 정의 등 테스트 수행을 계획한 문서
    - 테스트 케이스
        - 테스트를 위한 설계 산출물
        - 응용 소프트웨어가 사용자의 요구사항을 준수하는지 확인하기 위해 설계된 입력값,
            실행 조건, 기대 결과로 구성된 테스트 항목을 기술한 명세서
    - 테스트 시나리오
        - 테스트 수행을 위한 여러 개의 테스트 케이스의 집합
        - 테스트 케이스의 동작 순서를 기술한 문서
        - 테스트를 위한 절차를 상세히 명세한 문서
    - 테스트 결과서
        - 테스트 결과를 정리한 문서
        - 테스트 프로세스를 검토하고, 테스트 결과를 평가하고 기록하는 문서