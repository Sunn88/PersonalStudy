출제빈도 상
- 나쁜 코드, 스파게티 코드, 클린 코드, 정적 소스코드 품질 분석, 동적 소스코드 품질 분석

1) 소스코드 최적화
- 개념
    - 읽기 쉽고 변경 및 추가가 쉬운 클린 코드를 작성하는 것
    - 소스코드 품질을 위해 기본적으로 지킬 원칙과 기준을 정의함
    - 나쁜 코드(Bad Code)
        - 잦은 오류가 발생할 가능성이 있음
        - 소스코드 이해의 부족으로 인해 코드를 계속 덧붙이기하면 코드 복잡도가 증가함
        - 종류 : 다른 개발자가 로직을 이해하기 어렵게 작성된 코드, 변수/메소드에 대한 명칭을 알 수 없는 코드, 같은 처리 로직이 중복되게 작성된 코드, 스파게티 코드
            - 스파케티 코드 : 처리 로직의 제어가 체계화되어 있지 않고 스파게티 면처럼 서로 얽혀 있는 코드
        - 유형 : 오염, 문서 부족, 의미 없는 이름, 높은 결합도, 아키텍처 침식
    - 클린 코드(Clean Code)
        - 깔끔하게 잘 정리된 코드
        - 중복 코드 제거로 애플리케이션의 설계가 개선됨
        - 가독성이 높아 애플리케이션의 기능에 대해 쉽게 이해할 수 있음
        - 버그를 찾기 쉬워지며, 프로그래밍 속도가 빨라짐
        - 클린 코드 최적화 원칙 : 가독성, 단순성, 의존성 배제, 중복성, 최소화, 추상화
        - 유형 : 보기 좋은 배치, 작은 함수, 분석 가능한 제어 흐름, 오류 처리, 간결한 주석, 의미 있는 이름
- 소스코드 최적화의 유형
    - 클래스 분할 배치
        - 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높이도록 함
        - 모듈 크기를 작게 작성함
    - 좋은 이름 사용
        - 변수나 함수 이름은 Naming Rule을 정의해 기억하기 좋고, 발음이 쉬운 것을 사용함
    - 코딩 형식 준수
        - 논리적으로 코드를 라이별로 구분해 가독성을 높임
        - 개념적 유사성이 높은 종속 함수를 사용함
        - 호출하는 함수를 앞에, 호출되는 함수를 뒤에 배치하고 지역 변수는 각 함수의 맨 처음에 선언함
    - 느슨한 결합(Loosely Coupled)
        - 클래스 간 의존성을 느슨하게 하기 위해 인터페이스 클래스를 이용해 추상화된 자료 구조와 메소드를 구현함
    - 주석 사용
        - 코드의 간단한 기능 안내 및 중요 코드를 표시할 때 적잘히 사용함

2) 소스코드 품질 분석
- 소스코드 품질 분석 도구
    - 소스코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 현상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구
    - 정적 분석 도구
        - 소스코드상의 잠재적인 실행 오류와 코딩 표준 위배 사항 등 보안 약점을 검출함
        - 검출된 약점을 수정/보완해 소프트웨어의 안정성을 강화하고 향후 발생하는 오류 수정 비용을 줄일 수 있음
        - 개발 초기의 결함을 찾을 때 사용하며, 개발 완료 시점에는 개발된 소스코드의 품질 검증을 위하 사용함
        - 소스코드에서 코딩의 복잡도, 모델 의존성, 불일치성 등을 분석하는 것이 가능함
        - 기법
            - 소스코드 검증 : 검증 가이드라인을 통해 보안 조치
            - 코드 리뷰 : 개발자가 작성하고 다른 개발자가 정해진 방법을 통해 검토하는 방법(동로 검토, 제3자 검토라고도 함)
            - 리버스 엔지니어링 : 시스템의 기술적인 원리를 구조 분석을 통해 발견하는 방법
        - 종류
            - pmd : 미사용 변수, 최적화되지 않은 코드 등 결함 유발 가능 코드 검사 -> Linux, Windows
            - cppcheck : C/C++ 코드에 대한 메모리 누수, 오버플로 등을 분석 -> Windows
            - SonarQube : 중복 코드, 복잡도, 코딩 설꼐 등을 분석하는 소스 분석 통합 플랫폼 -> Cross Platform
            - checkstyle : Java코드에 대해 소스코드 표준을 따르고 있는가를 분석할 수 있으며 다양한 개발 도구에 토합해 사용 가능 -> Cross Platform
    - 동적 분석 도구
        - 소프트웨어가 실행 중인 환경에서 소프트웨어 소스코드보다 실행 과정에서의 다양한 입/출력 데이터의 변화 및 사용자 상호작용에 따른 변화를 점검하는 분석 기법
        - 기법
            - 디버깅 : 논리적인 오류(버그)를 찾아내는 테스트 과정
            - 스트레스 테스트 : 결과 관찰을 목적으로 한계점에 이르는 테스트를 수반
            - 모의 해킹 : 내부 또는 외부에서 실제 해커가 사용하는 해킹 도구와 기법 등을 이용해 정보 시스템으로의 침투 가능성을 진단하는 선의의 해킹 기법
            - 리버스 엔지니어링 : 동적 역공학 분석 툴을 이용해 구조 분석
        - 종류
            - Avalanche : 프로그램 내 존재하는 메모리 및 스레드 결함을 분석(Valgring 프레임워크 및 STP 기반으로 구현) -> Linyx, Android
            - Valgrind : 프로그램 내에 존재하는 메모리 및 스레드 결함 분석 도구 -> Cross Platform
    - 코드 복잡도
        - 기법
            - 다양한 언어의 코드 복잡도 분석 도구
        - 종류
            - ccm : 다양한 언어의 코드 복잡도 검사 가능 -> Cross Flatform
            - coberture : Java의 소스코드 복잡도 분석 및 테스크 커버리지를 측정 -> Cross Platform
- 정적 분석과 동적 분석 기술의 비교
    - 정적 분석
        - 대상 : 소스코드
        - 평가 기술 : 오염 분석, 패턴 비교
        - 단계 : 애플리케이션 개발 단계
    - 동적 분석
        - 대상 : 실제 애플리케이션
        - 평가 기술 : 애플리케이션 실제 실행
        - 단계 : 애플리케이션 개발 완료 단계