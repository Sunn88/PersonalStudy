1) 연산자(Operator)와 우선순위
- 연산자 : 자료에 대한 연산동작을 지정한 기호
- 연산자 우선순위 : 두 종류 이상의 연산자가 수식 내에 포함될 경우 연산의 순서를 의미

2) 이항 연산자의 우선순위
- 연산자의 대부부은 피여산자(연산의 대상)을 2개 가지는 이항 연산자에 속함
- 우선순위 : (높)괄호 -> 산술 연산자(* / % -> + -) -> 관계 연산자(< <= > >= -> == !=) -> 논리 연산자(! -> && -> ||)(낮)

3) 산술 연산자
- 정수 산술 연산은 정수의 결과값을, 실수 산술 연산은 실수의 결과값을 가짐
- 부호를 나타내는 단항 연산자(+, -)는 이항 산술 연산자보다 우선순위가 높음
- 이항연산자(+, -)는 (*, /, %)보다 우선순위가 낮음

4) 관계 연산자
- 관계 연산 : 두 피연산자의 관계를 비교해 관계가 성립하면 참, 성립하지 않으면 거짓을 연산의 결과값으로 생성함
    - C언어 : 참 또는 거짓
    - Java : true 또는 false

5) 논리 연산자
- 우선순위 : NOT(!) -> AND(&&) -> OR(||)
- NOT은 단항 연산자

6) 대입 연산자와 증감 연산자
- 대입 연산자
    - 변수에 어떤 값을 저장할 때 사용
    - 연산 대상과 대입 대상이 되는 변수가 같을 경우 복합 연산자를 이용해 축약 표현 가능
    - 결합 방향은 우측에서 좌측으로 연산이 수행됨
- 증가/감소 연산자
    - 변수의 값을 1씩 증가시키거나 1씩 감소시킬 떄 사용

7) 삼항 연산자(조건 연산자)
- A?B:C : A가 참이면 B를, 거짓이면 C를 결과값으로 설정함

8) 비트 연산자와 기타 연산자
- 비트 시프트 연산자
    - << : 비트를 왼쪽으로 이동(shift)시킴
    - >> : 비트를 오른쪽으로 이동시킴
    - ex) b = a<<2; : a의 값을 왼쪽으로 2비트 이동시킨 결과를 b에 저장함
- 비트 논리 연산자
    - & : 논리곱(AND)
        - ex) a = 5; b = 3; c = a&b;
        - 0101 AND 0011의 결과인 1(=0001)이 c에 저장됨(4비트로 가정)
    - ^ : 배타적 논리합(XOR)
        - ex) a = 5; b = 3; c = a^b;
        - 0101 XOR 0011의 결과인 6(=0110)이 c에 저장됨
    - | : 논리합(OR)
        - ex) a - 5; b = 3; c = a|b;
        - 0101 OR 0011의 결과인 7(=0111)이 c에 저장됨
    - ~ : 논리부정(NOT)
        - ex) a = -1; c = ~a;
        - 1111 반전(토글)의 결과인 0000이 c에 저장됨
- 기타 연산자
    - sizeof 연산자
        - C언어에서 변수, 변수형, 배열의 저장 장소의 크기를 Byte 단위로 구함
        - ex) printf("int 자료형의 크기 : %d",sizeof(int)); => int 자료형의 크기 : 4
    - 콤마 연산자
        - 성격이 동일한 자료형을 나열할 때 사용
        - ex) int a, b, c;
    - Cast 연산자(형 변환 연산자)
        - 명시적 형 변환시 사용
        - 어떤 수식을 다른 데이터형으로 변경할 때 사용
    - 포인터 연산자
        - C언어의 단항연산자 중, &는 변수의 주소를 의미하고 *는 변수의 내용을 의미함
        - ex) int a = 3; int *ptr = &a; *ptr = *ptr+5;
        - 정수형 변수 a를 포인터 변수 ptr이 포인팅하고 있고 *ptr은 포인터 변수에 포인터 연산자(*)를 통해 값을 참조
        - 변수 a의 내용인 3을 5와 덧셈해 8의 결과를 포인터 변수 ptr을 통해 다시 변수 a의 내용으로 대입함