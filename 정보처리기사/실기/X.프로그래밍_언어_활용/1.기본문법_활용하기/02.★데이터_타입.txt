1) 데이터 타입(Data Type, 자료형)의 정의
- 자료형 : 변수가 가질 수 있는 데이터(값)의 유형
- 자료형을 결정해 변수를 선언
- 프로그래밍 언어에 따라 데이터 타입에 차이가 있음

2) 데이터 타입의 분류
- 기본 데이터 타입
    - 정해진 구조 외에 다른 구조를 가질 수 없는 자료형
    - 종류 : 논리형, 문자형, 정수형, 실수형
- 구조적 데이터 타입
    - 기본 자료형으로부터 파생해 만든 자료형
    - 종류 : 배열(같은 자료형의 자료 모임), 레코드(다른 자료형의 자료 모임), 포인터형, 문자열형

3) 기본 데이터 타입
- 논리형(Boolean Type)
    - 참값(true)과 거짓값(false)의 상수(값, 리터럴)를 표현할 때 사용하는 자료형
    - 두 상수 값만 존재함
    - C언어의 기본 데이터 타입은 아님
- 문자형(Character Type)
    - 단일 문자의 자료형
    - 작은따옴표로 표현된 상수들을 표현할 때 사용하는 자료형
    - ex) 'a', 'A', '1', '', '!' 등
- 정수형(Integer Type, Fixed Point Type)
    - 고정 소수점 타입
    - 부호는 있고, 소수점이 없는 정수 상수들을 표현할 때 사용
    - ex) +1, -1, +123, -123 등
- 실수형(Floating Point Type)
    - 부동 소수점 타입
    - 부호와 소수점이 있는 실수 상수들을 표현할 때 사용
    - ex) +3.14, -3.14, +1.0, -123.0 등

4) 구조적 데이터 타입
- 여러 자료를 하나의 단위로 묶어 취급함
- 배열(Array)
    - 동일한 유형의 값들을 모아 놓은 자료형
    - 순차 구조 -> 첨자(index)로 배열 원소를 구별함
    - 1차원 구조와 2차원 이상의 다차원 구조로 구성할 수 있음
    - ex) {1, 3, 5}, {1.1, 2.2, 3.3}, {'A', 'B', 'C'} 등
- 레코드(Record)
    - 서로 다른 유형의 값들을 모아 놓은 자료형
    - 이름으로 원소를 구별함
    - ex) {2020, 'Kang', 100}, {1, 4.2} 등
- 포인터형(Pointer)
    - 객체를 참조하기 위해 메모리의 주소를 값으로 하는 자료형
    - 하나의 자료에 동시에 많은 리스트의 연결이 가능함
    - 커다란 배열의 원소를 효율적으로 저장하고자 할 때 이용
    - 고급 언어에서 주로 사용
    - 지원 프로그래밍 언어 : C, C++
- 문자열형(Character String Type)
    - 문자열(단일 문자들)의 자료형
    - 큰따옴표로 표현된 상수들을 표현할 때 사용
    - 기본 데이터 타입은 아님
    - ex) "A", "100", "PASS", "Kang" 등

5) 프로그래밍 언어의 기본 데이터 타입(Primitive Type) 및 크기
- 자료형의 예약어는 모두 소문자
- 문자열형(String)은 기본 데이터 타입이 아님
- C++언어의 논리형의 예약어 : bool
- Pything의 long형은 무한 크기
- C#언어의 실수형에는 decimal(16byte)이 있음
- C언어
    - 정수형 : int(4), short(2), long(4), unsinged
    - 실수형 : float(4), double(8), long double
    - 문자형 : char(1), unsinged char
    - 형 없음 : void
- Java언어
    - 정수형 : byte(1), short(2), int(4), long(8)
    - 실수형 : float(4), double(8)
    - 문자형 : char(2)
    - 형 없음 : void
    - 논리형 : boolean(1)
