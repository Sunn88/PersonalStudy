출제빈도 중

1) 데이터 조작 프로시저 성능 개선의 정의
- 데이터베이스 시스템 운영 중에 다양한 응용 프로그램의 도입과 데이터의 대용량화로 인해
    데이터베이스 시스템의 성능이 저하될 수 있음
    -> 데이터베이스 응용 프로그램, 데이터베이스 자체, 운영체제 등의 조정을 통해
        데이터베이스 시스템의 성능을 향상하는 작업
- DBMS, 애플리케이션, OS, N/W 등의 성능 관련 대상을 분석, 조정을 통해 DB 성능을 향상하는
    일련의 과정과 기법의 통칭

2) 데이터베이스 성능 관리의 주요 지표
- 수행시간 측면 : I/O Time + CPU Time
- 시스템 자원 사용 측면 : CPU, Memory 등의 사용량 관점의 관리
- 처리량 측면 : TPS(Transaction Per Second) 관점의 관리

3) 성능 관련 주요 요소
- 설계 관점(모델링 관점)
    - 설명
        - 데이터 모델링, 인덱스 설계
        - 데이터 파일, 테이블 스페이스 설계
        - 데이터베이스 용량 산정
    - 사례 : 반정규화, 분산 파일 배치
- DBMS 관점
    - 설명 : CPU, 메모리 I/O에 대한 관점
    - 사례 : Buffer, Cache
- SQL 관점
    - 설명 : Join, Indexing, SQL Execution Plan
    - 사례 : Hash, Join
- H/W 관점
    - 설명 : CPU, Memory, Network, Disk
    - 사례 : System Resource 개선

4) 로우 마이그레이션과 로우 체이닝
- 로우 마이그레이션(Row Migration)
    - 데이터 블록에서 수정이 발생할 때 수정된 데이터를 해당 데이터 블록에서 저장하지 못하고
        다른 블록의 빈 곳을 찾아 데이터를 저장하는 방식
    - 입출력 속도가 감소함
- 로우 체이닝(Row Chaining)
    - 로우 길이가 너무 길어서 데이터 블록 하나에 데이터가 모두 저장되지 않고 두 개 이상의 블록에
        걸쳐 하나의 데이터를 저장하는 방식
    - 데이터베이스 성능이 저하됨

5) 튜닝(Tuning)
- 데이터베이스 시스템에서 '최적화'라는 개념
- 튜닝이 진행되면 업무의 최적화, 하드웨어적인 병목 현상 해결, SQL의 최적화 등 여러 가지 개선을
    도모할 수 있음
- 튜닝을 통해 처리 속도의 향상 등 성능을 제고시키고 사용자가 필요한 때에 원하는 정보를 보다
    원활하게 제공받을 수 있도록 할 수 있음

6) 쿼리 성능 측정
- SQL 실행 계획 분석, 수정을 통해 최소의 시간으로 원하는 결과를 얻도록 프로시저를 수정하는
    사전 작업
- Oracle에서 쿼리 성능을 측정하는 방법으로 EXPLAIN PLAN이 주로 사용됨

7) 옵티마이저(Optimizer)
- 사용자가 질의한 SQL문에 대해 최적의 실행 방법을 결정하는 임무를 수행함
- 최적의 실행 방법을 실행 계획(Execution Plan)이라고 함
- 역할 : 다양한 실행 방법 중 최적의 실행 방법을 결정하는 것
    - 어떤 방법으로 처리하는 것이 최소 일량으로 같은 일을 처리할 수 있을지 결정하는 것
    - 규칙 기반 옵티마이저(RBO, Rule Based Optimizer)
    - 비용 기반 옵티마이저(CBO, Cost Based Optimizer)
- 관계형 데이터베이스는 옵티마이저가 결정한 실행 방법대로 실행 엔진이 데이터를 처리해
    결과 데이터를 사용자에게 전달함

8) SQL 성능 최적화를 위한 유틸리티 활용
- Oracle DBMS 경우 SQL 성능을 최적화하기 위해 TKPROF 및 EXPLAIN PLAN 등의 도구를 제공하고 있음
- 만약 SQL문이 적절히 작성되지 않았다면 전반적인 처리 효율성이 떨어질 수 있고, 이떄 처리 성능의
    통계치 정보를 파악하기 위해 TKPROF 도구를 활용함
- EXPLAIN PLAN은 SQL이 사용하는 액세스 경로를 파악하기 위해 활용할 수 있는 도구

9) 실행계획(EXPLAIN PLAN) 기반 쿼리 성능 측정
- Oracle에서 SQL문의 성능 개선을 할 수 있도록 SQL문을 분석 및 해석해 실행계획을 수립하고,
    연관 테이블(plan-table)에 저장하도록 지원하는 도구

10) SQL Trace
- 실행되는 SQL문의 실행통계를 세션별로 모아서 Trace 파일을 만듦
- 세션과 인스턴스 레벨에서 SQL 문장들을 분석할 수 있음
- 생성된 파일의 확장자는 .TRC
    - .TRC 파일 : 직접 읽기 불편함 -> TKPROF 유틸리티를 이용하면 쉽게 분석할 수 있음
- 인스턴스 레벨로 Trace를 수행시키면 전체적인 수행능력이 20~30%정도 감소하므로,
    될 수 있으면 세션 레벨로 Trace 파일을 생성해야 함
- SQL Trace에서 제공하는 정보
    - parse, execute, fetch count : 오라클의 SQL 처리 작업에서 parse, execute, fetch 작업이 
        처리된 횟수
    - 수행된 CPU 프로세스 시간과 경과된(Elapsed) 질의 시간들 : SQL문을 실행하는데 소비된 
        CPU 시간과 실질적인 경과 시간
    - 물리적(Disk)/논리적(Memory) 읽기를 수행한 횟수 : 질의어 parse, execute, fetch 부분들에 
        대해 디스크에 있는 데이터 파일들로부터 읽은 데이터 블록들의 전체 개수
    - 처리된 행(Row) 수 : 결과 set을 생성하기 위해 오라클에 의해 처리된 행의 전체 개수
    - 라이브러리 Cache miss : 분석된 문장이 사용되기 위해 라이브러리 캐시 안으로 
        로드되어야 하는 횟수

11) TKPROF
- SQl Trace를 통해 생성된 Trace 파일을 분석해 사용자가 읽을 수 있는 형태로 변환시켜 주는 
    오라클 제공 도구
- 실행되는 SQL 문장에 대해 분석 정보를 제공해 사용자(프로그래머)가 특정 SQL 문장을 
    어떻게 사용해야 할 것인지에 대한 지침을 제공해 주는 도구
    -> EXPLAIN PLAN과 함께 사용하는 것이 좋음
- Trace 결과로 파악할 수 있는 분석 정보
    - Parse, Execute, Fetch 수
    - CPU 시간/지난 시간
    - 물리적/논리적 Reads
    - 처리된 로우 수
    - 라이브러리 캐시 Misses
    - 구문 분석이 발생할 때의 사용자
    - 커밋(Commit)/롤백(Rollback)

12) SQL 성능 개선 절차
(1) 문제 있는 SQL 식별
    - 문제 있는 SQL을 식별하기 위해 애플리케이션의 성능을 관리, 관찰하기 위한
        APM(Application Performance Management) 등을 활용함
        - APM의 정의
            - 부하량과 접속자 파악 및 장애진단 등을 목적으로 하는 성능 모니터링 도구를 이용해
                운영 중인 시스템의 가용성을 높여 안정적인 시스템 운영을 지원하는 도구
            - Resource, End to end 두 가지 유형으로 분류할 수 있음
            - 애플리케이션 수행 시 CPU, 메모리, 네트워크, 디스크 등의 리소스 모니터링을 지원함
        - APM의 종류
            - 오픈소스 : Nagios, Zabbix, Cacti, VisuaVM
            - 상용 제품 : 제니퍼, 파로스, 시스 마스터
(2) 옵티마이저 통계 확인
    - SQL을 가장 빠르고 효율적으로 수행할 최적의 처리 경로를 생성해 주는 데이터베이스 핵심 모음
    - 사용자가 질의한 SQL문을 처리할 수 있는 실행계획을 탐색하고 각 실행계획에 대한 비용을 추정해
        최적의 실행계획을 수립하는 DBMS의 핵심 엔진
(3) SQL문 재구성
    - 범위가 아닌 특정 값 지정으로 범위를 줄여 처리속도를 빠르게 함
    - 옵티마이저가 비정상적인 실행계획을 수립할 경우, 힌트로서 옵티마이저의 접근 경로 및
        조인(Join) 순서를 제어함
    - 인덱스 설정 컬럼은 Having 사용 시 인덱스를 사용하지 않음
    - 인덱스 컬럼만 질의 대상으로 설정해 옵티마이저가 최적의 경로를 찾도록 함
(4) 인덱스(Index) 재구성
    - 성능에 중요한 액세스 경로를 고려해 인덱스를 생성함
    - 실행계획을 검토해 기존 인덱스의 열 순서를 변경/추가함
    - 인덱스 추가 시 정상적으로 처리되고 있던 다른 SQL에 심각한 영향을 줄 수 있으므로 
        주요 SQL 질의 결과를 함께 검토함
(5) 실행계획 유지관리
    - 데이터베이스 버전 업그레이드, 데이터 전환 등 시스템 환경의 변경 사항 발생 시에도
        실행계획이 유지되고 있는지 관리함

13) SQL 처리 흐름
- 구문분석 단계
    - 이미 사용된 문장이라면 구문분석(Parsing) 작업을 하지 않고, 처음 사용되었다면 구문분석
        작업이 필요함
        -> 사용자가 요청한 SQL문의 공유 풀 영역을 검색해 확인
    - 작성된 SQL문이 문법에 따라 정상적으로 작성되었는지를 분석하고, SQL 내에 포함된 테이블,
        뷰 등이 데이터베이스에 존재하는 오브젝트인지를 확인함
    - 옵티마이저는 SQL문을 가장 빠르게 데이터를 검색해 줄 수 있는 실행계획을 찾음
- 실행 단계
    - 메모리 영역의 데이터베이스 버퍼 캐시 영역을 검색해 해당 테이블의 데이터가 다른 사용자의
        다른 SQL문에 의해 이미 데이터 버퍼 캐시 영역에 존재하는지를 검색함
        - 데이터 버퍼 캐시 영역에 대항 데이터가 존재하면 캐시 영역의 데이터를 그대로 추출함
        - 그렇지 않는 경우 정의된 테이블의 해당 데이터 파일로부터 테이블을 읽어서
            데이터 버퍼 캐시 영역에 저장함
    - DML 문장의 경우 데이터 버퍼 캐시 영역에서 새로운 데이터로 변경, 삭제, 입력처리가 진행됨
- 추출 단계
    - 서버 프로세스는 데이터 버퍼 캐시 영역에서 관련 테이블 데이터를 읽어서 사용자가 요청한
        클라이언트로 추출한 자료를 전송함
    - SELECT문을 실행하는 경우에만 추출 단계가 실행됨
    - UPDATE, INSERT, DELETE문 실행 시에는 추출 단계가 실행되지 않음