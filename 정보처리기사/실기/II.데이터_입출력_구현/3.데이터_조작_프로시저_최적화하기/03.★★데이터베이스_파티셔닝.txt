출제빈도 상

1) DB 파티셔닝(Partitioning)
- 서비스의 규모가 확대되면 DB에 저장하는 데이터의 규모 또한 대용량화되어, DB 시스템의 
    용량(storage)의 한계와 성능(performanse)의 저하가 유발됨
- VLDB(Very Large DBMS)같은 단일 DBMS에 너무 큰 테이블이 존재하면 용량과 성능 측면에서 
    문제점이 발생함
- 큰 테이블이나 인덱스를 관리하기 쉽도록 Partition이라는 작은 단위로 물리적 분할하는 것
    - 물리적인 데이터 분할 : 물리적인 데이터 분할이 있더라도, DB에 접근하는 애플리케이션은 
        이를 인식하지 못함
    - 파티션(Partition) : 작은 단위로 나누어 관리하는 것
- 소프트웨어적으로 데이터베이스를 분산 처리해 성능이 저하되는 것을 방지하고 
    관리를 보다 수월하게 할 수 있음

2) DB 파티셔닝의 목적
- 성능(Performance)
    - DML과 Query의 성능을 향상시킴
    - 주로 대용량 Data 기록 환경에서 성능 향상을 가져옴
    - 레코드 Full Sacn시 데이터 검색 범위를 줄여 성능 향상을 가져옴
    - 잦은 입력(insert) 쿼리가 발생하는 OLTP 시스템에서 삽입 작업을 작은 파티션들로 분산시켜 
        병행성을 높일 수 있음
- 가용성(Availability)
    - 물리적인 파티셔닝으로 인해 전체 데이터의 훼손 가능성이 줄어들고 데이터 가용성이 향상됨
    - 각 분할 영역(파티션별)을 독립적으로 백업하고 복구할 수 있음
    - 테이블의 파티션 단위로 Disk I/O를 분산해 경합을 줄이기 때문에 UPDATE 성능을 향상시킴
- 관리용이성(Manageability)
    - 큰 테이블을 제거해 관리의 용이성을 증대시킴

3) DB 파티셔닝이 장단점
- 장점
    - 관리적 측면
        - 파티션 단위 백업, 추가, 삭제, 변경이 용이해짐
        - 전체 데이터를 손실할 가능성이 줄어들어 데이터 가용성이 향상됨
        - 파티션별로 백업 및 복구가 가능해짐
        - 파티션 단위로 I/O 분산이 가능해 update 성능을 향상시킴
    - 성능적 측면
        - 파티션 단위로 조회 및 DML을 수행함으로써 레코드 Full Scan에서 데이터 Access의 
            범위를 줄여 성능 향상을 가져옴
        - 필요한 데이터만 빠르게 조회할 수 있기 때문에 쿼리 자체가 가벼움
- 단점
    - 테이블 간 JOIN에 대한 비용이 증가함
    - 데이블과 인덱스를 별도 파티셔닝할 수 없으므로 함께 파티셔닝해야 함

4) DB 파티셔닝의 종류
- 수평(Horizontal) 파티셔닝
    - 하나의 테이블의 각 행을 다른 테이블에 분산시키는 것
    - 샤딩(Sharding)과 동일한 개념
        - 샤딩
            - 관계형 데이터베이스에서 대량의 데이터를 처리하기 위해 데이터를 파티셔닝하는 기술
            - 데이터베이스를 샤딩하게 되면 기존에 하나로 구성될 스키마를 다수의 복제본으로 
                구성하고, 각각의 샤드에 어떤 데이터가 저장될지를 샤드키를 기준으로 분리함
    - 스키마가 같은 데이터를 두 개 이상의 테이블에 나누어 저장하는 것
    - 퍼포먼스, 가용성을 위해 키 기반으로 여러 곳에 분산 저장함
    - 일반적으로 분산 저장 기술에서 파티셔닝은 수평 분할을 의미함
    - 보통 수평 분할을 한다고 했을 때는 하나의 데이터베이스 안에서 이루어지는 경우를 지칭함
    - 수평 파티셔닝의 장점
        - 데이터 레코드 개수를 기준으로 분할해 파티셔닝함
        - 데이터 레코드 개수가 줄어들어 인덱스의 수도 줄어들어 자연스럽게 성능이 향상됨
    - 수평 파티셔닝의 단점
        - 서버 간의 연결과정이 많아짐
        - 데이터를 찾는 과정이 기존보다 복잡하기 때문에 latency가 증가하게 됨
        - 하나의 서버가 고장나게 되면 데이터의 무결성이 깨질 수 있음
- 수직(Vertical) 파티셔닝
    - 테이블의 일부 컬럼을 분할하는 형태로 분할함
    - 모든 컬럼들 중 특정 컬럼들을 분할해 별도로 저장하는 형태
    - 스키마를 나누고 데이터가 따라 옮겨가는 것
    - 하나의 엔티티를 2개 이상으로 분리하는 작업
    - 수직 파티셔닝의 장점
        - 자주 사용하는 컬럼 등을 분리해 성능을 향상시킬 수 있음
        - 임의 테이블의 전체 레코드를 조회하면 모든 컬럼이 메모리에 적재됨
            -> 수직 파티셔닝을 하게 되면 메모리에 적재되는 컬럼 수가 줄어들어 
                I/O 측면에서 많은 수의 row를 메모리에 적재할 수 있음
        - 같은 타입의 데이터가 저장되기 때문에 저장 시 데이터 압축률을 높일 수 있음

5) DB 파티셔닝의 분할 기준
- 데이터베이스 관리 시스템은 분할에 대해 각종 기준(분할 기법)을 제공하고 있음
- 분할은 '분할 키(Partitioning Key)'를 사용함
- 범위 분할(Range Partitioning)
    - 연속적인 숫자나 날짜 기준으로 파티셔닝함
    - 손쉬운 관리 기법을 제공해 관리 시간을 단축할 수 있음
    - ex) 우편번호, 일별, 월별, 분기별 등의 데이터에 적합함
- 목록 분할(List Partitioning)
    - 특정 파티션에 저장될 데이터에 대한 명시적 제어가 가능함
    - 분포도가 비슷하고 많은 SQL에서 해당 컬럼의 조건이 많이 들어오는 경우에 유용함
    - Multi-Column Partition Key를 제공하기 힘듦
    - ex) [한국, 일본, 중국 -> 아시아] [노르웨이, 스웨덴, 핀란드 -> 북유럽]
- 해시 분할(Hash Partitioning)
    - Partition Key의 Hash값에 의한 파티셔닝(균등한 데이터 분할 가능)
    - Select 시 조건과 무관하게 병렬 Degree를 제공함(질의 성능 향상)
    - 특정 Data가 어느 Hash Partition에 있는지 판단이 불가능함
    - Hash Partition은 파티션을 위한 범위가 없는 데이터에 적합함
- 합성 분할(Composite Partitioning)
    - 파티션의 Sub-Partitioning을 말함
    - 큰 파티션에 대한 I/O 요청을 여러 파티션으로 분산할 수 있음
    - Range Partitioning 할 수 있는 Column이 있지만, 파티셔닝 결과 생성된 파티션이 너무 커서 
        효과적으로 관리할 수 없을 떄 유용함
    - Range-List, Range-Hash