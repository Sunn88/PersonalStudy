출제빈도 상

1) 논리 데이터 모델 품질 검증 개념
- 데이터 모델이 업무 환경에서 요구하는 사항을 시스템적으로 얼마나 잘 구현할 수 있는지는
    객관적으로 평가하기 어려움
- 좋은 데이터 모델 요건
    - 완전성 : 업무에서 필요로 하는 모든 데이터가 데이터 모델에 정의되어 있어야 함
    - 중복 배제 : 하나의 데이터베이스 내에 같은 사실은 반드시 한 번만 기록하여야 함
    - 비즈니스 룰 : 업무 규칙을 데이터 모델에 표현하고 이를 모든 사용자가 공유할 수 있게 
        제공해야 함
    - 데이터 재사용 : 데이터의 재사용성을 향상시키기 위해서는 데이터의 통합성과 독립성에 대해
        충분히 고려해야 함
    - 안정성 및 확장성 : 정보 시스템을 구축하는 과정에서 데이터 구조의 안전성, 확장성, 유연성을
        고려해야 함
    - 간결성 : 아무리 효율적으로 데이터를 잘 관리할 수 있더라도 사용, 관리 측면에서 복잡하다면
        잘 만들어진 데이터 모델이라고 할 수 없음
    - 의사소통 : 많은 업무 규칙은 데이터 모델에 개체, 서브 타입, 속성, 관계 등의 형태로 
        최대한 자세하게 표현되어야 함
    - 통합성 : 같은 데이터는 조직 전체에서 한 번만 정의하고 이를 여러 다른 영역에서 
        참조, 활용해야 함

2) 데이터 모델 품질 검증 기준
- 논리적 데이터베이스 구축 후에 데이터 품질의 좋고 나쁨을 검증하기 위한 기준
- 정확성 : 데이터 모델이 표기법에 따라 정확하게 표현되고, 업무 영역 또는 요구사항을 정확하게
    반영해야 함
- 완전성 : 데이터 모델의 구성요소를 정의하는 데 있어서 누락을 최소화하고, 요구사항 및 업무 영역 
    반영에 있어서 누락이 없어야 함
- 준거성 : 제반 준수 요건들을 누락 없이 정확하게 준수해야 함
- 최신성 : 현행 시스템의 최신 상태를 반영하고 있고, 이슈 사항들을 바로 반영해야 함
- 일관성 : 여러 영역에서 공통으로 사용되는 데이터 요소가 전사 수준에서 한 번만 정의되고 
    이를 여러 다른 영역에서 참조, 활용하면서 모델 표현상의 일관성을 유지해야 함
- 활용성 : 작성된 모델과 그 설명 내용이 이해관계자에게 의미를 충분하게 전달할 수 있으면서 
    업무 변화 시에 설계 변경이 최소화되도록 유연하게 설계해야 함

3) 물리 데이터 모델링 변환 절차
분석                    설계
논리 데이터 모델링       -> 물리 데이터 모델링
ER Model                 -> Physical Model
Entity                   -> Table
Attribute                -> Column
Primary UID              -> Primary Key
Secondary(Alternate) UID -> Unique Key
Relationship             -> Foreign Key
Business Constraints     -> Check constraints

4) 반정규화
- 반정규화의 정의
    - 정규화된 엔티티, 속성, 관계에 대해 시스템의 성능 향상과 개발(Development)과 
        운영(Maintenance)의 단순화를 위해 중복, 통합, 분리 등을 수행하는 데이터 모델링 기법
    - 정규화를 통해 정합성과 데이터 무결성이 보장되지만, 테이블의 개수가 증가함에 따라 
        테이블 간의 조인이 증가해 조회 성능이 떨어질 수 있음
    - 반정규화 : DB의 성능 향상을 목적으로 정규화를 통해 분할된 테이블을 다시 합치는 과정
    - 반정규화는 중복성의 원리를 활용해 데이터 조회 시 성능을 향상시키는 역할을 할 수 있음
    - 협의적 정의 : 데이터를 중복해 성능을 향상시키기를 위한 기법
    - 광의적 정의 : 성능을 향상시키기 위해 정규화된 데이터 모델에서 중복, 통합, 분리 등을
        수행하는 모든 과정
- 반정규화된 데이터 구조의 장단점
    - 장점 : 테이블의 단순화를 통해 성능 향상과 관리 효율성이 높아짐
    - 단점 : 정합성, 데이터 무결성을 해칠 수 있음 -> 이를 보완하기 위해 추가 비용이 발생

5) 반정규화의 적용 방법
- 반정규화의 대상을 조사함
    - 범위 처리 빈도수 조사 : 자주 사용되는 테이블에 접근(Access)하는 프로세스의 수가 많고 
        항상 일정한 범위만을 조회하는 경우에 사용함
    - 대량의 범위 처리 조사 : 대량의 데이터가 존재하고 넓은 범위의 데이터를 자주 처리하는데, 
        처리 범위를 줄이지 않으면 성능을 보장할 수 없는 경우에 사용함
    - 통계성 프로세스 조사 :  통계성 프로세스에 의해 통계 정보가 있어야 하는 경우에 사용함
    - 테이블 조인 개수 조사 : 테이블에 지나치게 많은 조인(JOIN)이 걸려 데이터 조회에 
        기술적 어려움이 존재하는 경우에 사용함
- 반정규화의 대상에 대해 다른 방법으로 처리할 수 있는지 검토함
    - 뷰 테이블 적용 : 지나치게 많인 조인이 걸려 데이터 조회에 기술적 어려움이 존재하는 경우 
        뷰(VIEW)를 사용해 해결할 수 있음
    - 클러스터링 적용 : 대량의 데이터 처리나 부분 처리 때문에 성능이 저하되는 경우 
        클러스터링을 적용하거나 인덱스를 조정함으로써 성능 저하 현상을 해결할 수 있음
    - 인덱스 적용 : 대량의 데이터는 Primary Key의 성격에 따라 인덱스를 적용해 성능 저하 현상을 
        해결할 수 있음
    - 응용 애플리케이션 수정 : 응용 애플리케이션에서 로직을 구사하는 방법을 변경함으로써 
        성능을 향상시킬 수 있음
- 반정규화 적용
    - 반정규화 이외의 다른 성능 향상 방안에 대한 고려가 충분히 이루어진 후 반정규화를 
        고려하게 되었다면 테이블 반정규화, 컬럼 반정규화, 관계 반정규화 기법을 적용함

6) 반정규화의 기법
- 테이블 반정규화
    - 테이블 병합
        - 1:1 관계 테이블 병합 : 1:1 관계를 통합해 성능을 향상시킴
        - 1:N 관계 테이블 병합 : 1:N 관계를 통합해 성능을 향상시킴
        - 슈퍼/서브타입 테이블 병합 : 슈퍼/서브를 통합해 성능을 향상시킴
    - 테이블 분할
        - 수직 분할 : 트랜잭션의 처리 유형을 파악하고 컬럼 단위의 테이블을 저장 장치의
            I/O 분산 처리를 위해 테이블을 1:1로 분리해 성능을 향상시킴
        - 수평 분할 : 로우(Row) 단위로 집중 발생되는 트랜잭션을 분석해 저장 장치의 
            I/O 및 데이터 접근의 효율성과 성능 향상을 위해 로우 단위로 테이블을 분할함
    - 테이블 추가
        - 중복 테이블 추가 : 업무가 다르거나 서버가 분리된 경우 같은 테이블을 중복으로 추가해 
            원격조인을 제거하는 방법을 통해 성능을 향상시킴
        - 통제 테이블 추가 : 합계, 평균 등 통계 계산을 미리 수행해 계산해둬 조회 시 성능을 향상함
        - 이력 테이블 추가 : 이력 테이블에 레코드를 중복 저장해 성능을 향상시킴
        - 부분 테이블 추가 : 이용이 집중되는 컬럼을 별도 테이블에 분리해 입출력 부담을 줄여 
            성능을 향상시킴
- 컬럼 반정규화
    - 중복 컬럼 추가 : 조인 시 성능 저하를 예방하기 위해 중복된 컬럼을 추가해 조인 횟수를 감소시킴
    - 파생 컬럼 추가 : 트랜잭션이 처리되는 시점에 계산 때문에 발생하는 성능 저하를 예방하기 위해
        미리 계산된 값을 저장하는 파생 컬럼을 추가함
    - 이력 테이블 컬럼 추가 : 대량의 이력 데이터를 처리할 때 임의의 날짜 조회나 최근 값 조회 시
        발생하는 성능 저하를 예방하기 위해 최근값 여부, 시작일, 종료일 등의 기능성 컬럼을 추가함
    - PK에 의한 컬럼 추가 : 복합 의미가 있는 PK를 단일 속성으로 구성했을 떄 발
        -> PK 안에 데이터가 존재하지만 성능 향상을 위해 일반 컬럼으로 추가함
    - 응용 시스템 오작동을 위한 컬럼 추가 : 업무적으로는 의미가 없으나, 데이터를 처리할 때 
        오류로 인해 원래의 값으로 복구하길 원하는 경우 이전 데이터를 임시로 중복으로 보관하는 
        컬럼을 추가함
- 관계 반정규화
    - 중복 관계 추가 : 데이터 처리 시 여러 경로를 거쳐 조인할 수 있지만, 이때 발생할 수 있는 
        성능 저하를 방지하기 위해 추가적인 관계 설정을 통해 성능을 향상할 수 있음

7) 뷰(View)의 개념
- 사용자의 데이터 입력 양식, 보고서, 질의문을 제공하는 데이터베이스 응용을 통해
    객체 속성의 값에접근함
- 실제 테이블에서 유도되는 가상의 테이블
    -> 실제 저장된 내용을 사용자에게 보여주기 위한 가상의 테이블
- 뷰는 객체의 이름과 그 뷰에서 사용되는 모든 속성의 리스트로 구성됨

8) 시스템 카탈로그의 개념
- 시스템 자신이 필요로 하는 스키마 및 여러 객체에 관한 정보를 포함하고 있는 시스템 데이터베이스
- 데이터 사전(Data Dictionary)이라고도 함
- 기본 테이블, 뷰, 인덱스, 데이터베이스, 응용 계획, 패키지, 접근 권한 등의 정보를 저장함
- 시스템 카탈로그의 특징
    - 카탈로그 자체도 일반 사용자 테이블, 즉 시스템 테이블로 구성함
    - 시스템 카탈로그에 저장되는 내용을 메타 데이터(Metadata)라고도 함
    - 일반 사용자도 SQL문을 이용해 시스템 테이블의 내용을 검색할 수 있으나,
        이 카탈로그의 정보를 SQL의 UPDATE, DELETE, INSERT문으로 직접 갱신하는 것은 불가능
    - 사용자가 SQL문을 실행하면 시스템은 자동으로 관련 카탈로그 테이블을 갱신함
- 시스템 카탈로그에 저장되는 내용
    - 릴레이션 이름과 각 릴레이션 속성의 이름, 릴레이션의 튜플 개수
    - 속성의 도메인과 길이
    - 데이터베이스에 정의된 뷰의 이름과 이 뷰에 대한 정의
    - 무결성 제약 조건과 릴레이션에 정의된 인덱스 이름
    - 권한이 부여된 사용자의 이름
    - 사용자인증을 위한 비밀번호 또는 부가 정보
    - 각 릴레이션에 저장된 메소드(클러스터링 또는 넌 클러스터링)
    - 인덱스 정보(이름, 인덱스 릴레이션 이름, 인덱스가 정의된 속성, 인덱스의 형태 등)