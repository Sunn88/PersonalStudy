출제빈도 상
빈출태그 : V-모델 / 테스트 레벨의 종류 / 테스트 유형 분류 / 블랙박스 테스트 / 화이트박스 테스트

1) V-모델과 테스트 레벨
- 애플리케이션 개발 단계에 따라 분류
- 애플리케이션을 총체적으로 관리하기 위한 테스트 활동의 묶음
- 각각의 테스트 레벨은 서로 독립적이며, 각각 다른 테스트 계획과 전략을 필요로 함

2) 테스트 레벨의 종류
- 단위 테스트
    - 개발자가 원시 코드를 대상으로 다른 부분과 연계되는 부분은 고려하지 않고 각각의 단위
        자체에만 집중해 테스트
- 통합 테스트
    - 단위 테스트를 통과한 개발 소프트웨어/하드웨어 컴포넌트 간 인터페이스 및 연동 기능 등을
        구조적으로 접근해 테스트
- 시스템 테스트
    - 단위/통합 테스트가 가능한 완벽히 완료되어 기능상에 문제가 없는 상태에서 가능한 한
        실제 환경과 유사한 환경에서 진행함
    - 시스템 성능과 관련된 요구사항이 완벽하게 수행되는지를 테스트하기 때문에 사전 요구사항이
        명확해야 함
    - 개발 조직과는 독립된 테스트 조직에서 수행함
- 인수 테스트
    - 일반적인 테스트 레벨의 가장 마지막 상위레벨
    - SW 제품에 대한 요구사항이 제대로 이행되었는지 확인하는 테스트
    - 실사용자 환경에서 테스팅을 하며 수행하는 주체가 사용자임
    - 알파, 베타 테스트와 가장 밀접한 연관이 있음
        - 알파 테스트
            - 개발자 관점에서 수행되며, 사용상의 문제가 반영되도록 하는 테스트
            - 개발자의 장소에서 사용자가 개발자 앞에서 테스트하며, 오류와 사용상의 문제점을
                사용자와 개발자가 함께 확인하면서 검사하는 기법
        - 베타 테스트
            - 선정된 다수의 사용자가 자신들의 사용 환경에서 일정 기간 사용하면서 테스트
            - 문제점이나 개선 사항 등을 기록하고 개발 조직에 통보해 반영되도록 하는 기법

3) 애플리케이션 테스트 유형 분류
- 프로그램 실행 여부 : 정적 테스트, 동적 테스트
- 테스트 기법 : 화이트박스 테스트, 블랙박스 테스트
- 테스트에 대한 시각 : 검증 테스트, 확인 테스트
- 테스트 목적 : 회복 테스트, 안전 테스트, 강도 테스트, 성능 테스트, 구조 테스트, 회귀 테스트,
    병행 테스트
- 테스트 기반 : 명세 기반 테스트, 구조 기반 테스트, 경험 기반 테스트

4) 프로그램 실행 여부에 따른 테스트
- 동적 테스트(Dynamic Test)
    - 애플리케이션을 직접 실행해 오류를 찾는 테스트
    - 소프트웨어 개발의 모든 단계에서 테스트를 수행함
    - 종류 : 블랙박스 테스트, 화이트박스 테스트
- 정적 테스트(Static Test)
    - 애플리케이션을 직접 실행하지 않고 명세서나 소스코드를 대상으로 분석하는 테스트
    - 소프트웨어 개발 초기에 결함 발견이 가능해, 개발비용을 낮출 수 있음
    - 종류 : 워크스루, 인스펙션, 코드검사 등
        - 코드 워크스루(Walkthrough)
            - 코드를 작성한 프로그래머가 4~5명 정도의 프로그래머 또는 테스터에게 어떠한 형식을
                갖추어 발표하는 것
            - 검토자들은 검토를 하기 전 코드를 보고 분석해 질문사항과 답변을 미리 작성해 두고
                실제 회의에서 해당 내용에 대해 발표함
            - 검토 회이 전 명세서 배포 -> 짧은 검토 회의 -> 결함 발견
        - 인스펙션(Inspection)
            - 개발팀에서 작성한 소스코드를 분석해 개발 표준 위배를 확인하거나, 잘못 작성된
                부분을 수정하는 작업
            - 잘못된 부분이란, 코드가 중복되거나 작성 규치겡 맞지 않거나 잘못 구현된 부분들을
                말함

5) 테스트 기반(Test Bases)에 따른 테스트
- 구조 기반 테스트
    - 소프트웨어 내부의 구조(논리 흐름)에 따라 테스트 케이스를 작성하고 확인하는 테스트 방식
    - 종류 : 구문 기반, 결정 기반, 조건 기반 등
- 명세 기반 테스트
    - 사용자의 요구사항에 대한 명세를 기반으로 테스트 케이스를 작성하고 확인하는 테스트 방식
    - 종류 : 동등 분할, 경계값 분석 등
- 경험 기반 테스트
    - 테스터의 경험을 기반으로 수행하는 테스트 방식
    - 요구사항에 대한 명세가 미흡하거나 테스트 시간에 제약이 있는 경우에 수향하면 효과적
    - 종류 : 에러 추정, 체크리스트, 탐색적 테스팅

6) 목적에 따른 테스트
- 성능(Performance) : 소프트웨어의 응답 시간, 처리량 등을 테스트
- 회복(Recovery) : 소프트웨어에 고의로 부하를 가해 실패하도록 유도하고 올바르게 복구되는지 테스트
- 구조(Structure) : 소프트웨어 내부의 논리적인 경로, 소스코드의 복잡도 등을 평가
- 회귀(Regression) : 소프트웨어의 변경 또는 수정된 코드에 새로운 결함이 없음을 확인
- 안전(Security) : 소프트웨어가 불법적인 침입으로부터 시스템을 보호할 수 있는지 확인
- 강도(Stress) : 소프트웨어에 과도하게 부하를 가해도 소프트웨어가 정상적으로 실행되는지 확인
- 병행(Parallel) : 변경된 소프트웨어와 기존 소프트웨어에 같은 데이터를 입력해 두 결과를
    비교 확인함

7) 화이트박스 테스트(White Box Test)
- 모듈의 원시 코드를 오픈시킨 상태에서 코드의 논리적 모든 경로를 테스트
- 종류
    - 기초 경로 검사
        - Tom McCabe가 제안한 대표적 기법
        - 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 함
        - 측정 결과는 실행 경로의 기초를 정의하는 데 지침으로 사용됨
    - 제어 구조 검사
        - 조건 검사 : 프로그램 모듈 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법
        - 루프 검사 : 프로그램의 반복구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법
        - 데이터 흐름 검사 : 프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰
            실시하는 테스트 케이스 설계 기법
- 검증 기준
    - 문장 검증 기준 : 소스코드의 모든 구문이 한 번 이상 수행
    - 분기 검증 기준 : 소스코드의 모든 조건문이 한 번 이상 수행
    - 조건 검증 기준 : 소스코드의 모든 조건문에 대해 조건이 True인 경우와 False인 경우가
        한 번 이상 수행
    - 분기/조건 기준 : 소스코드의 모든 조건문과 각 조건문에 포함된 개별 조건식의 결과가
        True인 경우와 False인 경우가 한 번 이상 수행

8) 블랙박스 테스트(Black Box Test)
- 소프트웨어가 수행할 특정 기능을 알기 위해 각 기능이 완전히 작동되는 것을 입증하는 테스트
    -> 기능 테스트
- 요구사항 명세를 보면서 테스트 -> 주로 구현된 기능을 테스트
- 소프트웨어 인터페이스에서 실시되는 테스트
- 종류
    - 동치 분할 검사
        - 입력 자료에 초점을 맞춰 테스트 케이스를 만들고 검사하는 방법
        - 입력 조건에 타당한 입력 자료와 그렇지 않은 자료의 개수를 균등하게 나눠
            테스트 케이스 설정
    - 경계값 분석
        - 입력 자료에만 치중한 동치 분할 기법을 보완한 기법
        - 입력 조건 경계값에서 오류 발생 확률이 크다는 것을 활용해 경계값을 테스트 케이스로
            선정해 검사함
    - 원인-효과 그래프 검사
        - 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석
        - 효용성이 높은 테스트 케이스를 선정해 검사
    - 오류 예측 검사
        - 과거의 경험이나 감각으로 테스트
        - 다른 테스트 기법으로는 찾기 어려운 오류를 찾아내는 보충적 검사 기법
    - 비교 검사
        - 같은 테스트 자료를 여러 버전의 프로그램에 입력하고 같은 결과가 출력되는지 테스트