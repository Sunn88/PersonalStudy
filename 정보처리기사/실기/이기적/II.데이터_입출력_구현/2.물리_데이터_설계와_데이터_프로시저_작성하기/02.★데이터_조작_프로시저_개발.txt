출제빈도 중
빈출태그 : 데이터 저장소 연결 순서 / 데이터 프로시저의 구분 / PL/SQL / Stored Procedure
    / Trigger

1) 데이터 저장소
- 데이터 저장소의 정의
    - 데이터 저장소를 생성/삭제/변경
    - 도구 : Data Control Language, Procedure, Function, Package, Triggere
- 데이터 저장소 연결 순서
    - Java 환경에서 JDBC를 통해 연결 : 드라이버 로딩 -> 연결 -> 쿼리 전달 -> 결과 수신
    - 드라이버 로딩
        - 데이터베이스와 연결하기 위해 DBMS에서 제공하는 Jar 파일 드라이버를 메모리에 적재함
    - 연결
        - 적재된 드라이버를 이용해 데이터베이스 연결함
        - String url = "jdbc:oracle:thin:@localhost:1521:ORCL";
        - conn = DriverManager.getConnection(url, "scott", "tiger");
    - 쿼리 전달
        - Statement, Prepared Statement 객체를 생성해 쿼리를 데이터베이스에 전달함
        - pstmt = conn.preparedStatement(sql);
    - 결과 수신
        - 앞서 전달한 쿼리를 수행한 결과를 수신함
        - ResultSet rs = pstmt.executeQuery();
- 데이터 저장소 연결 도구 : ODBC/JDBC, DB Connection, Driver, Result Set
    - ODBC(Open DataBase Connectivity) : 다양한 데이터베이스를 직접 연결된 것처럼 접근하기 위한
        API -> Database API Library에 연결해 사용하며 C로 구현됨
    - JDBC(Java DataBase Connectivity) : Java를 분산 컴퓨팅 환경에 적합한 데이터베이스 개발 언어로
        바꿔주는 API
* JDBC의 구성 요소
    - Driver
        - Driver Manager를 통해 Driver를 관리하고 적절한 시기에 사용할 수 있도록 
            Mapping 시켜주는 객체
        - 종류 : JDBC/ODBC Bridge, Native API, Net Protocol, JDBC, API
    - Connection : 전달받은 DB 연결 정보를 이용해 실제 연결을 수행하는 객체
    - Statement : String으로 입력받은 SQL 문장을 구문분석 후 DBMS에 전달하는 객체
    - Data Source : 2PC(two phase commit), Naming Service, Pooling 등의 지원을 도와주는 
        Resource 관리 객체
    - Result Set : Select 사용 시 여러 Record 정보를 한꺼번에 받아 처리할 수 있게 하는 객체

2) 데이터 프로시저
- 데이터 조작 프로시저의 개념
    - SQL을 이용해 조작 대상 데이터 집합에서 검색, 입력, 수정, 삭제와 같은 조작을 효과적으로 
        할 수 있도록 고안된 언어
    - SQL을 이용해 생성된 데이터를 조작하는 프로그램 -> 데이터베이스 내부에 저장되고 외부입력, 
        특정 시간 등의 일정한 조건이 되면 자동으로 수행됨
- 데이터 조작 프로시저 작성
    - 생성된 데이터 저장소에 데이터 입력
    - 입력된 데이터 수정
    - 저장된 데이터 삭제
    - 도구 : CRUD Matrix
        - CRUM Matrix : Create, Read, Update, Delete 등 객체에 발생하는 상태를 표 형태로 표현한 것
- 데이터 조작 프로시저 작성 순서
    - 물리 데이터 모델을 바탕으로 설계된 내용대로 데이터베이스를 구축하고, 다음 순서대로 
        데이터 조작 프로시저를 작성함
        - 구축한 데이터 저장소에 연결 수행하며 데이터 저장소 오브젝트를 생성함
        - 데이터의 입력 및 변경(수정, 삭제) 수행
        - 저장된 데이터를 검색하는 프로시저 작성
- 데이터 검색 프로시저 작성
    - 검색 조건에 맞는 데이터 조회
    - 다양한 함수를 활용해 데이터 조회
    - 도구 : Dynamic SQL, Static SQL
- 절차형 데이터 조작 프로시저 작성
    - PL/SQL을 활용해 프로시저 작성
        - PL/SQL
            - 표준 SQL을 기본으로 Oracle에서 개발한 데이터 조작 언어
            - 자료 내부에 SQL 명령문만으로 처리하기엔 복잡한 자료의 저장이나 
                프로시저와 트리거 등을 작성하는 데 쓰임
            - PL/SQL은 프로그램을 논리적인 블록으로 나눠 블록 구조로 구성함
    - PL/SQL로 작성할 수 있는 저장형 프로시저 객체 유형을 정의함
    - 정의한 객체를 생성함
    - 생성해 저장된 프로시저 객체를 활용함
    - 절차형 데이터 조작 프로시저의 구분 : Stored Function, Stored Procedure, 
        Stored Package, Trigger

3) PL/SQL
- SQL을 확장한 절차적 언어(Procedural Language) -> 최근의 프로그래밍 언어의 특성을 수용한 
    SQL의 확장 기능
- 관계형 데이터베이스에서 사용되는 Oracle의 표준 데이터 액세스 언어 -> 프로시저 생성자를 
    SQL과 완벽하게 통합함
- 사용자 프로세스가 PL/SQL 블록을 보내면 서버 프로세스는 PL/SQL Engine에서 해당 블록을 받고 
    SQL과 Procedural을 나눈 후 SQL은 SQL Statement Executer로 보냄
- 블록 단위의 실행을 제공함 -> 이를 위해 BEGIN과 END;를 사용함 -> 마지막 라인에 /를 입력하면 
    해당 블록이 실행됨
- 변수, 상수 등을 선언해 SQL과 절차형 언어에서 사용하며 변수의 선언은 DECLARE절에서만 가능함
    -> BEGIN 섹션에서 새 값이 할당될 수 있음
- IF문을 사용해 조건에 따라 문장들을 분기하는 것이 가능하며 LOOP문을 사용해 일련의 문장을 
    반복할 수 있음
- 커서를 사용해 여러 행을 검색 및 처리할 수 있음
- PL/SQL의 장점
    - 컴파일 불필요
        - 컴파일(Compile) 없이 스크립트(Script) 생성 및 변경 후 실행 가능
    - 모듈화 가능
        - 블록 내에서 논리적으로 관련된 문장 그룹화 가능
        - 복잡한 문제에 대해 나눠진 모듈 집합으로 구성
    - 절차적 언어 사용
        - 테이블과 레코드(Record)를 기반으로 하는 동적 변수 선언 가능
        - 단일형 데이터 타입과 복합형 데이터 타입 선언 가능
    - 에러 처리
        - 예외처리(Exception) 처리 루틴(Routine)을 이용한 에러 처리 가능
- PL/SQL의 구성
    - 선언부(Declare) : 실행 부에서 참조하게 되는 변수, 상수, CURSOR, EXCEPTION을 선언함
    - 실행부(Begin/End) : BEGIN과 END 사이에 표현되며, 데이터를 처리할 SQL문과 
        PL/SQL 블록으로 구성됨
    - 예외부(Exception) : 실행부에서 에러가 발생했을 때 예외 사항을 작성함
    - 종료부(End) : 실행 종료를 처리함
- PL/SQL Block의 종류
    - 익명 블록 : 이름이 없는 PL/SQL Block
    - 이름이 있는 블록
        - DB의 객체로 저장되는 저장형 블록
        - Procedure : 반환값을 하나 이상 가질 수 있는 프로그램
        - Function : 반환값을 반드시 반환해야 하는 프로그램
        - Package : 하나 이상의 프로시저, 함수, 변수, 예외 등의 묶음
        - Trigger : 지정된 이벤트가 발생하면 자동으로 실행되는 PL/SQL 블록

4) 스토어드 프로시저(Stored Procedure)
- 개념
    - 클라이언트/서버형 데이터베이스 시스템 처리 속도의 고속화 기법
    - 클라이언트가 서버의 데이터베이스에 요구하는 SQL문 중 자주 사용하는 일련의 처리 절차를 
        미리 컴파일해 바로 실행 가능한 모듈을 서버 측의 DBMS에 저장해 사용하는 것
    - 지정된 작업을 수행할 수 있는 이름을 가지고 있는 PL/SQL 블록
    - 매개 변수를 받을 수 있고, 반복적으로 사용할 수 있는 객체(Object)
    - 일반적으로 연속 실행과 구현이 복잡한 트랜잭션을 수행하는 PL/SQL 블록을 
        데이터베이스에 저장하기 위해 생성함
    - 작성한 PL/SQL을 저장하고 필요한 경우 호출함
    - 배치 작업, 복잡한 트랜잭션을 수행하는 PL/SQL문을 DB에 저장할 수 있도록 기능 제공, 
        CREATE OR REPLACE 구문을 사용함
    - Parameter
        - 실행 환경과 프로그램 사이에 값을 주고받는 역할
        - 블록 안에서의 변수와 똑같이 일시적으로 값을 저장하는 역할
        - 타입
            - IN : Program으로 값을 전달
            - OUT : Program에서 실행 환경으로 값을 전달
            - INOUT : 실행 환경에서 프로그램으로 값을 전달하고, 다시 프로그램에서 실행 환경으로
                변경된 값을 전달
    - 장점
        - 스토어드 프로시저가 수행 속도 면에서 일반 SQL문보다 월등히 빠름
        - 같은 작업을 여러 번 반복할 경우 다시 컴파일할 필요가 없어 수행속도가 빨라짐
        - 네트워크상에 오가는 SQL문의 트래픽을 줄일 수 있음
        - 보안 관리가 쉬우며 매개 변수를 사용할 수 있음
- 스토어드 프로시저의 종류
    - System Stored Procedure
    - User defined Stored Procedure
    - extended stored Procedure
    - Remote Stored Procedure

5) 트리거(Trigger)
- 특정 테이블에 삽입, 수정, 삭제 등의 데이터 변경 이벤트가 발생했을 때 DBMS에서 묵시적으로 
    수행되는 프로시저
- 테이블과는 별도로 데이터베이스에 저장됨
- 뷰가 아닌 테이블에 관해서만 정의될 수 있음
- DBMS_OUTPUT.PUT_LINE을 출력하기 위해 'set server output on'을 사용함
- trigger_event는 INSERT, UPDATE, DELETE중에서 한 개 이상 올 수 있음
- FOR EACH ROW 옵션이 있으면 Row Trigger가 됨
- 종류
    - 문장 트리거 : 전체 트랜잭션 작업에 대해 1번 발생하는 트리거(default)
    - 행 트리거 : 각 행에 대해서 트리거가 발생(for each row)