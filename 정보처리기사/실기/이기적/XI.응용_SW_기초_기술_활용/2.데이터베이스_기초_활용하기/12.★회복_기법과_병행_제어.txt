출제빈도 중
빈출태그 : 회복 기법 / 병행 제어 / 로킹

1) 회복(Recovery)
- 여러 가지 요인으로 인해 손상된 데이터베이스를 손상되기 이전의 정상적인 상태로 복구시키는 작업
- 로그
    - 트랜잭션이 수행되어 변경되는 데이터베이스의 상황 정보를 기록하는 것
    - 트랜잭션이 수행되기 이전 값과 수행된 이후 값 모두 기록됨
    - 로그 파일 : 정보를 담고 있는 파일
- 회복 기법
    - 즉시 갱신 기법
        - 트랜잭션이 실행 상태에서 변경되는 내용을 그때그때 바로 데이터베이스에 적용하는 기법
        - 변경되는 모든 내용은 로그에 기록해 장애 발생 시 로그의 내용을 토대로 회복시킴
    - 지연 갱신 기법
        - 트랜잭션이 수행되어 부분완료될 때까지 데이터베이스에 적용하지 않고 지연시킨 후
            부분완료가 되면 로그의 내용을 토대로 데이터베이스에 적용하는 기법
    - 검사 시점 기법
        - 트랜잭션이 실행되는 중간에 검사 시점(Check Point)을 지정해 검사 시점까지 수행 후
            완료된 내용을 데이터베이스에 적용하는 기법
    - 그림자 페이징(Shadow Paging) 기법
        - 로그를 사용하지 않고, 데이터베이스를 동일한 크기의 단위인 페이지로 나눠 각 페이지마다
            복사해 그림자 페이지를 보관함
        - 데이터베이스의 변경되는 내용은 원본 페이지에만 적용하고, 장애가 발생되는 경우
            그림자 페이지를 이용해 회복함
- REDO(재수행)와 UNDO(취소)
    - REDO
        - 트랜잭션이 수행되어 COMMIT이 되면 변경된 내용을 데이터베이스에 반영하게 됨
        - 이때 로그의 내용을 토대로 재수행하며 변경된 내용을 데이터베이스에 반영하게 됨
        - 이와 같이 재수행하는 과정
    - UNDO 
        - 트랜잭션이 수행되는 도중 오류가 발생하거나 비정상적으로 종료되는 경우
            트랜잭션이 시작된 시점으로 되돌아가는 과정

2) 병행 제어(Concurrency Control)
- 병행 실행 : 동시에 여러 개의 트랜잭션이 실행되는 경우
- 병행 제어 : 병행 실행 시 트랜잭션 간의 격리성을 유지해 트랜잭션 수행에 문제가 발생되지 않도록
    제어하는 것
- 로킹(Locking)
    - 트랜잭션의 병행 실행 시 하나의 트랜잭션이 사용하는 데이터베이스 내의 데이터를
        다른 트랜잭션이 접근하지 못하게 하는 것
    - 하나의 트랜잭션이 실행될 때는 'LOCK'을 설정해 다른 트랜잭션이 데이터에 접근하지 못하도록
        잠근 후 실행하고, 실행이 완료되면 'UNLOCK'을 통해 해제함
        LOCK -> 트랜잭션 실행 -> 트랜잭션 완료 -> UNLOCK
- 로킹 단위
    - LOCK을 설정할 데이터의 크기를 나타냄
    - 테이블, 속성, 튜플 단위로 설정할 수 있음
    - 로킹 단위가 크면 많은 양의 데이터의 LOCK 설정이 가능하고, LOCK으로 설정한 가짓수가 적어지고,
        병행성 수준이 낮아짐
    - 로킹 단위가 작으면 적은 양의 데이터의 LOCK 설정이 가능하고, LOCK으로 설정한 가짓수가 많아지고,
        병행성 수준이 높아짐
- 병행 제어를 하지 않았을 때의 문제점
    - 갱신 분실(Lost Update)
        - 두 개 이상의 트랜잭션이 수행되는 가정에서 연산 결과의 일부가 없어지는 현상
    - 모순성(Inconsistency)
        - 두 개 이상의 트랜잭션이 수행되어 얻어진 결과가 일관성 없이 서로 다른 현상
    - 연쇄 복귀(Cascading Rollback)
        - 두 개 이상의 트랜잭션이 수행되던 중 하나의 트랜잭션이 취소되어 연쇄적으로
            다른 트랜잭션도 취소되는 현상