출제빈도 상
빈출태그 : 프로세스 / PCB / 스레드 / 비선점/선점 스케줄링 / 문맥 교환 / 교착 상태

1) 프로세스(Process)의 개념
- 프로세스 : 운영체제가 관리하는 실행의 단위 -> 실행 중인 프로그램
- 프로세서가 할당되는 실체
- 프로시저가 활동 중인 것
- 비동기적 행위를 일으키는 주체
- PCB를 가진 프로그램

2) 프로세스 제어 블록(PCB, Process Control Block)
- 운영체제가 프로세스에 대한 중요한 정보를 저장해 놓을 수 있는 저장 장소
- 각 프로세스는 고유의 PCB를 가짐
- 프로세스가 생성될 때 고유의 PCB가 생성되고, 종료되면 PCB는 제거됨
- PCB에 저장되어 있는 정보
    - 프로세스의 현재 상태
    - 프로세스이 우선순위
    - CPU 레지스터 정보
    - 할당된 자원에 대한 정보
    - 프로세스 고유 식별자(PID)
    - 입/출력 상태 정보
    - 각종 자원의 포인터

3) 프로세스 상태 전이 - 278p 그림




- 프로세스 상태 전이 과정
    - Dispatch : 준비 상태->실행 상태
    - Block : 실행 상태-> 대기 상태
    - Wake up : 대기 상태->준비 상태
- 프로세스 스케줄러 : CPU 스케줄러 = 디스패처 = 단기 스케줄러
- 작업 스케줄러 : 장기 스케줄러
(1) 준비(Ready) 상태 : 프로세스가 준비 큐에서 실행을 준비하고 있는 상태
    - CPU를 할당받기 위해 기다리고 있는 상태
(2) 실행(Running) 상태 : 준비 큐에 있는 프로세스가 CPU를 할당받아 실행되는 상태
    - CPU를 스케줄러에 의해 수행됨
(3) 대기(Block) 상태
    - 프로세스가 입/출력 처리가 필요하면 현재 수행 중인 프로세스가 입/출력을 위해 대기 상태로 전이됨
    - 대기 중인 상태의 프로세스는 입/출력 처리가 완료되면 대기 상태에서 준비 상태로 전이됨

4) 스레드(Thread)의 개념
- 제어의 흐름을 의미함
- 프로세스에서 실행의 개념만을 분리한 것
- 프로세스의 일부 특성을 갖고 있기 때문에 '경량(Light Weight) 프로세스'라고도 함
- 프로세스의 구성을 제어의 흐름 부분과 실행 환경 부분으로 나눌 때, 프로세스의 실행 부분을 담당함으로써
    실행의 기본 단위가 되는 것
- 하나의 프로세스 내에서 병행성을 증가시키기 위한 매커니즘
- 스레드는 소속된 프로세스의 자원들과 메모리를 공유함
- 다중 스레드는 프로세스의 생성이나 문맥 교환 등의 오버헤드를 줄여 운영체제의 성능을 개선함

5) 프로세스 스케줄링
- 프로세스 스케줄링(Scheduling)의 개념
    - 프로세스의 생성 및 실행에 필요한 시스템의 자원을 해당 프로세스에 할당하는 작업
    - 스케줄링의 기법은 비선점 기법과 선점 기법으로 구분할 수 있음
- 프로세스 스케줄링의 목적
    - 모든 작업들에 대한 공정성을 유지하기 위한 방법
    - 단위 시간당 처리량을 최대화함
    - 응답 시간, 반환 시간, 대기 시간 및 오버헤드를 최소화함
- 비선점(Non-preemptive) 스케줄링
    - 일단 CPU를 할당받으면 다른 프로세스가 CPU를 강제적으로 빼앗을 수 없는 방식
    - 모든 프로세스에 대한 공정한 처리가 가능함
    - 일괄 처리 시스템에 적합함
- 선점(Preemptice) 스케줄링
    - 한 프로세스가 PU를 할당받아 실행 중이라도 우선순위가 높은 다른 프로세스가 CPU를 강제적으로
        빼앗을 수 있는 방식
    - 긴급하고 높은 우선순위의 프로세스들이 빠르게 처리될 수 있음
    - 대화식 시분할 시스템에 적합함

6) 비선점 스케줄링 종류
- FCFS(First Come First Service)
    - 준비상태 큐에 도착한 순서대로 CPU를 할당하는 기법
- SJF(Shortest Job First)
    - 준비상태 큐에서 대기하는 프로세스들 중에서 실행 시간이 가장 짧은 프로세스에게 먼저 CPU를
        할당하는 기법
    - 평균 대기 시간을 최소화함
- HRN(Highest Response-ratio Next)
    - 어던 작업이 서비스 받을 시간과 그 작업이 서비스를 기다린 시간으로 결정되는 우선순위에 따라
        CPU를 할당하는 기법
    - 우선순위 계산식 = (대기시간 + 서비스 시간)/서비스 시간
- 기한부(Deadline)
    - 작업이 주어진 특별한 시간이나 만료시간 안에 완료되도록 하는 기법
- 우선순위(Priority)
    - 준비상태 큐에서 대기하는 프로세스에게 부여된 우선순위가 가장 높은 프로세스에게 먼저 CPU를
        할당하는 기법
    - 에이징(Aging) 기법 : 프로세스가 자원을 기다리고 있는 시간에 비례해 우선순위를 부여함으로써
        무기한 문제를 방지하는 기법

7) 선점 스케줄링 종류
- SRT(Shortest Remaining Time)
    - 실행중인 프로세스의 남은 시간과 준비상태 큐에 새로 도착한 프로세스의 실행 시간을 비교해
        실행 시간이 더 짧은 프로세스에게 CPU를 할당하는 기법
    - 시분할 시스템에 유용함
- RR(Round Robin)
    - 주어진 시간 할당량(Time slice) 안에 작업을 마치지 않으면 준비완료 리스트(ready list)의
        가장 뒤로 배치되는 기법
    - 시간 할당량이 너무 커지면 FCFS와 비슷하게 되고, 시간 할당량이 너무 작아지면 오버헤드가
        커지게 됨
- 다단계 큐(MQ, Multi-level Queue)
    - 프로세스들을 우선순위에 따라 시스템 프로세스, 대화형 프로세스, 일괄처리 프로세스 등으로
        상위, 중위, 하위 단계의 단계별 준비 큐를 배치하는 기법
- 다단계 피드백 큐(MFQ, Multi-level Feedback Queue)
    - 각 준비상태 큐마다 부여된 시간 할당량 안에 완료하지 못한 프로세스는 다음 단계의
        준비상태 큐로 이동하는 기법
    - 짧은 작업, 입/출력 위주의 작업 권에 우선권을 부여함
    - 마지막 단계의 큐에서는 작업이 완료될 때까지 Round Robin 방식을 취함

* 문맥교환(Context Switching)
    - 다중 프로그래밍 시스템에서 운영체제에 의해 CPU가 할당되는 프로세스를 변경하기 위해
        현재 CPU를 사용해 실행되고 있는 프로세스의 상태 정보를 저장하고, 앞으로 실행될 프로세스의
        상태 정보를 설정한 다음에 중앙처리장치를 할당해 실행이 되도록 하는 작업

8) 병행 프로세스
- 병행 프로세스(Concurrent Process) : 두 개 이상의 프로세스들이 동시에 실행 상태에 있는 것
    - 독립적 병행 프로세스 : 여러 프로세스들이 독립적으로 실행되는 것
    - 병행 프로세스 : 서로 협력하며 동시에 실행되는 것
- 병행 프로세스는 다중 처리 시스템이나 분산 처리 시스템에서 매우 중요한 개념으로 사용됨
- 임계 구역(Critical Section) : 다중 프로그래밍 운영체제에서 여러 개의 프로세스가 공유하는 자원이나
    데이터에 대해 어느 한 시점에서 하나의 프로세스만 사용할 수 있도록 지정된 공유 자원
- 동기화 기법(Synchronization) : 두 개 이상의 프로세스를 한 시점에 동시에 처리할 수 없으므로
    각 프로세스에 대한 처리의 순서를 결정하는 것 -> 상호 배제의 한 형태
    - 세마포어(Semaphore)
        - 상호 배제 알고리즘
        - 각 프로세스가 임계 구역에 대해 각각의 프로세스들이 접근하기 위해 사용되는 P와 V 연산을
            통해 프로세스 사이의 동기를 유지하고 상호 배제의 원리를 보장함
    - 모니터(Monitor)
        - 특정 공유 자원이나 한 그룹의 공유 자원들을 할당하는 데 필요한 데이터 및 프로시저를
            포함하는 병행성 구조
        - 한 순간에 한 프로세스만이 모니터에 진입 가능
        - 모니터 외부의 프로세스는 모니터 내부의 데이터 접근 불가

9) 교착 상태(DeadLock)
- 교착 상태의 개념
    - 상호 배제에 의해 나타나는 문제점
    - 두 개 이상의 프로세스들이 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고 있는 자원을
        요구하며 무한정 기다리는 현상
    - 교착 상태는 상호 배제, 점유 및 대기, 비선점, 환형 대기의 4가지의 발생 조건이 모두 만족해야 발생
    - 교착 상태를 해결 방법 : 예방, 회피, 발견, 회복
- 교착 상태의 발생 조건 : 모두 만족해야 발생
    - 상호 배제(Mutual Exclusion) : 한 번에 한 개의 프로세스만이 공유 자원을 사용할 수 있어야 함
    - 점유 및 대기(Hold and Wait) : 이미 자원을 가진 프로세스가 다른 자원의 할당을 요구함
    - 비선점(Non-Preemption) : 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없음
    - 환형 대기(Circular Wait) : 이미 자원을 가진 프로세스가 앞이나 뒤의 프로세스의 자원을 요구함
- 교착 상태의 해결 방법
    - 예방(Prevention) : 교착 상태 발생 조건 중 하나라도 발생하지 않게 하는 방법
    - 회피(Avoidancec) : 교착 상태의 발생 가능성을 인정하고, 교착 상태 가능성을 피해가는 방법
        - 은행원 알고리즘과 관계가 있음
    - 발견(Detection) : 교착 상태가 발생했는지 검사해 교착상태에 빠진 프로세스와 자원을 발견하는 과정
    - 회복(Recovery) : 교착 상태에 빠진 프로세스를 종료하거나 해당 프로세스가 점유하고 있는 자원을
        선점해 다른 프로세스에게 할당하는 기법