출제빈도 하
빈출태그 : IDE / 빌드 도구 / 형상관리 도구 / 테스트 도구

1) 개발 환경 구축
- 고객이 요청한 시스템의 구현을 진행하기 위한 준비 단계
- 구현 시스템이 운영될 환경과 같은 환경을 구축해야 함
- 이때 구현될 목표 시스템의 요구사항에 대한 명확한 이해가 필요함
- 목표 시스템의 요구사항에 대한 분석을 통해 목표 시스템의 환경을 명확히 한 후
    개발 도구를 선정하는 작업을 진행
- 목표 시스템의 요구사항은 프로젝트의 분석 및 설계 시의 산출물을 분석해 파악할 수 있으며, 
    이에 맞는 개발 환경을 준비함
    - 프로젝트 분석 및 설계 산출물 : 제안 요청서, 제안서, 사업 수행 계획서, 요구사항 정의서,
        시스템 아키텍처, 애플리케이션 아키텍처 등

2) 개발 도구 선정 과정
- 서버 프로그램의 개발 환경을 준비할 때 시스템의 하드웨어 사양을 고려해 적합한 개발 도구
    (소프트웨어)를 선정해야 함
- 목표 시스템의 환경 분석 : 요구사항 분석 설계 및 모델링
- 구현 도구 선정 : 개발언어 및 H/W 사양을 고려해 선정
- 빌드 도구 선정 : 프로그램의 배포 및 라이브러리 관리를 위해 선정
- 형상관리 도구 선정 : 개발 인원을 고려해 선정
- 테스트 도구 선정 : 프로젝트 검증을 위해 선정

3) 구현 도구의 선정
- 구현 및 개발 도구(Implementation and Development Tool)는 프로젝트 진행시 개발자가 가장 많이
    사용하게 되는 도구 -> 코드 작성 및 디버깅 지원 도구이자 환경
- 목표 시스템 구축에 적합한 개발언어 선정 후 풍부한 지능과 플러그인(Plug-in)을 보유하고 있는
    통합 개발 환경(IDE) 선정
    - IDE(Integrated Development Environment, 통합 개발 환경)
        - 구현 도구
        - 개발 과정에서 사용되는 도구들의 집합
        - 코딩, 디버깅, 컴파일, 빌드 등 프로그램 개발과 관련된 일련의 모든 작업들을 통합해
            제공해주는 소프트웨어
- 대표적인 통합 개발 도구 : Eclipse, Visual Studio, X code, IntelliJ IDEA, NetBeans 등
- 개발언어의 주요 선정 기준
    - 적정성 : 개발하고자 하는 목표 시스템이나 응용 프로그램의 목적에 부합해야 함
    - 효율성 : 프로그래밍의 효울성이 고려되어야 함
    - 이식성 : 일반적인 PC 및 OS에 개발 환경이 설치 가능해야 함
    - 친밀성 : 프로그래머가 그 언어를 이해하고 사용할 수 있어야 함
    - 범용성 : 광범위한 분야에 사용되고 있으며 다양한 과거 개발 실적이나 사례가 존재해야 함

4) 빌드 도구와 형상관리 도구의 선정
- 팀 단위 프로젝트의 진행 시 팀 내의 개발자들의 원활한 협업을 위해 개발한 결과물들은
    빌드 도구와 형상관리 도구를 통해 관리됨
- 빌드 도구(Build Tool) : 개발자가 작성한 소스코드 파일을 컴파일, 테스팅, 정적 분석 등을 진행해
    실행 가능한 소프트웨어 -> 자동 생성하는 도구
    - 빌드(Build) : 소스코드 파일을 실행 가능한 소프트웨어 산출물로 만드는 일련의 과정
    - 빌드 과정
        - 전처리(preprocessing)
        - 컴파일(compile)
        - 패키징(packaging)
        - 테스팅(testing)
        - 배포(distribution)
    - 프로젝트 진행시 사용되는 라이브러리들에 대한 버전을 자동으로 동기화해 추가 관리함
    - 빌드 도구는 프로젝트 팀원의 빌드 도구의 친밀도와 숙련도, 형상관리 도구와 통합 개발 도구와
        호환성을 고려해 선정함
    - 대표적인 필드 도구 : Gradle, Maven, Ant 등
        - Gradle : 이미 구현된 Goal 수행, 프로젝트 전체 정보를 정의, Multi 프로젝트 빌드 지원,
            스크립트 규모가 작고 읽기 쉬움
            - Goal : 플러그인에서 실행할 수 있는 각각의 기능
        - Maven : 이미 구현된 Goal 수행, 프로젝트 전체 정보를 정의, 빌드 생명 주기/표준화된
            디렉터리 레이아웃, 재사용 가능한 플러그인 및 저장소
        - Ant : 프로젝트 특화된 Target 수행, 빌드 프로세스만 정의, 매우 복잡한 빌드 스크립트,
            스크립트 재사용 불가
            - Target : 최소한의 실행 단위로 특정 작업
- 형상관리 도구(Configuration Management Tool) : 프로젝트와 관련된 모든 변경사항을 관리하는 도구
    - 형상관리 도구 선정 시 목표 시스템 환경과 통합 개발 도구와의 호환성을 고려해 선정함
    - 대표적인 형상관리 도구 : CVS(Concurrent Version System), SVN(Subversion), Git,
        Perforce(P4D) 등

5) 테스트 도구의 선정
- 테스트 도구(Test Tool) : 단순하고 반복적인 테스트 작업을 위해 코드의 분석, 테스트 케이스 작성,
    테스트에 대한 리포팅 및 분석 등을 통해 테스트 효율성을 향상시키는 도구
- 대표적인 테스트 도구 : xUnit, Spring Test 등
- 프로젝트 검증에 적합한 테스트 활동은 계획, 분석/설계, 수행의 단계로 진행됨
    -> 각 활동에 적합한 테스트 도구가 존재함
- 테스트 도구 선정시 통합 개발 도구와 호환이 가능한 테스트 자동화 도구를 선정하도록 함
- 테스트 활용에 따른 도구 분류
    - 테스트 계획
        - 요구사항 관리 : 고객 요구사항 정의 및 변경사항 관리
    - 테스트 분석 및 설계
        - 테스트 케이스 생성 : 테스트 기법에 따른 테스트 데이터 및 테스트 케이스 작성
        - 커버리지 분석 : 대상 시스템에 대한 테스트 완료 범위 척도
    - 테스트 수행
        - 테스트 자동화 : 기능 테스트 등 테스트 도구를 활용해 자동화를 통한 테스트의 효율성을
            높일 수 있음(xUnit, STAF, NTAF 등)
        - 정적 분석 : 원시 코드를 분석해 잠재적인 오류를 분석하며, 코딩 표준, 런타임 오류 등을
            검증
            - 정적 분석 도구 : 결함 예방/발견, 코딩 표준, 코드 복잡도
        - 동적 분석 : 프로그램 수행 중 발생하는 오류의 검출을 통한 오류 검출
            (Avalanche, Valgrind 등)
            - 동적 분석 도구 : 메모리 릭(Leak), 동기화 오류
        - 성능 테스트 : 가상 사용자를 인위적으로 생성해 시스템 처리 능력 측정
            (JMeter, AB, OpenSTA 등)
        - 모니터링 : 시스템 자원(CPU, Memory 등) 상태 확인 및 분석 지원 도구(Nagios, Zenoss 등)
    - 테스트 통제
        - 형상관리 : 테스트 수행에 필요한 다양한 도구 및 데이터 관리
        - 테스트 관리 : 전반적인 테스트 계획 및 활동에 대한 관리
        - 결함 추적/관리 : 테스트에서 발생한 결함 관리 및 협업 지원