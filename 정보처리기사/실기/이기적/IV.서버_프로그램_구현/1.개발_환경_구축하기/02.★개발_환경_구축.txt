출제빈도 중
빈출태그 : 서버 / 클라이언트 / WAS / 형상관리

1) 개발 하드웨어 환경
- 일반적으로 사용되는 시스템 환경은 프로그램 개발을 위한 개발 환경, 테스트를 위한 테스트 환경,
    실제 시스템이 운영되는 운영 환경과 백업 환경 등으로 분류할 수 있음
- 개발 하드웨어 환경은 운영 환경과 유사한 구조로 구성하는 것이 원칙
- 개발용 하드웨어 환경을 구축하기 위해서는 하드웨어 구성을 고려해야 함
- 클라이언트(Client) 환경 구성
    - 서버 시스템에서 제공하는 서비스를 활용하기 위해 사용자와의 인터페이스를 제공하는 하드웨어
    - 일반적으로 PC(Client/Server 화면), 웹 브라우저 화면, 핸드폰(모바일 앱)이 클라이언트로
        활용됨
        - 웹 브라우저 : 월드 와이드 웹(WWW)에서 정보를 검색, 표현하고 탐색하기 위한 소프트웨어
    - 웹 서비스상에서는 서버에서 전송한 데이터가 웹을 통해 클라이언트에 도착 후 최종적으로
        웹 브라우저로 전달됨
    - 웹 브라우저에는 데이터를 해석해 주는 파서와 데이터를 화면에 표현해 주는 렌더링 엔진이
        포함되어 있음
- 서버(Server) 환경 구성
    - 서버 활용 목적에 따라 애플리케이션 서버, 데이터베이스 서버, 파일 서버 등으로 나눌 수 있음
    - 웹 서비스를 제공하기 위해 애플리케이션 서버를 웹 서버와 웹 애플리케이션 서버로 분리해
        구성하기도 함
    - 웹 서버 : 클라이언트(웹 브라우저 화면)에서 요청하는 서비스의 속도를 향상시키기 위해
        정적 파일(HTML, CSS, 이미지 등)들을 제공하는 웹 서버 애플리케이션이 설치되는 하드웨어
    - 웹 애플리케이션 서버 : 동적 웹 서비스를 제공하기 위해 Tomcat, Undertow, IIS 등
        미들웨어인 WAS와 서비스에 관련된 애플리케이션이 설치되는 하드웨어
    - 데이터베이스 서버 : MySql, Oracle, MS-SQL 등 데이터베이스가 설치되는 하드웨어
    - 파일 서버 : 서비스 제공을 위해 파일을 저장하고, 공유하기 위한 파일 저장 하드웨어
- 서버와 운영체제(플랫폼)
    - 클라이언트 서버 모델(Client-Server Model)
        - 네트워크상에서 서비스 요청자인 클라이언트와 서비스 자원의 제공자인 서버 간에 작업을
            분리해 주는 분산 애플리케이션 구조이자 네트워크 아키텍처
        - 대부분 서버에서 데이터를 처리하고 클라이언트는 UI를 담당함
        - 구조가 간단해 속도가 좋은 특징이 있으나 배포가 어렵다는 단점이 있음
        - 서버(Server)
            - 네트워크를 통해 요청되는 서비스를 제공하는 역할을 하는 컴퓨터 또는 프로그램
            - 서버 역할에 적합한 운영체제를 설치해야 함
            - 다중 사용자용(Multi-User)
            - 운영체제의 종류
                - 윈도우 서버(Windows Server) 계열
                - 유닉스(UNIX) 계열 : 솔라리스(Solaris, HP-UX), OS/2
                - 리눅스(Linux) 계열 : 레드햇(Redhat), 페도라(Fedora), 우분투(Ubuntu)
        - 클라이언트(Client)
            - 네트워크를 통해서 서비스를 요청하는 역할을 하는 컴퓨터 또는 프로그램
            - 클라이언트 역할에 적합한 운영체제를 설치해야 함
            - 단일 사용자용(Single-User)
                - 운영체제의 종류
                - 윈도우 계열 : Windows 10, 7, XP
                - 애플 계열 : MacOS
    - 웹 서버
        - 웹 문서
            - Markup Language
                - HTML, XML, SGML, WML, VML
                - CSS
            - Script Language
                - JavaScript, VBscript
            - Embedded Control
                - ActiveX, Applet
        - 웹 서버(Web Server)
            - 웹 문서를 사용자에게 제공하는 프로그램
            - 웹 서버에서 웹 문서를 제공하기 위해서는 웹 서버 프로그램을 설치해야 함
            - Apache, IIS(Internet Information Services)
    - 웹 프로그래밍
        - Server Side Scripting Language
            - 웹 문서를 동적으로 생성
            - ASP(Active Server Page)
            - JSP(Java Server Page)
            - PHP(Personal Home Page)
            - Python, Ruby, Perl
        - 웹 프로그램
            - 다양한 언어를 이용한 데이터베이스 연동을 통해 웹상에서 동작하는 프로그램
        - 웹 애플리케이션 서버(WAS, Web Application Server)
            - 웹 서버와 데이터베이스 서버 사이에서 연동하며 인터페이스 역할을 하는 서버
            - 서버 측 언어를 통해 웹 프로그램을 사용해 클라이언트에게 동적 서비스를 제공
            - Apache Tomcat, Oracle WebLogic 등
        - WAS는 일종의 미들웨어로 웹 클라이언트(보통 웹 브라우저)의 요청 중 웹 애플리케이션이
            동작하도록 지원함
        - WAS도 보통 자체적으로 웹 서버 기능을 내장하고 있음
        - 현재는 WAS가 가지고 있는 웹 서버도 정적인 콘텐츠를 처리하는 데 있어서 성능상 큰 차이가
            없으나 규모가 커질수록 웹 서버와 WAS를 분리함
- 응용 서버 플랫폼
    - LAMP : 리눅스 운영체제에서 웹 프로그램 개발을 위해 구축해야 하는 소프트웨어를 묶어 놓은 것
        - 운영체제 -> Linux
        - 웹 서버 -> Apache
        - 데이터베이스 -> MySQL
        - 언어 -> PHP
    - WAMP : 윈도우 운영체제에서 웹 프로그램 개발을 위해 구축해야 하는 소프트웨어를 묶어 놓은 것
        - 운영체제 -> Windows
        - 웹 서버 -> Apache
        - 데이터베이스 -> MySQL
        - 언어 -> PHP
- 미들웨어(MiddleWare)
    - 클라이언트와 데이터베이스 사이에서 매개체 역할을 하는 소프트웨어
        -> 데이터 관리, 애플리케이션 서비스, 메시징, 인증 및 API 관리를 주로 처리함
    - 클라이언트 쪽에 비즈니스 로직이 많을 경우, 클라이언트 관리(배포 등)로 인해 비용이 많이
        발생하는 문제가 있음
    - 비즈니스 로직을 동작하는 미들웨어 서버를 통해 클라이언트는 입력과 출력만 담당하도록
        지원할 수 있음

2) 개발 소프트웨어 환경
- 개발 소프트웨어 환경도 개발 하드웨어 환경과 마찬가지로 운영 환경과 동일한 구조로 구성함
- 시스템 소프트웨어
    - 운영체제(OS, Operation System)
        - 하드웨어 운영을 위한 시스템 소프트웨어
        - Windows/Linux/UNIX 등의 환경으로 구성
        - 일반적으로 상세 소프트웨어 명세는 하드웨어를 제공하는 벤더(Vender)에서 제공
        - ex) Windows, Linux, UNIX(HPUX, Solaris, AIX) 등
    - JVM(Java Virtual Machine)
        - 스택 기반의 자바 가상머신으로 Java와 운영체제 사이에서 중개자 역할을 수행해
            Java가 운영체제에 상관없이 재사용 가능하게 지원
        - Java 관련 응용 프로그램을 실행하기 위한 인터프리터 환경
        - 적용 버전을 개발 표준에서 명시해 프로젝트에 참여하는 모든 개발자가 동일한 버전을 적용
    - Web Server
        - 정적 웹 서비스를 수행하는 미들웨어 -> 웹 브라우저 화면에서 요청하는 정적 파일 제공
        - 클라이언트가 요청하는 HTML 문서나 각종 리소스 전달
        - ex) Apache, Nginx, Microsoft IIS(Internet Information Server), GWS(Google Web Server)
            - Apache 웹 서버 : Apache Software Foundation에서 개발한 웹 서버로 오픈소스
                소프트웨어 -> 대부분 운영체제에서 설치 및 사용 가능함
            - Nginx 웹 서버 : 오픈소스 소프트웨어 -> 차세대 웹 서버로 불리며 소량 자원을
                빠르게 서비스하는 것을 목적으로 만들어진 서버
    - WAS(Web Application Server)
        - 클라이언트의 요청 중 웹 애플리케이션을 동작하도록 지원하는 미들웨어
        - 웹 서버와 JSP/Servlet 애플리케이션 수행을 위한 엔진으로 구성
        - ex) Tomcat, Undertow, JEUS, Weblogic, Websphere 등
    - DBMS(Database Management System)
        - 다수의 사용자가 데이터베이스에 접근 가능하게 하며 데이터의 저장과 관리를 위한
            데이터베이스 소프트웨어
        - ex) Oracle, SQL Server, MySQL, MariaDB, DB2, Sybase 등
- 개발 소프트웨어
    - 요구사항 관리 도구
        - 목표 시스템의 기능과 제약 조건 등 고객의 요구사항을 수집, 분석, 추적을 쉽게 할 수
            있게 지원하는 도구
        - ex) JFeature, JRequisite, OSRMT, Trello 등
    - 설계/모델링 도구
        - 기능을 논리적으로 결정하기 위해 통합 모델링 언어(UML) 지원, Database 설계 지원 등
            설계 및 모델링을 지원하는 도구
        - ex) ArgoUML, DB Designer, StarUML 등
    - 구현 도구
        - 문제 해결 방법을 소프트웨어 언어를 통해 구현 및 개발을 지원하는 도구
        - ex) Eclipse, IntelliJ, Visual Studio 등
    - 테스트 도구
        - 구현 및 개발된 모듈들에 대해 요구사항에 적합하게 구현되어 있는지 테스트를 지원하는 도구
        - ex) JUnit, CppUnit, JMeter SpringTest 등
    - 형상관리 도구
        - 산출물의 변경사항을 버전별로 관리해 목표 시스템의 품질 향상을 지원하는 도구
        - ex) CVS(Concurrent Versions System), SVN(Apache Subversion), Git 등

3) 형상관리
- 형상관리(SCM, Software Configuration Management)의 정의
    - 형상관리 : 소프트웨어의 개발 과정에서 발생하는 산출물의 변경 사항을 버전 관리하기 위한
        일련의 활동
    - 형상관리 특성
        - 소프트웨어 변경사항을 파악하고 제어하며, 적절히 변경되고 있는지 확인한 후 해당
            담당자에게 통보하는 작업
        - 형상관리는 프로젝트 생명주기의 모든 단계에서 수행하는 활동
            -> 유지보수 단계에서도 수행되는 활동
        - 형상관리의 수행으로 소프트웨어 개발의 전체 비용을 줄이고, 개발 과정에서 나타나는
            여러 가지 문제점 발생 요인이 최소화되도록 보증하는 것을 목적으로 하는 품질보증을
            위한 중요한 활동
- 형상관리의 주요 활동
    - 형상(Configuration) : 소프트웨어가 동작하게 되는 그 자체
        -> 구현되는 소스코드, 설계서, 요구사항 정의서, 제품 설명서, 유지보수 문서 등
        -> 형상 항목(SCI, Software Configuration Item) : 형상을 구성하는 단위
    - 형상 식별
        - 형상관리 대상을 구분하고 고유한 관리 목록 번호 부여
        - 계층(Tree) 구조로 구분해 수정 및 추적이 쉽도록 베이스라인의 기준을 정하는 활동
            - 베이스라인 : 변경을 통제하게 도와주는 기준선은 정식으로 검토 및 합의된 명세서나
                제품 개발의 바탕으로서, 정식의 변경 통제 절차를 통해서만 변경 가능함
    - 버전 관리
        - 진화 그래프 등을 통해 SCI의 버전 부여 및 갱신(버전 제어)
    - 형상 통제(변경 통제)
        - 변경 제어 또는 변경 관리
        - SCI에 대한 접근 및 동기화 제어
        - 식별된 형상항목의 변경 요구를 검토, 승인해 적절히 통제함으로써 현재의 베이스라인에
            잘 반영될 수 있도록 조정하는 작업
        - 형상통제위원회(CCB) 승인을 통한 적절한 형상 통제가 가능
    - 형상 감사
        - SCI 무결성을 평가해 공식적으로 승인
        - 베이스라인의 무결성을 평가하기 위해 확인, 검증 과정을 통해 공식적으로 승인하는 작업
    - 상태 보고
        - 개발자와 유지보수 담당자에게 변경사항 공지(형상 기록)
        - 베이스라인의 현재 상태 및 변경 항목들이 제대로 반영되는지 여부를 보고하는 절차
        - 형상의 식별, 통제, 감사 작업의 결과를 기록 및 관리하고 보고서를 작성하는 작업
- 형상 항목
    - 소프트웨어 공학 기반 표준과 절차 : 방법론, WBS, 개발 표준
    - 소프트웨어 프로젝트 계획서
    - 소프트웨어 요구사항 명세서
    - 소프트웨어 아키텍처, 실행 가능한 프로토타입
    - 소프트웨어 화면, 프로그램 설계서
    - 데이터베이스 기술서 : 스키마, 파일 구조, 초기 내용
    - 소스코드 목록 및 소스코드
    - 실행 프로그램
    - 테스트 계획, 절차, 결과
    - 시스템 사용 및 운영과 설치에 필요한 매뉴얼
    - 유지 보수 문서 : 변경 요청서, 변경 처리 보고서 등