출제빈도 상
빈출 태그 : 애자일 / XP / SCRUM
* 시큐어 코딩 가이드 코드 분류 연습하기

1) 인터페이스 보안과 정보 보안
- 인터페이스 보안의 개념
    - 인터페이스는 시스템 모듈 간 통신, 정보 교환의 통로로 쓰이므로 데이터 변조 및 탈취 등의
        위협에 노출되기 쉬워 충분한 보안 기능을 갖춰야 함
- 정보 보안의 3요소
    - 기밀성(Confidentiality)
        - 인가된 사용자만 정보 자산에 접근할 수 있음
        - 일반적인 보안의 의미와 가장 가까움
        - ex) 방화벽, 암호 등
        - 신분 위장(Masquerading) 등과 같은 공격 때문에 위협받을 수 있음
    - 무결성(Integrity, 완전성)
        - 시스템 내의 정보는 오직 인가된 사용자가 인가된 방법으로만 수정할 수 있음
        - 변경, 가장, 재전송 등과 같은 공격 때문에 위협받을 수 있음
    - 가용성(Availability)
        - 사용자가 필요할 때 데이터에 접근할 수 있는 능력
        - 목표 : 인가된 사용자가 조직의 정보 자산에 적시에 접근해 업무를 수행할 수 있도록
            유지하는 것
        - 가용성을 유지하기 위해 데이터 백업, 위협요소 제거 등의 기술을 사용할 수 있음
        - 서비스 거부(Denial of Service) 등과 같은 공격 때문에 위협받을 수 있음
- 정보 보안의 목표 - 256p 그림
    - 정보 보호 정책
        - 정보 보호 관리
        - 컴퓨터 및 데이터 보안
        - 네트워크 보안
- 인터페이스 보안 취약점
    - 인터페이스 통신 시 데이터 탈취 위협의 종류
        - 스니핑(Sniffing)
            - 송수신 중 인터페이스 데이터 내용을 중간에 감청(도청)해 기밀성을 훼손하는 기법
            - 공격 대상에게 직접 공격을 하지 않고 데이터만 몰래 들어다보는 수동적 공격 기법
            - 수동적인 해킹 기법으로 패킷 분석기와 같은 스니퍼를 통해 진행됨
        - 스푸핑(Spoofing)
            - 공격 대상을 직접 속이는 것이 아닌 수동적 해킹 기법
            - Spoof(눈속임)에서 파생된 용어로 직접 시스템에 침입을 시도하는 것이 아니라
                피해자가 공격자의 악의적인 눈속임을 통해 잘못된 정보나 연결을 신뢰하게 만들어
                공격 대상을 직접 속이는 해킹 기법

2) 시큐어 코딩 가이드 - 257p 예시 코드 확인
- 보안에 안전할 수 있는 프로그램 코드를 적용해 프로그램을 코딩하는 것
- 대표적인 웹 애플리케이션의 보안 취약점 발표 사례인 OWASP TOP 10을 참고해 KISA에서 발표한
    보안 약점 가이드
    - CWE(Common Weakness Enumeration) : SW 보안 약점은 7개의 큰항목과 47개의 세부항복으로 구분함
    - 보안 약점(Weakness) : SW 결함의 한 종류로 보안 취약점을 유발하는 원인
    - 보안 취약점(Vulnerability) : 해커가 시스템 접근 권한 획득 등 직접 이용할 수 있는
        SW상의 결함
    - OWASP(Open Web Application Security Project)
    - KISA(한국인터넷진흥원)
- 애플리케이션의 보안 취약점과 대응 방안이 구체적으로 서술된 문서
(1) 입력 데이터 검증 및 표현
    - 프로그램에 입력되는 데이터로 인해 여러 가지 보안 약점이 발생할 수 있음
    - 종류
        - SQL 삽입(SQL Injection)
            - DB와 연동된 웹 애플리케이션에서 입력된 데이터에 대한 유효성 검증을 하지 않을 경우,
                공격자가 입력 폼 및 URL 입력란에 SQL문을 삽입해 DB로부터 정보를 열람하거나
                조작할 수 있는 보안 취약점
            - DB에 컴파일된 SQL 쿼리문을 전달함으로써 방지할 수 있음
            * 외부로부터 인자를 수신하는 preparedStatement 객체를 상수 스트링으로 생성하고
                인자 부분을 setXXX 메모들로 설정해 외부의 입력이 쿼리문의 구조를 변경하는 것을
                방지
        - 경로 조작 및 자원 삽입
            - 검증되지 않은 외부 입력값이 시스템 자원 접근 경로를 조작하거나 시스템 자원에
                삽입되어 공격할 수 있는 보안 약점
            - 외부 입력값이 자원의 식별자로 사용될 경우 검증을 거치거나 사전에 정의된 리스트에서
                선택함으로써 방지할 수 있음
        - 크로스 사이트 스크립트(XSS)
            - 검증되지 않은 외부 입력값에 의해 사용자 브라우저에서 악의적인 스크립트가 실행될 수
                있는 보안 약점
            - 외부 입력값에 스크립트가 삽입되지 못하도록 문자열 치환 함수를 사용하거나 JSTL이나
                크로스 사이트 스크립트 방지 라이브러리를 사용함으로서 방지할 수 있음
            * 외부 입력을 name 값으로, 별도 처리 없이 결과 페이지에서 사용하고 있어 만약
                공격자가 name 값에 다른 스크립트를 넣으면, 피해자의 권한으로 attak.jsp가
                실행되고 피해자의 쿠키 정보가 노출되게 됨
            * 미리 정의된 인자값의 배열을 만들고, 외부의 입력에 따라 적절하게 인자값을
                선택하도록 하면 외부의 부적절한 입력이 명령어로 사용될 가능성이 배제됨
        - 운영체제 명령어 삽입
            - 검증되지 않은 외부 입력값이 운영체제 명령어에 삽입되어 공격할 수 있는 보안 약점
            - 외부에서 서버 내부로 시스템 명령어를 전달시키지 않도록 하거나 외부 입력값은 검증
                후 시스템 명령어로 사용함으로써 방지할 수 있음
            * 외부 문자열에서 replaceAll() 메소드를 사용해서 '<', '>' 등의 HTML 스크립트
                문자열을 &lt; &gt; &amp; &quot; 형태로 변경해 악의적 스크립트 실행 위험을
                줄이도록 함
            * cmd.exe 명령어를 사용해 rmanDB.bat 배치 명령어를 수행하고 외부에 전달되는
                dir_type 값이 manDB.bat의 인자값으로서 명령어 스트링의 생성에 사용됨
                -> 만약 외부 공격자가 의도치 않은 문자열을 전달하면 dir_type이 의도한 값이 아닌
                    경우 비정상적인 처리가 수행될 수 있음
        - 위험한 형식 파일 업로드
            - 서버측에서 실행될 수 있는 검증되지 않은 형식의 파일(asp, jsp, php 등)이 업로드되어
                발생할 수 있는 보안 약점
            - 공격자가 스크립트 파일을 업로드하고, 이 파일을 이용해 내부 명령어를 실행하거나
                외부와 연결해 시스템을 제어할 수 있는 약점
            - 업로드 파일의 형식, 크기를 제한하고 업로드 디렉터리를 웹 서버의 다큐멘트 외부에
                설정함
            - 화이트 리스트 방식으로 허용된 확장자만 업로드를 승인하고, 확장자 또한 대소문자
                구분 없이 처리하도록 코딩함
            - 공격자의 웹을 통한 직접 접근을 차단하며, 파일 실행 여부를 설정할 수 있다면
                실행 속성을 제거하도록 함
        - 신뢰되지 않는 URL 주소로 자동 접속 연결
            - 검증되지 않은 외부 입력값이 URL 주소로 사용되어 악의적인 사이트에 자동으로
                접속될 수 있는 보안 약점
            - 자동 연결이 허용되는 URL 리스트에 있는 사이트 주소만 사용함으로써 방지할 수 있음
        - XQuery 삽입
            - XQuery를 사용해 XML 데이터에 대한 동적 쿼리 생성 시 검증되지 않은 외부 입력값이
                쿼리문 구조 변경에 사용될 수 있는 보안 약점
            - XQuery에 사용되는 외부 입력값에 대해 특수문자 및 쿼리 예약어 필터링을 통해
                방지할 수 있음
        - XPath 삽입
            - 검증되지 않은 외부 입력값으로 XPath 쿼리문을 생성해 쿼리문의 의미나 구조가
                변경될 수 있는 보안 약점
            - XPath 쿼리에 사용되는 외부 입력값에 대해 특수문자 및 쿼리 예약어 필터링을 통해
                방지할 수 있음
        - LDAP 삽입
            - 외부 입력값이 올바르게 처리되지 못해 LDAP(Lightweight Directory Access Protocol)
                쿼리문의 구성 변경에 사용될 수 있는 보안 약점
            - DN(Distinguished Name)과 필터에 사용되는 외부 입력값이 특수문자를 제거함으로써
                방지할 수 있음
(2) 보안 기능
    - 인증, 접근제어, 기밀성, 암호화, 권한 관리 등의 보안 기능을 부적절하게 구현해 여러 가지
        보안 약점이 발생할 수 있음
    - 종류
        - 적절한 인증 없는 중요 기능 허용
            - 적절한 인증 없이 중요 정보를 읽거나 변경할 때 발생하는 보안 약점
            - 인증 과정 없이 서버에 접근하지 못하도록 하고 중요 정보는 재인증을 거치도록 함으로서
                방지할 수 있음
        - 부적절한 인가
            - 접근 가능한 실행 경로에 대한 접근제어 검사를 완전하게 하지 않아 정보가 유출되는
                보안 약점
            - 노출되는 실행 경로를 최소화하고 사용자의 권한에 따라 접근제어 리스트
                (Access Control List)를 관리함으로써 방지할 수 있음
        - 중요한 자원에 대한 잘못된 권한 설정
            - 보안 또는 설정 파일과 같이 중요한 자원에 대해 읽기나 쓰기 권한을 잘못 설정해
                발생하는 보안 약점
            - 중요한 자원은 관리자만 읽고 쓰기가 가능하게 하고 사용자의 권한을 검사함으로써
                방지할 수 있음
        - 취약한 암호화 알고리즘 사용
            - 취약하거나 위험한 암호화 알고리즘을 사용해 패스워드가 유출되는 보안 약점
            - 잘 알려진 안전한 암호화 알고리즘을 사용함으로써 방지할 수 있음
        - 중요 정보 평문 저장
            - 개인정보, 금융정보, 패스워드 등의 중요 정보를 암호화하지 않고 평문으로 저장해
                중요 정보가 노출되는 보안 약점
            - 중요 정보를 암호화해 저장하고 중요 정보 접근 시 사용자의 권한을 검사함으로써
                방지할 수 있음
        - 중요 정보 평문 전송
            - 중요 정보를 암호화하지 않고 평문으로 전송해 중요 정보가 노출되는 보안 약점
            - 중요 정보를 암호화해 전송하거나 보안 채널을 사용함으로써 방지할 수 있음
        - 하드 코드된 비밀번호
            - 프로그램 코드 내에 데이터를 직접 입력하는 하드 코드된 패스워드를 포함시켜 사용해
                관리자의 정보가 노출되는 보안 약점
            - 패스워드는 암호화해 별도의 파일에 저장해 사용하고 디폴트 패스워드 대신 사용자 입력
                패스워드를 사용함으로써 방지할 수 있음
        - 충분하지 않은 키 길이 사용
            - 길이가 짧은 키로 암호화 및 복호화를 함으로서 짧은 시간 안에 키를 찾아낼 수 있는
                보안 약점
            - RSA 알고리즘은 2,048bit 이상, 대칭 암호화 알고리즘은 128bit 이상의 키를
                사용함으로써 방지할 수 있음
        - 적절하지 않은 난수값 사용
            - 적절하지 않은 난수값을 사용해 난수가 예측 가능해질 수 있는 보안 약점
            - 난수값을 결정하는 현재 시각 기반 등으로 시드값을 매번 변경함으로써 방지할 수 있음
(3) 시간 및 상태
    - 동시 수행을 지원하는 병렬 시스템이나 여러 개의 프로세스가 동작하는 멀티 프로세스 환경에서
        시간 및 상태를 부적절하게 사용해 여러 가지 보안 약점이 발생할 수 있음
    - 종류
        - 경쟁 조건:검사 시점과 사용 시점(TOCTOU)
            - 자원을 검사하는 시점(TOC, Time Of Check)과 사용하는 시점(TOU, Time Of Use)이
                달라서 발생하는 보안 약점
            - 여러 프로세스가 공유자원 접근 시 동기화 구문으로 한 번에 하나의 프로세스만
                접근하게 함으로써 방지할 수 있음
        - 종료되지 않는 반복문 또는 재귀함수
            - 종료 조건이 없는 반복문이나 재귀함으롤 사용해 무한 반복해 자원 고갈이 발생하는
                보안 약점
            - 재귀 호출 횟수를 제한함으로써 방지할 수 있음
(4) 에러 처리
    - 발생한 에러를 처리하지 않거나 완전하게 처리하지 않아 에러 정보에 중요 정보가 포함되어
        여러 가지 보안 약점이 발생할 수 있음
    - 종류
        - 에러 메시지를 통한 정보 노출
            - 에러 메시지에 실행 환경이나 사용자 관련 등 민감한 정보가 포함되어 외부에 노출되는
                보안 약점
            - 에러 메시지는 최소의 정보만 포함되게 하고 정해진 사용자에게만 보여주게 함으로써
                방지할 수 있음
        - 에러 상황 대응 부재
            - 에러가 발생할 수 있는 에러 상황에 대해 예외처리를 하지 않아 프로그램이 동작하지
                않거나 제대로 동작하지 않는 보안 약점
            - 에러가 발생할 수 있는 부분에 적절한 예외처리를 함으로써 방지할 수 있음
        - 부적절한 예외처리
            - 프로그램 수행 중에 함수의 결과값에 대해 적절하게 처리하지 않거나 예외상황에 대해
                조건을 적절하게 검사하지 않아 발생하는 보안 약점
            - 값을 반환하는 함수의 결과값을 검사하고 광범위한 예외처리가 아니라 구체적인
                예외처리를 함으로써 방지할 수 있음
(5) 코드 오류
    - 개발자가 흔히 실수하는 프로그램 오류들로 인해 여러 가지 보안 약점이 발생할 수 있음
    - 종류
        - Null Pointer(널 포인터) 역참조
            - 일반적으로 객체가 Null이 될 수 없다는 가정을 위반해 공격자가 의도적으로
                Null Pointer 역참조를 발생시켜 공격에 사용하는 보안 약점
            - Null이 될 수 있는 레퍼런스는 참조하기 전에 Null 값 여부를 검사한 후
                사용함으로써 방지할 수 있음
        - 부적절한 자원 해제
            - 오픈 파일 디스크립터, 힙 메모리, 소켓 등의 유한한 자원을 할당받아 사용한 후
                프로그램 에러로 반환하지 않아 발생하는 보안 약점
            - 자원을 할당받아 사용한 후에는 반드시 자원을 해제하고 반환함으로써 방지할 수 있음
        - 해제된 자원 사용
            - 해제된 자원을 참조해 의도하지 않은 값이나 코드를 실행하게 되어 의도하지 않은
                결과가 발생하는 보안 약점
            - 동적으로 할당된 메모리를 해제한 후 그 메모리를 참조하던 포인터를 참조 추적,
                형 변환, 수식의 피연산자 등으로 사용해 해제된 메모리의 접근을 막음으로써
                방지할 수 있음
        - 초기화되지 않은 변수 사용
            - 초기화되지 않은 변수를 사용하면 임의의 값이 사용되어 의도하지 않은 결과가
                발생하는 보안 약점
            - 모든 변수는 사용하기 전에 반드시 적절한 초기화 값을 할당함으로써 방지할 수 있음
(6) 캡슐화
    - 중요한 데이터나 기능성을 잘못 캡슐화하거나 잘못 사용하면 여러 가지 보안 약점이
        발생할 수 있음
    - 종류
        - 잘못된 세션에 의한 데이터 정보 노출
            - 다중 스레드 환경에서 정보를 저장하는 멤버변수가 포함되어 서로 다른 세션에서
                데이터를 공유해 발생하는 보안 약점
            - 싱글톤(Singleton) 패턴 사용 시 변수 범위를 제한함으로써 방지할 수 있음
        - 제거되지 않고 남은 디버그 코드
            - 개발 완료 후에 디버그 코드가 제거되지 않은 채로 배포되어 발생하는 보안 약점
            - 소프트웨어가 배포되기 전에 디버그 코드를 삭제함으로써 방지할 수 있음
        - 시스템 데이터 정보 노출
            - 시스템, 관리자, DB 정보 등의 시스템 데이터 정보가 공개되어 발생하는 보안 약점
            - 예외상황 발생 시 시스템 메시지 등이 시스템 데이터 정보가 화면에 출력되지 않게
                함으로써 방지할 수 있음
        - public 메소드로부터 반환된 private 배열
            - private 선언된 배열을 public 선언된 메소드를 통해 반환해 그 배열의 사례가 외부에
                공개되어 발생하는 보안 약점
            - private 선언된 배열을 public 선언된 메소드릉 통해 반환하지 않게 함으로써
                방지할 수 있음
        - private 배열에 public 데이터 할당
            - public 선언된 메소드의 인자가 private 선언된 배열에 저장되어 그 배열을 외부에서
                접근할 수 있게 되는 보안 약점
            - public 선언된 메소드의 인자를 private 선언된 배열에 저장되지 않도록 함으로서
                방지할 수 있음
(7) API 오용
    - 서비스에서 제공되는 사용법에 반하는 방법으로 API를 사용하거나 보안에 취약한 API를 사용해
        여러 가지 보안 약점이 발생할 수 있음
    - 종류
        - DNS lookup에 의존한 보안 결정
            - 도메인명에 의존해 인증이나 접근 통제 등의 보안 결정을 하면 공격자가 DNS 엔트리를
                속여 동일 도메인에 속한 서버인 것처럼 위장하는 보안 약점
            - 보안 결정 시 도메인명을 이용한 DNS lookup에 의존하지 않도록 함으로써
                방지할 수 있음
        - 취약한 API 사용
            - 보안 문제로 금지된 함수 또는 오용될 가능성이 있는 API 등의 취약한 API를 사용해
                발생하는 보안 약점
            - 보안 문제로 금지된 함수는 안전한 대체 함수를 사용함으로써 방지할 수 있음