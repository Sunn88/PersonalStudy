출제빈도 중
빈출태그 : 플랫폼 / OS / DBMS / Middle Ware

1) 플랫폼(Platform)
- 플랫폼
    - 다양한 애플리케이션이 작동하는 데 기본이 되는 운영체제 소프트웨어
    - 구성 : 응용 소프트웨어 + 하드웨어 + 시스템 소프트웨어
    - 종류 : Java 플랫폼, .NET 플랫폼, iOS, Android, Windows
    - 기능 : 개발/운영/유지보수 비용의 감소, 생산성 향상, 동일 플랫폼 간의 네트워크 효과
- 플랫폼 성능 특성 분석
    - 현 시스템의 사용자가 요구사항을 통해 시스템의 성능상의 문제를 요구할 경우 플랫폼 성능
        분석을 통해 사용자가 느끼는 속도를 파악하고 개선 방향을 제시할 수 있음
    - 플랫폼 성능 특성 분석 항목 : 응답시간(Response Time), 가용성(Availability),
        사용률(Utilization)
- 플랫폼 성능 특성 분석 방법
    - 기능 테스트(Performance Test) : 현재 시스템의 플랫폼을 평가할 수 있는 기능 테스트를
        수행함
    - 사용자 인터뷰 : 사용자를 대상으로 현행 플랫폼 기능의 불편함을 인터뷰함
    - 문서 점검 : 플랫폼과 유사한 플랫폼의 기능 자료를 분석함

2) 현행 시스템의 OS 분석
- OS(Operating System, 운영체제)의 개념
    - HW, SW 자원관리 및 공통 서비스 제공, 사용자와의 인터페이스를 제공
    - 종류 : Windows, Android, iOS, UNIX, LINUX, Mac OS 등
- 현행 시스템의 OS 분석 항목 및 고려사항
    - 현행 환경 분석 과정에서 라이선스의 종류, 사용자 수, 기술의 지속 가능성 등을 고려해야함
    - 분석 항목 : 현재 정보 시스템의 OS 종류와 버전, 패치 일자, 백업 주기 분석
    - 고려사항 : 가용성, 성능, 기술지원, 주변기기, 구축 비용(TCO)
        - TCO(Total Cost Of Ownership, 총 소유 비용)
            - 일정 기간 자산 획득에 필요한 직/간접적인 총비용
            - HW/SW 구매 비용, 운영 교육, 기술 지원, 유지보수, 손실, 에너지 사용 비용 등
            - 기업에서 사용하는 정보화 비용에 투자 효과를 고려한 총 소유 비용
                - 정보화 비용 : 컴퓨터의 구입 비용, 업그레이드와 같은 유지 보수 비용,
                    소프트웨어 구입 비용, 소프트웨어 교육의 비용 등
    - 메모리 누수 : 실행 SW가 정상 종료되지 않고 남아 있는 증상

3) 현행 시스템 DBMS 분석
- DBMS(DataBase Management System)
    - DB의 종속성과 중복성의 문제를 해결하기 위해 제안된 시스템
    - 응용 프로그램과 데이터의 매개체로 모든 응용 프로그램들이 데이터베이스를 공유할 수 있도록
        관리
    - 데이터베이스의 구성, 접근 방법, 관리 유지에 대한 모든 권한을 가짐
    - 종류 : Oracle, IBM, DB2, Microsoft SQL Sever, MySQL, SQ Lite, MongoDB, Redis
- 현행 시스템 DBMS 분석
    - DBMS 종류, 버전, 구성 방식, 저장 용량, 백업 주기, 업체의 유지 보수 여부를 분석
    - 테이블 수량, 데이터 증가 추이, 백업 방식 등 분석
    - 논리/물리 테이블의 구조를 파악해 각 테이블의 정규화 정도, 조인 난이도, 각종 프로시저,
        트리거 등 분석
- DBMS 분석 시 고려사항
    - 성능
        - 대규모 데이터 처리 성능(분할 테이블의 지원 여부)
        - 대량 거래 처리 성능 및 다양한 튜닝 옵션 지원
        - 비용 기반 최적화 지원 및 설정의 최소화
    - 가용성
        - 장시간 DBMS 운영 시 장애 발생 가능성
        - DBMS 패치 설치를 위한 재기동 시간
        - DBMS 이중화 및 복제 지원, 백업 및 복구 편의성
    - 기술 지원
        - 제조업체의 안정적인 기술 지원
        - 같은 DBMS 사용자들 간의 정보 공유
        - 오픈 소스 여부
    - 상호 호환성
        - 설치 가능한 운영체제 종류
        - 다양한 운영체제에서 지원되는 JDBC, ODBC
    - 구축 비용
        - 라이선스 정책 및 비용
        - 유지와 관리 비용
        - 총 소유 비용(TCO)
- 비즈니스 융합(Business Convergence) : 정보산업, 시장 간의 경계를 허물어 ICT 등을 통해
    새로운 전달 방식을 도입해 비즈니스 모델의 적용 범위를 확대하는 것
    - ICT(Information and Communications Technologies) : 정보기술 + 통신기술

4) 네트워크 구성도
- 업무 처리 시스템들이 어떠한 네트워크를 구성하고 있는지 그림으로 표현한 것
- 서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도 작성을 통해 파악할 수 있음
- 백본망, 라우터, 스위치, 게이트웨이, 방화벽 등 개발 대상 조직 내 서버들의 물리/구조적인
    위치 관계 파악, 조직 내 보안 취약성 분석 및 대응, 네트워크 장애 발생 시 장애의 추적 및
    대응 등 다양한 용도로 활용

5) 미들웨어 현행 시스템 분석
- 미들웨어(Middleware)
    - 운영체제와 소프트웨어 애플리케이션 사이에 위치함
    - 애플리케이션에 운영체제가 제공하는 서비스를 추가 및 확장해 제공하는 컴퓨터 소프트웨어
    - ex) 웹 애플리케이션 서버(WAS, Web Application Server)
    - 동적인 웹 사이트, 웹 애플리케이션, 웹 서비스의 개발을 지원하기 위해 설계된 소프트웨어
    - 데이터 접근, 세션 관리, 트랜잭션 관리 등을 위한 라이브러리 제공
    - 서버 계층에서 애플리케이션이 동작할 수 있는 환경 제공
    - 현행 시스템과 다른 이기종 시스템과의 애플리케이션 연동을 지원하는 서버
    - 안정적인 트랜잭션 처리와 관리 지원
- 미들웨어 현행 시스템 분석 시 고려사항
    - 성능
        - 대규모 거래의 요청이 있을 때 처리 가능 여부
        - 환경과 상황에 따라 다양한 설정 옵션을 제공하는지 여부
        - 가비지 컬렉션의 다양한 옵션
    - 가용성
        - 안정적인 트랜잭션 처리와 이중화 지원 가능 여부
        - 시스템 운영 시 장애 발생 가능성과 안정적인 트랜잭션 처리 여부
        - WAS의 버그나 취약점 해결을 위한 패치 설치 시 재기동 시간 등
    - 기술 지원
        - 제공사의 안정적인 기술 지원이 가능한지 아닌지 여부
        - 같은 시스템을 사용하는 사용자 간의 정보 공유 가능성 유무
        - 오픈 소스 여부
    - 구축 비용 : 구축 시 라이선스 정책이나 비용 등으로 인한 유지 관리 비용에 따른 총 소유
        비용의 범위가 구축 비용의 허용 범위 내인지 여부

6) 오픈 소스 라이선스
- 오픈 소스 라이선스의 개념
    - 소스코드가 공개되어 누구나 특별한 제한 없이 소스를 사용할 수 있도록 함
    - 대표적으로 LINUX
- 오픈 소스 사용 시 고려사항
    - 오픈 소스의 경우 해당 소스의 기술이 지속 가능한지 우선으로 고려하고 라이선스의 종류,
        사용자 수 등을 고려해야 함
    - 오픈 소스 레벨에 따라서 허용하는 범위를 파악하여 라이선스를 위반하지 않도록 주의  
- GNU(GNU`s Not Unix)
    - 유닉스(Unix)의 상업적 확산에 반발해 리처드 스톨먼과 그의 팀이 무료로 개발/배포하고 있는
        유닉스 호환 운영체제
    - 컴퓨터 프로그램은 물론 모든 관련 정보를 돈으로 구매하는 것을 반대하는 것이 기본 이념
- GNU 라이선스 종류
    - GNU GPLv1(General Public License)
        - 1989.1 발표
        - 소스코드를 공개하지 않으면서 바이너리만 배포하는 것을 금지
        - 사용할 수 있는 쉬운 소스코드를 같이 배포해야 함
    - GNU GPLv2
        - 1991.6 발표
        - '컴퓨터 프로그램을 어떤 목적으로든지 사용할 수 있다, 컴퓨터 프로그램의 복사를 언제나
            프로그램의 코드와 함께 판매 또는 무료로 배포할 수 있다, 변경된 컴퓨터 프로그램 역시
            프로그램의 코드와 함께 자유로이 배포할 수 있다.'
        - ex) Firefox, Linux Kernel Maria DB, Word press
    - GNU GPLv3
        - 2007.6 발표
        - 소프트웨어 특허에 대처하는 것을 정의
        - 다른 라이선스와의 호환성, 배포 후 특허권을 빌미로 기술료를 요구하는 행위를 원천 봉쇄
        - 특허권자가 저작권자와 다를 경우 특허 소유자가 기술료를 받지 않는 조건으로만 GPL 배포가
            가능함
    - GNU AGPLv3.0(GNU AfferoGPL)
        - 네트워크 서버용 Application Service Provider의 용도로 제정됨
        - ex) MongoDB
    - GNU LGPL(Library General Public License)
        - GPL보다는 훨씬 완화된(lesser) 조건의 공개 소프트웨어 라이선스
        - LGPL 코드를 정적 또는 동적 라이브러리로 사용한 프로그램을 개발/판매/배포할 때
            프로그램의 소스코드를 공개하지 않아도 됨
        - ex) Mozilla Firefox(2.1), OpenOffice
    - BSD(Berkeley Sofeware Distribution)
        - 아무나 개작할 수 있고, 수정한 것을 제한 없이 배포할 수 있음
        - 단, 수정본의 재배포는 의무적인 사항이 아님
        - 공개하지 않아도 되는 상용 소프트웨어에서도 사용할 수 있음
    - Apache 2.0
        - Apache 재단 소유 SW 적용을 위해 제공하는 라이선스
        - 소스코드 수정 배포 시 Apache 2.0을 포함해야 함
        - ex) Android, HADOOP
            - HADOOP : 다수의 저렴한 컴퓨터를 하나처럼 묶어 대량 데이터(Big Data)를 처리하는
                기술       