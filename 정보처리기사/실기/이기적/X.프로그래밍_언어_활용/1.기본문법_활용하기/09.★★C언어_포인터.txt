1) C언어 포인터의 개요
- 개념
    - 포인터(Pointer) : 객체에 대한 참조(Reference)하는 다른 객체를 가리키는 자료형
    - 고급 언어에서 사용되는 기법
    - C언어에서는 포인터 연산자를 통해 명시적으로 참조상황을 표현할 수 있음
    - Java언어에는 포인터 연산자가 존재하지 않음
- 특징
    - 객체를 참조하기 위해 주소를 값으로 하는 자료형
    - 커다란 배열에 원소를 효율적으로 저장할 떄 이용됨
    - 하나의 자료에 동시에 많은 리스트의 연결이 가능함
    - C/C++에서 포인터 변수를 선언할 때는 포인터 연산자(*)를 이용해 선언함
    - null값을 갖는 포인터 변수는 아무런 객체도 가리키고 있지 않다는 의미
    - 지원 언어 : PL/I, ALGOL, PASCAL, C, C++ 등
- 포인터 사용 시 문제점
    - 한 객체를 여러 포인터 변수가 가리키는 경우 어느 하나의 변수가 가리키고 있는 객체의 값을 바꾸면 나머지 포인터 변수의 의사와 상관없이 변경되어 혼란을 초래함
    - 한 객에체 대해 포인터가 하나도 없는 경우 객체에 대해 주소(참조) 값이 없어지기 때문에 객체로의 접근이 불가능해짐(Dangling Pointer)

2) 포인터 변수의 선언과 대입
- 포인터 변수는 변수값으로 메모리의 주소값을 가짐
- 포인터 변수의 선언문
    - int* p; 또는 int *p;

3) 포인터 변수와 관련 연산자
- &(주소 연산자) : 모든 변수에 대한 주소값을 구하는 연산자
- *(포인터 연산자, 간접 연산자) : 포인터 변수의 자료(내용)를 구하는 연산자