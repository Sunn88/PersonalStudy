1) 구조적 프로그램에서의 순서 제어
- 프로그램의 이해가 쉽고 디버깅 작업이 쉽도록 함
- 한 개의 입구(입력)와 한 개의 출구(출력) 구조를 갖도록 함
- GOTO문은 사용하지 않음
- 구조적 프로그래밍의 기본 구조
    - 순차(Sequence) 구조
    - 선택(Selection) 구조
    - 반복(Iteration) 구조
- 구조적 프로그램의 특징
    - 프로그램의 가독성이 좋으며 개발 및 유지보수가 용이함
    - 프로그래밍에 대한 규칙을 제공해 투자되는 노력과 시간이 감소함
    - 프로그램의 신뢰성이 향상됨

2) 제어문
- 주어진 조건의 결과값에 따라 프로그램의 수행 순서를 제어하거나 문장들의 수행 횟수를 조정하는 문장
- 프로그램의 흐름을 지시하는 데 사용되는 문장
- C언어의 제어문
    - 순차 구조
        - ex) int a;(변수 선언문) a=10+20;(변수 대입문)
    - 선택 구조
        - if문
        - swich~case문
    - 반복 구조
        - while문
        - do~while문
        - for문
    - 제어 명령문
        - break;
        - continue;
        - goto 레이블명;
- Java언어의 제어문
    - 순차 구조
        - ex) int a;(변수 선언문) a=10+20;(변수 대입문)
    - 선택 구조
        - if문
        - switch~case문
    - 반복 구조
        - while문
        - do~while문
        - for문
        - for~each문
    - 제어 명령문
        - break;
        - continue;

3) 단순 if문
- 조건식이 참일 경우만 블록 영역으로 진입해 문장 수행

4) if~else문과 조건 연산자
- 조건식이 참인 경우에는 문장1을 수행하고, 거짓인 경우 문장2를 수행함

5) 다중 if문
- 조건식1이 참인 경우에는 문장1을 수행하고, 조건식1이 거짓이지만 조건식2가 참인 경우는 문장2를 수행함
- 조건식1과 조건식2가 모두 거짓인 경우 문장3을 수행함

6) switch~case문
- 정수형 변수의 값이 어느 case문의 값과 일치하는지 찾아서 그 지점부터 switch 구문 마지막까지 모든 문장들을 수행함
- 만일 더 이상 밑에 있는 문장들을 수행하지 않고 switch 구문을 종료하고자 한다면 break; 문장을 적절한 곳에 명시함
