출제빈도 중
빈출 태그 : 보안 기능 적용 영역 / DB 암호화 알고리즘 / IPSec / SHA

1) 인터페이스 각 구간 구현 현황 분석
- 인터페이스가 각 구간의 보안 취약점을 분석함
- 분석된 보안 취약점을 근거로 단계별 인터페이스 보안 기능을 적용함
    - 데이터베이스 보안 기능 적용
        - 송신 데이터 선택 : 데이터베이스에서 송신 데이터를 선택함
        - 송신 객체 생성 : -
        - 인터페이스 송신 : -
        - 인터페이스 수신 : -
        - 데이터 처리 결과 전송 : 선택된 데이터를 처리하고 최종결과를 반환함
    - 애플리케이션 보안 기능 적용
        - 송신 데이터 선택 : APP 데이터를 애플리케이션 영역에서 선택함
        - 송신 객체 생성 : JSON, XML 등 객체를 생성함
        - 인터페이스 송신 : 생성된 객체를 수신측으로 송신함
        - 인터페이스 수신 : 생성된 객체를 수신하고 구문분석함
        - 데이터 처리 결과 전송 : 구문분석한 데이터를 처리하고 최종결과를 반환함
    - 네트워크 구간에 대한 보안 기능 적용
        - 송신 데이터 선택 : 애플리케이션과 데이터베이스간 DB Connection을 진행함
        - 송신 객체 생성 : -
        - 인터페이스 송신 : -
        - 인터페이스 수신 : 송신측과 수신측의 네트워크를 연결함
        - 데이터 처리 결과 전송 : 애플리케이션과 데이터베이스간 DB Connection을 진행함

2) 인터페이스 각 구간 보안 취약점 분석
- 송신 데이터 선택
    - 애플리케이션
        - 송신 데이터 선택, 객체 접근, 권한 탈취가 가능함
        - 객체 선택 시 SQL 검증이 필요함
    - 데이터베이스
        - 불완전한 입력값으로 인한 SQL Injection 취약점이 발생할 수 있음
    - 네트워크
        - DB 정보 전달 시 탈취 가능성, 악의적 서버 변조가 가능함
- 송신 객체 생성
    - 애플리케이션
        - 생성 객체 접근 권한 탈취가 가능함
        - 객체 생성 시 악의적인 코드 삽입이 가능함
- 인터페이스 송신
    - 애플리케이션
        - 송신 시점에서 악의적인 사이트로 전달(수신 변조)할 수 있음
    - 네트워크
        - 송수신 네트워크 통신 명세 탈취 및 위변조를 할 수 있음
- 인터페이스 수신
    - 애플리케이션
        - 구문분석 시 악의적 파서를 만들어 공격할 수 있음
        - 수신 객체 접근 권한 탈취가 가능함
- 데이터 처리 결과 전송
    - 애플리케이션
        - 데이터 처리 객체 접근 권한 탈취가 가능함
        - 악의적 데이터 삽입 및 위변조가 가능함
    - 데이터베이스
        - 프로시저에 악의적 입력값 삽입이 가능함(SQL Injection)
        - 에러 처리 미흡으로 강제적 내부 오류 발생 시 인지가 어려울 수 있음
    - 네트워크
        - DB 정보 전달 시 탈취 가능성, 악의적으로 반환값 변조가 가능함

3) 보안 적용
(1) 분석 정보를 통한 인터페이스 보안 기능 적용
    - 분석한 인터페이스 구현 현황과 각 구간의 인터페이스 기능 및 보안 취약점의 분석 내용을
        근거로 보안 기능을 적용함
(2) 네트워크 보안 적용
    - 인터페이스 송/수신 간 중간자에 의한 데이터 탈취 또는 위변조를 방지하기 위해
        네트워크 트래픽에 대한 암호화 적용이 요구됨
    - 네트워크 구간의 암호화를 위해서는 인터페이스 아키텍처에 따라 다양한 방식으로
        보안 기능을 적용함
    - 네트워크 구간 보안 기능 적용 시 고려사항
        - Transport Layer Network 보안
            - 상대방 인증을 적용 : IPSec AH(Authentication Header) 적용,
                IKE(Internet Key Exchange) 프로토콜 적용
                - IPSec AH : IP 데이터그램에 대한 메시지 체크섬(Checksum)을 활용한 데이터 인증과
                    비연결형 무결성을 보장해 주는 프로토콜
                    - Checksum : 데이터의 정확성을 검사하기 위한 용도로 사용되는 합계
                        -> 이를 이용해 오류를 검출하는 도구로 사용함
            - 데이터 기밀성 보장이 필요 : IPSec ESP(Encapsulation Security Payload)를 적용
            - End-to-End 보안을 적용 : IPSec Transport Mode를 적용
        - Application Layer Network 보안
            - 서버만 공개키 인증서를 가지고 통신(위험 분산) : SSL(Secure Socket Layer)의
                서버 인증 상태를 운영
            - 연결 단위 외 메시지 단위로도 인증 및 암호화가 필요함 : S-HTTP를 적용해 메시지를
                암호화함(상호 인증 필요, 성능 일부 저하됨)
(3) 애플리케이션 보안 적용
    - 애플리케이션 구현 코드상의 보안 취약점을 발견하고 보완하는 방향으로 애플리케이션 보안 기능을 적용함
    - 시큐어 코딩 가이드를 참조해 보안 기능을 적용함
    - 비인가자 접근 권한 관리
        - public, private, protected 권한 관리 등의 객체 접근 권한을 고려해 구현함
        - 변수를 직접 접근할 수 없게 하고 접근 권한을 가진 함수(메소드)만 접근할 수 있게 함
    - 악의적 코드 삽입 금지
        - 특수문자를 통한 SQL 변조 시도 등 악의적인 공격 패턴을 입력하지 못하도록 사전에 방지함
    - 악의적 시도 시 에러 처리
        - 악의적 공격 시도 시 사용자 정의 예외처리를 적용하고 에러 처리내용이 외부에서
            조회되지 않도록 권한을 관리함
(4) 데이터베이스 보안 적용
    - 데이터베이스의 기밀성 유지를 위해 중요하고 민감한 데이터는 암호화 기법을 활용해
        암호화하도록 함
    - 데이터베이스의 접근 권한 및 SQL, 프로시저, 트리거 등 데이터베이스 동작 객체의
        보안 취약점을 보완하도록 함
    - 민감하고 중요한 데이터는 암호화와 익명화 등을 통해 데이터 자체 보안 방법도 고려해야 함
    - 중요도가 높거나 민감한 정보를 통신 채널을 통해 전송 시에는 반드시 암/복호화 과정을
        거치도록 함
    - IPSec, SSL/TLS 등의 보안 채널을 활용해 전송함
        - IPSec(Internet Protocol Security) : 통신 세션의 각 IP 패킷을 암호화하고 인증하는
            안전한 인터넷 프로토콜(IP) 통신을 위한 프로토콜
        - TLS(Transport Layer Security) : 공개키 기반의 국제 인터넷 표준화 기구에서 표준으로
            지정한 인터넷에서 정보를 암호화해 수신하는 프로토콜
    - 비인가자 접근 관리
        - 데이터베이스, 스키마, 엔티티의 접근 권한을 관리
            (접근 권한 객체 관리 수준은 성능과 보안성을 고려해 관리)하도록 함
    - 악의적 코드 삽입 금지
        - 프로시저, 트리거, 배치 등 데이터베이스 객체의 동작상에 악의적인 코드가 삽입되지
            않도록 동작 간 보안 처리를 함
    - 민감 데이터 관리
        - 개인정보나 업무상 민감 데이터는 암/복호화나 익명화 처리를 통해 데이터베이스에서 관리함
    - 악의적 시도 시 에러 처리
        - 공격 패턴에 대한 사용자 정의 예외처리를 적용하고 처리 내용이 외부에서 조회되지 않도록
            권한을 관리함
    - 데이터베이스 암호화 알고리즘
        - 대칭키 알고리즘 : ARIA 128/129/256, SEED
        - 해시 알고리즘 : SHA-256/384/512, HAS-160
            - SHA(Secure Hash Algorithm) : 1993년 미국 NIST에 의해 개발되어 가장 많이 사용되고
                있는 방식
                - SHA-1은 DSA에서 사용하게 되어 있으며, 많은 인터넷 응용에서
                    default 해시 알고리즘으로 사용됨
                - SHA-256, SHA-384, SHA-512는 ARS의 키 길이인 128, 192, 256bit에 대응하도록
                    출력 길이를 늘인 해시 알고리즘
        - 비대칭키 알고리즘 : RSA, ECDSA, ECC
            - RSA(Rivest Shamir Adleman) : 소인수 분해의 어려움에 기초를 둔 알고리즘
                -> 전자문서에 대한 인증 및 부인 방지에 활용돰
    - 데이터베이스 암호화 기법
        - API 방식
            - 개념 : 애플리케이션 레벨에서 암호 모듈(API)를 적용하는 방식
            - 암호화/보안 방식 : 별도의 API 개발/통합
            - 서버 성능 부하 : 애플리케이션 서버에서 암호화/복호화, 정책 관리, 키 관리를 하므로
                부하가 발생함
            - 시스템 통합 용이성 : 애플리케이션 개발 및 통합 기간이 필요함
            - 관리 편의성 : 애플리케이션 변경 및 암호화 필드를 변경하는 유지보수가 필요해짐
        - Filter(Plug-in) 방식
            - 개념 : 데이터베이스 레벨의 확장성 프로시저 기능을 이용해 DBMS에 Plugin
                또는 Snapin 모듈 형식으로 작성하는 방식
            - 암호화/보안 방식 : DB 내 설치/연동
            - 서버 성능 부하 : DB 서버에 암호화, 복호화, 정책 관리 키 관리를 하므로
                부하가 발생함
            - 시스템 통합 용이성 : 애플리케이션 변경이 필요치 않아 용이성이 높음
            - 관리 편의성 : 관리자용 GUI를 이용해 DB 통합 관리가 가능해 편의성이 높음
        - Hybrid 방식
            - 개념 : API/Filter 방식을 결합하거나, Filter 방식에 추가로 SQL문에 대한 최적화를
                대행해주는 어플라이언스를 제공하는 방식
                - 어플라이언스(appliance) : 각종 기업용 SW를 서버와 스토리지 등을 HW에 최적화해
                    통합한 장비
                    -> 별도의 OS나 SW를 설치하지 않아도 전원을 켜면 곧바로 사용할 수 있음
            - 암호화/보안 방식 : 어플라이언스/DB 내 설치
            - 서버 성능 부하 : DB와 어플라이언스에서 부하가 분산됨
            - 시스템 통합 용이성 : 애플리케이션 변경이 필요치 않아 용이성이 높음
            - 관리 편의성 : 관리자용 GUI를 이용해 DB 통합 관리가 가능해 편의성이 높음

4) 소프트웨어 연계 테스트
- 연계 테스트 개념
    - 내/외부 연계 모듈 구현 중 송/수신 시스템 간 구성요소가 정상적으로 동작하는지 확인하는 활동
    - 연계 테스트 케이스 작성, 연계 테스트 환경 구축, 연계 테스트 수행, 연계 테스트 수행 결과
        검증 순으로 진행됨
- 연계 테스트 케이스(Testcase)
    - 송/수신 시스템에서 데이터와 프로세스의 흐름을 분석해 확인사항을 도출하는 과정
    - 송/수신 시스템 각각에서 연계 응용 프로그램의 단위 테스트 케이스와 연계 테스트 케이스를
        작성함
    - 송/수신용 연계 응용 프로그램의 단위 테스트 케이스 작성
        -> 송신 시스템에서 연계 테스트 추출이 제대로 되었는지, 연계 데이터가 수신 시스템에 맞게
            코드 변환이 제대로 되었는지 확인해 작성함
    - 연계 통합 테스트 케이스 작성
        -> 송/수신용 연계 응용 프로그램의 기능 위주 결함을 확인하는 통합 테스트 케이스로 작성함
- 연계 테스트 분류
    - 소프트웨어 연계 테스트 구간 : 송신 시스템에서 연계 서버 또는 중계 서버를 거치고
        수신 시스템까지 데이터가 정상 전달되는지 테스트
    - 소프트웨어 연계 단위 테스트
        - 송신 시스템에서 연계 데이터를 추출 및 생성하고 이를 연계 테이블로 생성함
        - 연계 서버 또는 중계 서버가 있는 경우 연계 테이블 간 송/수신을 함
        - 연계 자체만을 테스트함
    - 소프트웨어 연계 통합 테스트 : 연계 테스트보다 큰 통합 기능 테스트의 일부로서
        연계 통합 테스트를 수행함
- 연계 테스트 수행 순서
    - 연계 테스트 케이스 작성 -> 연계 테스트 환경 구축 -> 연계 테스트 수행
        -> 연계 테스트 수행 결과 검증