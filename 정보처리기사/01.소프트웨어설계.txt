1. 소프트웨어 공학의 개념
1)  소프트웨어
- 소프트웨어(Software)의 개념
    - 프로그램과, 프로그램의 수행에 필요한 절차, 규칙, 관련 문서 등의 총칭
    - 프로그램 : 컴퓨터를 동작시키고, 어떤 일의 처리 순서와 방법을 지시하는 명령어의 집합
        -> 컴퓨터를 통해 일련의 작업을 처리하기 위한 명령어와 관련된 데이터의 집합
    - 자료 구조(Data Structure) : 컴퓨터 기억 장치 내에 자료의 표현, 처리, 저장 방법 등의 총칭
        -> 데이터 간의 논리적 관계나 처리 알고리즘
    - 문서(Paper) : 소프트웨어 개발함에 있어 사용자 설명서, 소프트웨어 요구 분석서, 평가서, 명세서, 프로젝트 계획서, 검사 계획서 등을 의미함
- 소프트웨어의 특징
    - 상품성 : 소프트웨어를 개발하면 상품이 되어 판매가 됨
    - 복잡성 : 개발하는 과정이 복잡하고 관리가 어려움
    - 변경 가능성 : 프로그램을 일부 수정하여 업그레이드 및 오류 수정 가능
    - 복제성 : 복제가 용이해 쉽게 복사, 유통이 가능
- 시스템(System)의 개요와 기본 요소
    - 시스템의 개요 : 컴퓨터로 처리 가능한 자료를 입력, 저장, 처리, 가공해 출력할 수 있도록 설계/구현된 정보체계
        하나의 목적을 위해 다양한 요소가 유기적으로 결합된 것
    - ★기본 요소
        - 입력 : 처리 방법, 제어 조건, 처리할 데이터를 시스템에 투입하는 요소
        - 처리 : 입력된 자료를 처리 조건에 따라 변환 및 가공하는 요소
        - 출력 : 처리된 결과를 시스템에서 출력하는 요소
        -  제어 : 시스템의 기본 요소들이 각 과정을 올바르게 행하는지 감독하는 요소
        - 피드백 : 처리된 결과를 측정, 파악하여 목표에 도달되었는가를 검사하며 만일 불충분할 경우 목표 달성을 위해 다시 입력하는 요소
- ★소프트웨어 위기(Software Crisis)
    - 컴퓨터의 발달 과정에서 소프트웨어의 개발 속도가 하드웨어의 개발 속도를 따라가지 못해 사용자들의 요구사항을 감당할 수 없는 문제가 발생함
    - 원인
        - 하드웨어 비용을 초과하는 개발 비용의 증가
        - 개발 기간의 지연
        - 개발 인력 부족 및 인건비 상승
        - 성능 및 신뢰성 부족
        - 유지보수의 어려움에 따른 엄청난 비용
2) 소프트웨어 공학(Software Engineering)
- 소프트웨어 공학의 이해
    - 경제적으로 신뢰도 높은 소프트웨어를 만들기 위한 방법, 도구와 절차들의 체계
    - IEEE(전기전자학회)의 정의 : 소프트웨어의 개발, 운용, 유지보수 및 파기에 대한 체계적인 접근 방법
- ★소프트웨어 공학의 기본 원칙
    - 현대적인 프로그래밍 기술을 적용해야
    - 신뢰성이 높아야
    - 사용의 편리성과 유지보수성이 높아야
    - 지속적인 검증 시행을 해야
    - 결과에 대한 명확한 기록을 유지해야
    - 사용자가 원하는 대로 동작해야
    - 시스템의 안전성과 보안에 만전을 기해야
    - 최신 프로그램 언어, 최신 알고리즘 사용 현황을 확인해야
    - 소프트웨어 개발 비용을 최소화하도록 노력해야
    - 개발 단계와 소스 코드 등의 문서화를 통해 명확성을 유지해야
- 공학적으로 좋은 소프트웨어의 조건
    - 신뢰성이 높고 효율적이어야 하며, 사용자의 의도대로 동작해야
    - 편리성 제공 및 잠재적 에러를 최소화해야
    - 유지보수성이 용이해야
- 소프트웨어 공학 계층 구조
    - 도구 : 프로세스와 방법을 처리하는 기능을 제공
    - 방법론 : 소프트웨어를 설계하는 데 기술적인 방법을 제공
    - 프로세스 : 소프트웨어의 가장 기초 
        -> 개발에 사용되는 방법론과 도구가 적용되는 순서
- 소프트웨어 품질
    - 사용자의 요구대로 만들어져야
    - 유지보수가 쉬워야
    - 에러를 최소화해야
    - 초반에 정한 비용에 맞춰 개발해야
    - 정확한 결과가 도출되어야
    - 원하는 시간에 원하는 기능을 수행할 수 있어야
- 소프트웨어 공학의 목표
    - 최소의 비용으로 단기간에 시스템에 적합한 소프트웨어를 개발하는 것
    - 소프트웨어 제품의 품질을 향상시키고 소프트웨어 생산성과 작업 만족도를 증대시키는 것
    - 신뢰성 있는 소프트웨어를 경제적인 비용으로 획득하기 위해 공학적 원리를 정립하고 이를 이용하는 것

2. 재공학
1) 재공학
- 소프트웨어 재공학(Software Reengineering)의 개념 및 목표
    - 소프트웨어 위기를 개발의 생산성이 아닌 유지보수의 생산성으로 해결하려는 방법을 의미
    - 재구조화는 재공학의 한 유형 
        -> 사용자의 요구사항이나 기술적 설계의 변경 없이 프로그램을 개선하는 것
    - 예방 유지보수(Preventive Maintenance) : 소프트웨어 재공학 관점에서 가장 연관 깊은 유지보수 유형
    - 재사용을 수월하게 하며 소프트웨어의 수명을 연장하게 위해
- ★재공학의 장점
    - 개발 시간과 비용을 감소시킴
    - 프로젝트 실패의 위험을 감소시킴
    - 소프트웨어의 품질 및 생산성을 향상시킴
    - 구축 방법에 대한 개발 지식을 공유할 수 있음
- 재공학의 과정
    - 분석(Analysis) : 기존 소프트웨어의 명세서를 확인하여 소프트웨어의 동작을 이해하고 재공학 대상을 선정
    - 재구성(Restructuring) : 소프트웨어 구조를 향상시키기 위해 코드를 재구성
    - 역공학(Reverse Engineering) : 원시 코드를 분석하여 소프트웨어 관계를 파악하고 기존 시스템의 설계 정보를 재발견하여 다시 제작하는 작업
    - ★이식(Migration) : 기존 소프트웨어 시스템을 새로운 기술 도는 하드웨어 환경에서 사용할 수 있도록 변환하는 작업
- 재사용의 2가지 기본 기술
    - 생성 중심(Generation Based, 모듈화) : 재사용 단위를 찾아 발전시키는 기술
        -> 전자침 같은 유용한 소프트웨어 부품을 찾아내는 기술
    - 합성 중심(Composition Based, 모델화) : 모듈을 생산성 있게 조립하는 기술
        -> 블록(모듈)을 만들어서 끼워 맞추는 방법으로 소프트웨어를 완성시키는 기술
- 리팩토링(Refactoring) : 겉으로 보이는 동작의 변화 없이 내부 구조를 변경하는 것
    -> 소프트웨어를 보다 쉽게 이해할 수 있고, 적은 비용으로 수정할 수 있도록
2) CASE(Computer Aided Software Engineering)
- CASE
    - 소프트웨서 개발 과정에서 사용되는 요구 분석, 설계, 구현, 검사 및 디버깅 과정을 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화하는 작업
    - 자료 흐름도 등의 다이어그램을 쉽게 작성하게 해주는 소프트웨어 도구
    - 작업 과정 및 데이터 공유를 통해 작업자 간의 커뮤니케이션을 증대
- CASE가 제공하는 기능

3.소프트웨어 개발 방법론

4. SCRUM

5. 현행 시스템 분석

6. 요구사항 개발

7. UML

8. UI 환경 번숙

9. UI 내 표준 및 지침

10. UI 설계