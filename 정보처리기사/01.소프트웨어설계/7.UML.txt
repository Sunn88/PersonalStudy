1) 개념 모델링(Conceptual Modeling)
- 개념 모델링
    - 모델 : 요구사항을 이해하기 쉽도록 실 세계의 상황을 단순화하여 개념적으로 표현한 것
    - 개념 모델링 : 모델을 생성해 나가는 과정
    - 모델은 문제가 발생하는 상황에 대한 이해를 증진하고 해결책을 설명함
        - 소프트웨어 요구사항 분석의 핵심
    - 개발 대상 도메인의 엔티티들과 그들의 관계 및 종속성을 반영함
    - 요구사항별로 관점이 다르므로 개념 모델도 다양하게 표현되어야 함
    - 대부분 UML을 사용함
    - 종류 : Use Case Diagram, Data Flow Model, State Model, Goal-Based Model, User Interactions, Object Model, Data Model
2) UML(Unified Modeling Language)
- UML
    - 객체지향 소프트웨어 개발 과정에서 시스템 분석, 설계, 구현 등의 산출물을 명세화, 시각화, 문서화할 떄 사용하는 모델링 기술과 방법론을 통합해 만든 범용 모델링 언어
    - Rumbaugh의 OMT 방법론과 Booch의 Booch 방법론, Jacobson의 OOSE 방법론을 통합해 만든 모델링 개념의 공통집합
        - 객체지향 분석 및 설계 방법론의 표준 지정을 목표로 제안된 모델링 언어
    - OMG(Object Management Group)에서 표준화 공고 후 IBM, HP, Microsoft, Oracle 등이 참여해 1997.1 버전 1.0을 Release함
- ★★럼바우(Rumbaugh) 객체지향 분석 기법
    - 소프트웨어 구성 요소를 그래픽으로 모형화함
    - 객체 모델링(객체 다이어그램) : 시스템에서 요구되는 객체를 찾아내어 속성과 연산 식별 및 객체 간의 관계를 규정하여 객체를 다이어그램으로 표시함(정보 모델링)
    - 동적 모델링(상태도) : 제어 흐름, 상호작용, 동작 순서 등의 상태를 시간 흐름에 따라 상태 다이어그램으로 표시함
    - 기능 모델링(자료 흐름도) : 여러 프로세스 간의 자료 흐름을 표시함
        - 어떤 데이터를 입력해 어떤 결과를 가져올 수 있을지를 표현함
- UML의 특성
    - 비주얼화 : 소프트웨어 구성 요소 간의 관계 및 상호작용을 시각화한 것
    - 문서화 : 소프트웨어 생명주기의 중요한 작업을 추적하고 문서화할 수 있음
        - 개발 프로세스 및 언어와 무관하게 개발자 간의 의사소통 도구를 제공함
    - 명세화 : 분석, 설계, 구현의 완벽한 모델을 제공함
        - 분석단계-기능 모델, 설계 단계-동작 수준 모델, 구현 단계-상호작용 모델 수준으로 명세화할 수 있음
        - 단순 표기법이 아닌 구현에 필요한 개발적 요소 및 기능에 대한 명세를 제공함
    - 구출 : 객체지향 언어와 호환되는 프로그래밍 언어는 아니지만, 모델이 객체지향 언어로 매핑될 수 있음
- UML 소프트웨어에 대한 관점
    - 기능적 관점 : 사용자 측면에서 본 소프트웨어의 기능을 나타냄
        - 사용사례 모델링
        - 요구분석 단계에서 사용함
        - UML에서는 Use Case Diagram 사용함
    - 정적 관점 : 소프트웨어 내부의 구성 요소 사이의 구조적 관계를 나타냄
        - 객체, 속성, 연관 관계, 오퍼레이션의 시스템 구조를 나타냄
        - UML에서는 Class Diagram을 사용함
        - ex) 클래스 사이의 관계, 클래스 구성과 패키지 사이의 관계
    - 동적 관점 : 시스템의 내부 동작
        - UML에서는 Sequence Diagram, State Diagram, Activity Diagram을 사용함
        - State Diagram(순차 다이어그램) : 회귀 메시지(Self-Message), 제어 블록(Statementblock) 등으로 구성
- UML의 기본 구성
    - 사물(Things) : 객체지향 모델을 구성하는 기본 요소를
        - 객체 간의 관계 형성 대상
        - 종류
            - 구조 사물(Structural Things) : 시스템의 개념적, 물리적 요소를 표현(Class, Usecase, Component, Node)
            - 행동 사물(Behavioral Things) : 시간과 공간에 따른 요소들의 행위를 표현(Interaction, State Machine)
            - 그룹 사물(Grouping Things) : 요소들을 그룹으로 묶어서 표현(Package)
            - 주해 사물(Annotation Things) : 부가적인 설명이나 제약조건들을 표현(Note)
    - 관계(Relationship) : 객체 간의 연관성을 표현하는 것
        - 종류 : 연관, 집합, 포함, 일반화, 의존, 실체화
    - 다이어그램(Diagram) : 객체의 관계를 도식화한 것
        - 다양한 관점에서 의사소통할 수 있도록 View 제공함
        - 정적 모델 : 구조 다이어그램
        - 동적 모델 : 행위 다이어그램
- 스테레오 타입
    - UML에서 제공하는 기본 요소 외에 추가적인 확장 요소를 표현할 때 사용함
    - UML 확장 모델에서 스테레오 타입 객체를 표현할 떄 사용하는 기호는 길러멧(Guillemet) <<>>이며, 길러멧 안에 확장 요소를 적음
- UMl 접근 제어자 : JAVA의 접근 제어자와 공유됨
    - public : + : 어떤 클래스의 객체에서든 접근 가능함
    - private : - : 해당 클래스로 생성된 객체만 접근 가능함
    - protected : # : 해당 클래스와 동일 패키지에 있거나 상속 관계에 있는 하위 클래스의 객체들만 접근 가능함
    - package : ~ : 동일 패키지에 있는 클래스의 객체들만 접근 가능함
- 연관 관계 다중성 표현
    - 1 : 1 개체 연결
    - * 또는 0..* : 0이거나 그 이상 객체 연결
    - 1..* : 1이거나 1 이상 객체 연결
    - 0..1 : 0이거나 1 객체 연결
    - 1, 3, 6 : 1이거나 3이거나 6 객체 연결
    - n : n개 객체 연결
    - n..* : n이거나 n개 이상 객체 연결
3) ★UML 다이어그램의 분류
- 구조적 다이어그램(Structured Diagram) : 정적이고, 구조 표현을 위한 다이어그램
    - 클래스 다이어그램(Class Diagram) : 시스템 내 클래스의 정적 구조를 표현하고 시스템을 구성하는 클래스들 사이의 관계를 표현함
    - 객체 다이어그램(Object Diagram) : 객체 정보를 보여줌
    - 복합체 구조 다이어그램(Composite Structure Diagram) : 복합 구조의 클래스와 컴포넌트 내부 구조를 표현함
    - 배치 다이어그램(Deployment Diagram) : 소프트웨어, 하드웨어, 네트워크를 포함한 실행 시스템의 물리 구조를 표현함
    - 컴포넌트 다이어그램(Component Diagram) : 컴포넌트 구조 사이의 관계를 표현함
    - 패키지 다이어그램(Package Diagram) : 클래스나 유스케이스 등을 포함한 여러 모델 요소들을 그룹화해 패키지를 구성하고 패키지들 사이의 관계를 표현함
- 행위 다이어그램(Behavior Diagram) : 동적이고, 순차적인 표현을 위한 다이어그램
    - 유스케이스 다이어그램(Use Case Diagram) : 사용자 관점에서 시스템 행위를 표현함
    - 활동 다이어그램(Activity Diagram) : 업무 처리 과정이나 연산이 수행되는 과정을 표현함
    - 상태 머신 다이어그램(State Machine Diagram) : 객체의 생명주기를 표현함
        - 동적 행위를 모델링하지만 특정 객체만을 다룸
        - ex) 실시간 임베디드 시스템, 게임, 프로토콜 설계에 이용
    - 협력 다이어그램(Collaboration Diagram) : Sequence Diagram과 같으며 모델링 공간에 제약이 없어 구조적인 면을 중시함
    - 상호작용 다이어그램(Interaction Diagram)
        - 순차 다이어그램(Sequence Diagram) : 시스템의 동작을 정형화하고 객체의 메시지 교환을 쉽게 표현하고 시간에 따른 메시지 발생 순서를 강조함
            - 구성 요소 : 객체(Object), 생명선(Lifeline), 실행(Activation), 메시지(Message), 시간(Time)
        - 상호작용 개요 다이어그램(Interaction Overview Diagram) : 여러 상호작용 다이어그램 사이의 제어 흐름을 표현함
        - 통신 다이어그램(Communication Diagram) : 객체 사이의 관계를 중심으로 상호작용을 표현함
        - 타이밍 다이어그램(Timing Diagram) : 객체 상태 변화와 시간 제약을 명시적으로 표현함
4) 클래스 다이어그램 관계 표현
- Class Diagram
    - 시스템을 구성하는 객체 간의 관계를 추상화한 모델을 논리적 구조로 표현함
    - 객체지향 개발에서 공통으로 사용됨
    - 분석, 설계, 구현 단계 전반에 지속해서 사용됨
- UML 관계 표현(38p 표)
    - 단방향 연관 관계 : 한쪽은 알지만 반대쪽은 상대방 존재를 모름
    - 양방향 연관 관계 : 양쪽 클래스 객체들이 서로의 존재를 인식
    - 의존 관계 : 연관 관계와 같지만 메소들르 사용할 떄와 같이 매우 짧은 시간만 유지
    - 일반화 관계 : 객체지향에서 상속 관계(IS-A)를 표현하며, 한 클래스가 다른 클래스를 포함하는 상위 개념일 때 사용
    - 집합/포함 관계
        - 클래스 사이 전체나 부분이 같은 관계
        - 전체/부분 객체 라이프타임 의존적(전체 객체 삭제 -> 부분 객체 삭제)
    - 실체화 관계 : 책임 집합 인터페이스와 실제로 실현한 클래스들의 사이
- UML 연관 관계(Association Relation)
    - 한 사물의 객체가 다른 사물의 객체와 연결된 것을 표현함
    - 두 클래스가 서로 연관이 있다면 A, B 객체를 서로 참조할 수 있음을 표현함
    - 이름 : 관계의 의미를 표현하기 위해 이름을 가질 수 있음
    - 역할 : 수행하는 역할의 명시적 이름을 가질 수 있음
- UML 의존 관계(Dependency Relation)
    - 연관 관계와 같지만 메소드를 사용할 떄와 같이 매우 짧은 시간만 유지됨
    - 영향을 주는 객체(User)에서 영향을 받는 객체 방향으로 점선 화살표를 연결함
- UML 일반화 관계(Generalization Relation)
    - 객체지향에서 상속 관계를 표현함
    - 한 클래스가 다른 클래스를 포함하는 상위 개념일 때 사용함
- UML 집합 관계(Aggregation Relation)
    - A 객체가 B 객체에 포함된 관계임
    - '부분'을 나타내는 객체를 다른 객체와 공유할 수 있음
    - '전체' 클래스 방향에 빈 마름모로 표시하고, or 관계에 놓이면 선 사이를 점선으로 잇고 {or}를 표시함
- UML 포함 관계(Composition Relation)
    - 부분 객체가 전체 객체에 속하는 강한 집합 연관의 관계를 표현하는 클래스
    - '부분' 객체는 다른 객체와 공유 불가하고, '전체' 객체 방향에 채워진 마름모로 표시함
- UML 실체화 관계(Realization Relation)
    - 인터페이스와 실제 구현된 일반 클래스 간의 관계로 존재한느 행동에 대한 구현을 표현함
    - 한 객체가 다른 객체에게 오퍼레이션을 수행하도록 지정하는 의미적 관계임
5) Use Case Diagram
- Use Case Diagram의 개념
    - 객체지향 초반기 분석 작업에 작성되는 사용자의 요구를 기능적 측면에서 기술할 떄 사용하는 도구로 Actor와 Use Case로 구성됨
    - 얻어지는 결과는 개발 대상 시스템이 제공해야 하는 서비스 목록이 됨
- Use Case Diagram 요소
    - 시스템 경계(System Boundary)
        - 시스템이 제공해야 하는 사례(Use Case)들의 범위가 됨
        - 큰 규모의 객체로 구현되는 존재임
    - 액터(Actor)
        - 서비스를 이용하는 외부 객체
        - 시스템이 특정한 사례(Use Case)를 실행하도록 요구할 수 있는 존재
    - 유스케이스(Use Case)
        - 시스템이 제공해야 하는 개별적인 서비스 기능
        - 서비스는 특정 클래스ㅢ 멤버 함수로 모델링됨
- Use Case의 구성 요소 간의 관계 : 액터와 유스케이스 사이의 의미 있는 관계를 나타냄
    - 연관 관계(Association) : 유스케이스와 액터 간의 상호작용이 있음을 표현
    - 의존 관계(Dependency)
        - 포함 관계(Include) : 하나의 유스케이스가 다른 유스케이스의 실행을 전제로 할 때 형성되는 관계
        - 확장 관계(Extende) : 확장 기능 유스케이스와 확장 대상 유스케이스 사이에 형성되는 관계
            - 확장 대상 유스케이스를 수행할 떄 특정 조건에 따라 확장 기능 유스케이스를 수행하는 경우에 적용됨
    - 일반화 관계(Generalization) : 유사한 유스케이스 또는 액터를 모아 추상화한 유스케이스 또는 액터와 연결시켜 그룹을 만들어 이해도를 높이기 위한 관계
- Use Case Diagram 작성 단계
    - 액터 식별
        - 모든 사용자 역할과 상호작용하는 타 시스템을 식별함
        - 정보를 주고받는 하드웨어 및 지능형 장치를 식별함
    - Use Case 식별
        - 액터가 요구하는 서비스와 정보를 식별함
        - 액터가 시스템과 상호작용하는 행위를 식별함
    - 관계 정의
        - 액터와 액터 그리고 액터와 유스케이스의 관계 분석을 정의함
        - 유스케이스와 유스케이스 간의 관계 분석을 정의함
    - Use Case 구조화
        - 두 개의 상위 Use Case에 존재하는 공통 서비스를 추출함
        - 추출된 서비스로 USe Case를 정의함
        - 추출된 서비스를 사용하는 Use Case와 관계를 정의함
        - 조건에 따른 서비스 수행 부분 분석하여 구조화함