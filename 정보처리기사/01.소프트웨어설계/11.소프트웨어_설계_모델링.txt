1) 소프트웨어의 설계(Design)
- 소프트웨어 설계 모델링
    - 정의 : 요구사항(기능, 성능)을 마족하는 소프트웨어의 내부 구조 및 동적 행위들을 모델링하여 표현하고, 분석, 검증하는 과정
        - 이 과정에서 만들어지는 산출물을 의미함
    - 목적 : "무엇을(What)"으로부터 "어떻게(How)"로 관점을 전환하면서 최종 제작할 소프트웨어의 청사진을 만드는 것을 의미함
- 소프트웨어 설계 : 본격적인 프로그램의 구현에 들어가기 전에 소프트웨어를 구성하는 뼈대를 정의해 구현의 기반을 만드는 것을 의미함
    - 상위 설계(High-Level Design)와 하위 설계로 구분됨
- 설계dml 기본 원리 : 분할과 정복, 추상화, 단계적 분해, 모듈화, 정보은닉
- ★소프트웨어 설계 분류
    - 상위 설계 : 아키텍처 설계, 데이터 설계, 시스템 분할, 인터페이스 설계
    - 하위 설계 : 모듈 설계, 자료 구조 설계, 알고리즘 설계
- 상위 설계(High-Level Design) : 아키텍처 설계(Architecture Design), 예비 설계(Preliminary Design)라고 하며 전체 골조(뼈대)를 세우는 단계
    - 아키텍처(구조) 설계 : 시스템의 전체적인 구조
    - 데이터 설계 : 시스템에 필요한 정보를 자료 구조/데이터베이스 설계에 반영
    - 시스템 분할 : 전체 시스템을 여러 개의 서브 시스템으로 분리
    - 인터페이스 설계 : 시스템의 구조와 서브 시스템들 사이의 관계
    - 사용자 인터페이스 설계 : 사용자와 시스템의 관계
- 하위 설계(Low-Level Design) : 모듈 설계(Module Design), 상세 설계(Detail Design)라고 하며, 시스템 각 구성 요소들의 내부 구조, 동적 행위 등을 결정하여 각 구성 요소의 제어와 데이터 간의 연결에 대한 구체적인 정의를 하는 단계
    - 하위 설계 방법 : 절차 기반(Procedure-Oriented), 자료 위주(Data-Oriented), 객체지향(Object-Oriented) 설계 방법
- 모듈(Module)이 되기 위한 주요 특징
    - 다른 것들과 구별될 수 있는 독립적인 기능을 가진 단위(Unit)
    - 독립적인 컴파일이 가능해야 하고, 유일한 이름을 가져야 함
    - 다른 모듈에서의 접근이 가능해야 함
- 소프트웨어 설계 대상
    - 구조 모델링
        - SW를 구성하는 컴포넌트의 유형, 인터페이스, 내부 설계 구조 등 상호 연결 등의 구조를 모델링하는 것
        - 구성 요소에는 프로시저, 데이터 구조, 모듈, 파일 구조 등이 있음
        - 구성 요소들의 연결 구조, 포함 관계를 시스템 구조라 함
    - 행위 모델링
        - 소프트웨어의 구성 요소들 기능과 구성 요소들이 언제, 어던 순서로 기능을 수행하고 상호작용하는지를 모델링하는 것
        - 시스템 각 구성 요소들의 기능적인 특성을 모델링하는 것
        - 입/출력 데이터, 데이터의 흐름과 변환, 데이터의 저장, 실행 경로, 상태 전이, 이벤트 발생 순서 등의 행위 모형화에 속함
- 소프트웨어 설계 방법
    - 구조적 설계
        - 기능적 관점으로 소프트웨어에 요구된 기능이나 자료 처리 과정, 알고리즘 등을 중심으로 시스템을 나눠 설계하는 방식
        - 시스템의 각 모듈은 최상위 기능에서 하위 기능으로 하향적으로 세분화함
        - Coad.Yourdon
    -자료 중심 설계
        - 입/출력 자료의 구조를 파악하여 소프트웨어 자료 구조를 설계하는 방식
        - Jackson Warner-Orr
    - 객체지향 설계
        - 자료와 자료에 적용될 기능을 함께 묶어 추상화하는 개념
        - 시스템은 객체로 구성됨
        - Yourdon, Sheller/Meller, Rumbaugh, Booch
- 소프트웨어 구조도
    - 소프트웨어의 구성 요소인 모듈 간의 계층적 구성을 나타낸 것
    - 프로그램 구조에서 사용되는 용어
        - Fan-in : 주어진 한 모듈을 제어하는 상위 모듈 수
        - Fan-out : 주어진 한 모듈이 제어하는 하위 모듈 수
        - Depth : 최상위 모듈에서 주어진 모듈까지의 깊이
        - Width : 같은 등급(Level)의 모듈 수
        - Super ordinate : 다른 모듈을 제어하는 모듈
        - Subordinate : 어떤 모듈에 의해 제어되는 모듈
- ★소프트웨어 공학에서의 모델링(Modeling)
    - 모델(Model)과 ing의 결합으로 모델(모형)을 만드는 일을 의미함
    - 일반적으로 설계를 모델(Model)이라 하므로 모델링은 설계하는 행위를 의미함
    - 건축에서는 건물을 계획한 대로 쌓아 올리는 행위, 도는 인테리어 디자인을 계획한 대로 배치하는 행위라 할 수 있음
    - 사용자의 요구를 모델링할 수도, 구현될 응용 프로그램을 미리 모델링할 수도 있음
    - 개발팀이 응용 문제를 이해하는 데 도움을 줌
    - 요구 분석, 설계, 구현, 유지보수 등 모든 단계에서 모델링 기법을 활용함
    - 여러 분야의 개발자들이 공통된 개념을 공유하는데 도움을 줌
    - 자료 흐름도는 프로세스 위주의 모델링 기법임