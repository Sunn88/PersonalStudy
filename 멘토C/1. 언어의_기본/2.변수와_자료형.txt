1. 값의 저장을 위한 변수
- 변수의 이해
    - 변수 : 메모리 공간에 붙여진 이름
- 변수의 선언 및 초기화 방법
    - 변수의 선언 : 변수를 생성하는 과정
    - 변수의 초기화 : 선언된 변수에 처음 저장될 값을 지정하는 것
    - 특정 자료형의 값을 저장할 수 있을 만큼의 메모리 공간을 할당받고 거기에 사용자 지정 변수명을 지정함
    - 해당 메모리 공간에는 사용자가 지정한 값을 저장한다는 의미
- 다양한 변수의 선언 및 초기화 방법
    - 변수의 선언 : 메모리 공간을 할당받고 해당 메모리 공간에 이름을 붙이는 과정
    - 변수 선언시 해당 변수명은 특정 메모리 공간을 가리키게 되면서 해당 변수에 대한 초기화를 별도로 진행할 수 있음
    - 변수 선언 과정을 생략하고 변수 초기화는 불가능
    - 선언이 완료된 변수는 대입문을 여러 번 진행할 수 있고, 대입문이 수행될 때마다 해당 메모리 공간에 저장된 값이 변경됨
- 변수명 규칙
    - 알파벳, 숫자, 언더바로만 구성
    - 숫자 시작 불가, 공백 포함 불가
    - 이미 기능을 가진 키워드는 변수명 불가
    - C언어는 알파벳 대소문자 구분
- 변수의 출력과 printf 함수의 기본적인 이해

2. C언어의 기본 자료형
- 자료형 : 데이터(값 또는 변수)의 크기와 형태를 표현하는 방법
- C언어 기본 자료형의 종류
    - char
        - 형태 : 정수(문자)
        - 크기 : 1바이트
        - 값의 범위 : -128 ~ 127
    - short
        - 형태 : 정수
        - 크기 : 2바이트
        - 값의 범위 : -32,768 ~ 32,767
    - int
        - 형태 : 정수
        - 크기 : 4바이트
    - long
        - 형태 : 정수
        - 크기 : 4바이트
    - long long
        - 형태 : 정수
        - 크기 : 8바이트
    - float
        - 형태 : 실수
        - 크기 : 4바이트
    - double
        - 형태 : 실수
        - 크기 : 8바이트
    - long double
        - 형태 : 실수
        - 크기 : 8바이트 이상
- sizeof 연산자 : 다양한 자료형의 크기를 계산해 정숫값을 변환하는 연산자
    - 전달된 데이터가 차지하는 메모리 공간이 몇 바이트를 차지하고 있는지 계산해 정숫값으로 반환
- 정수 및 실수의 표현
    - 자료형이 정의되어 있지 않은 값을 처리해야 할 떄 컴파일러는 가장 빠르고 정확하게 표현할 수 있는 자료형을 선택해 처리함
- 문자의 표현
    - 컴퓨터는 숫자를 이용해 데이터를 인식하고 표기함
    - 아스키코드 : 알파벳과 일부 특수 문자 각각에 대응하는 숫자를 지정해둔 것 -> 문자를 표현

3. 상수에 대한 이해
-리터럴 상수  
    - 리터럴(Literal) : 값이 그 자체로 고정된 상수
        - 정수형 상수
        - 실수형 상수
        - 문자형 상수
    - 접미사를 사용해 자료형을 명확히 표현
        - long : L
        - long long : LL
        - float : F
        - long double : L
- 심볼릭 상수
    - 상수값 대신 사용할 수 있도록 상수에 이름을 붙여주는 것
    - 변수 선언문 앞에 'const'라는 키워드 추가 -> 프로그램의 일반적인 흐름을 따라 컴파일됨
- 매크로 상수
    - 이름이 있는 상수 -> 심볼릭 상수의 일종
    - 컴파일 시 컴파일러가 가장 먼저 처리함 -> 프로그램이 시작되기 전에 미리 정의되는 심볼릭 상수
